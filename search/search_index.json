{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lightrun Overview","text":"<p>test2 Lightrun is a developer-centric observability platform created by developers, for developers.  Its core mission is to empower developers like you to dynamically check for issues and debug your code on the fly, liberating you from the need to predict every imaginable edge case or attempt to recreate unexpected issues in different environments. At the heart of Lightrun are its proprietary Lightrun Actions, which encompass dynamic logs, snapshots, and metrics. These Actions grant you unparalleled access to code-level insights from any line of code, providing invaluable context during exceptions and augmenting your ability to monitor and comprehend code execution across various pathways.</p>"},{"location":"#what-can-i-use-lightrun-for","title":"What can I use Lightrun for?","text":"<p>Lightrun offers code-level deep inspection at the micro-granular level, allowing you to troubleshoot, test, and debug your applications by investigating issues directly from the environment where they are running, whether it's development, staging, or production. No hotfixes, restarts, or redeployment are required. Seamlessly integrating into your personal workflow and toolchain including IDEs and APMs (Application Performance Monitoring), and logging tools, Lightrun facilitates swift code instrumentation and issue resolution.</p> <p>Furthermore, Lightrun eliminates the need for costly developer lifecycle operations like local replication or software version updates merely to incorporate new logs or metrics. By enabling developers to observe and tackle the \u2018unknown unknowns\u2019 on the fly, Lightrun delivers unparalleled observability without necessitating redeployment, ensuring maximum efficiency and productivity.</p>"},{"location":"#bridging-the-observability-gap","title":"Bridging the observability gap","text":"<p>Traditionally, exceptions, logs, performance metrics and traces have been embedded in code during the development stage. But, with the advent of the cloud, followed by microservices and serverless architectures, an observability gap emerged between development and production environments, rendering it nearly impossible to anticipate production-only issues or reproduce them. Lightrun is the first platform to shift observability left, granting developers 100% visibility into their code, regardless of the deployment environment or infrastructure, whether it's monolithic or highly distributed.</p> <p>Using Lightrun, developers enjoy transparent access to exceptions as they occur, allowing them, on demand and in real time, to securely add logs, metrics, and traces to their application code while its running in production, staging, or development environments.</p>"},{"location":"#lightrun-typical-use-cases","title":"Lightrun typical use cases","text":"<p>Developers use Lightrun for multiple and diverse code-level observability goals, including:</p>"},{"location":"#testing-and-debugging","title":"Testing and debugging","text":"<ul> <li>Implementing code-level alerts.</li> <li>Verifying new features as part of progressive enhancement delivery, utilizing techniques like blue/green toggles and feature flags.</li> <li>Testing and debugging within progressive enhancement workflows.</li> <li>Onboarding new developers with legacy applications.</li> <li>Investigating code flows for better understanding and optimization.</li> <li>Shifting left observability by debugging:<ul> <li>CI/CD Pipeline.</li> <li>Distributed cloud-native applications.</li> <li>Legacy and monolith applications.</li> <li>Third-party or operating system code.</li> <li>ML pipelines and Big Data infrastructure.</li> <li>Feature flag activations providing full visibility into the delivery process.</li> </ul> </li> </ul>"},{"location":"#performance-analysis","title":"Performance analysis","text":"<ul> <li>Running performance analysis with on-demand metrics.</li> <li>Conducting pinpoint performance monitoring.</li> <li>Prioritizing security CVEs.</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Migrating data centers to cloud or microservices architectures.</li> <li>Troubleshooting microservices, serverless computing, and Big Data workers.</li> </ul>"},{"location":"#lightrun-features-and-benefits","title":"Lightrun features and benefits","text":"<p>Lightrun enables in-depth introspection of operational production code at the finest granularity, without any adverse effects. By securely adding Lightrun's logs, snapshots, and performance metrics, you can debug running production code, on demand in real-time, as needed.</p> <p>The following table provides a summary of Lightrun's capabilities and the benefits it offers to developers.</p> Lightrun features Developer benefits Multi-language support The Lightrun plugin is fully supported and validated across multiple languages, including Java, Scala, Kotlin, Node.js, Python, and .NET. Developer-centric Lightrun seamlessly integrates into your development workflow, whether through the Lightrun IDE plugin, using Lightrun's CLI client, or with a wide range of compatible third-party application performance monitoring (APM) and logging tools. All Lightrun instrumentation is added from the IDE or CLI tools you\u2019re already using. Fully transparent code observability You can invoke logs, metrics, and snapshots conditionally from anywhere in your deployed application code. There is no need to replicate the production environment or re-deploy. Guaranteed security Lightrun guarantees the security and privacy of your code with enterprise-level security measures including ISO 27001 certification, encryptions, RBAC and SSO, audit trails, logs, and privacy blacklisting. The Lightrun agent is non-web-based and stateless by design, ensuring that no application code is ever exposed. Non-breakable Add multiple logs, snapshots, counters, timers, function durations, and more without breaking the service and with minimal impact on performance. The Lightrun Sandbox verifies and validates full integrity of your application\u2019s behavior when running with Lightrun actions. Environment agnostic Lightrun operates everywhere: on-premises, in the cloud (AWS, GCP, Azure), for microservices, for serverless architectures, Kubernetes, and more. Debug in any environment across any infrastructure. Pipe anywhere From your IDE, you can pipe Lightrun actions to your favorite logging, analytics, and APM tools. Lightrun seamlessly integrates with multiple monitoring, alerting, and big data capture and analytics platforms, such as Prometheus, Datadog, and Statsd. Contextual tags Lightrun's powerful tagging feature enables you to group active agents according to any criterion such as staging, production, QA, server, division, location, organization and more. You can apply multiple tags in any combination to each agent. Once a Lightrun action (log, metric, snapshot) is bound to a tag, it is automatically added to all of the agents possessing that tag."},{"location":"#lightrun-supported-deployment-types","title":"Lightrun supported deployment types","text":"<p>Lightrun comes in the following deployment types:</p> <ul> <li>Multi-Tenant SaaS deployment: Utilize a management server hosted on shared infrastructure.</li> <li>Single-Tenant SaaS deployment: Utilize a Lightrun-hosted, private management server.</li> <li>Private Deployment In the Cloud: Utilize a privately exposed (not accessible from the public internet) management server, on a dedicated AWS account.</li> <li>Fully Air-Gapped, on-premise deployment: Utilize a self-hosted management server without exposing any data to the outside world.</li> </ul>"},{"location":"#whats-next","title":"What's next","text":"<ol> <li> <p>Learn about Lightrun's architecture and how the platform works.</p> </li> <li> <p>Give Lightrun a try or embark on your journey to experience its debugging capabilities firsthand.</p> </li> <li> <p>Start using Lightrun in 3 easy steps.</p> <ol> <li> <p>Install the Lightrun plugin for your IDE:</p> <p>- IntelliJ, PyCharm, and WebStorm</p> <p>- Visual Studio Code</p> </li> <li> <p>Install the Lightrun agent for your runtime environment:</p> <p>- Java agent</p> <p>- Python agent</p> <p>- Node.js agent</p> <p>- .NET agent</p> </li> <li> <p>Add your first action.</p> </li> </ol> </li> </ol>"},{"location":"actions/","title":"What Are Lightrun Actions?","text":"<p>A Lightrun Action is a snapshot, dynamic log, or metric that you add to specific lines of source code in your running application. Lightrun actions can be securely inserted into your application, whether it is running in the development, testing, staging, or production environment.</p> <p>Adding a Lightrun Action to the application code triggers a request from the Lightrun Server to the Agent running together with the application. Once the request is verified and authenticated, the appropriate instrumentation is added to the running application, without interrupting the service.</p> <p>By including Lightrun tags (for example, Development, QA, Production), you can attach Lightrun Actions to particular instances of your application code.</p> <p>The following sections describe each type of Lightrun Action in detail.</p> <ul> <li>Dynamic Logs</li> <li>Snapshots</li> <li>Metrics</li> </ul>"},{"location":"api-keys/","title":"Lightrun System API Keys","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>As of Lightrun version 1.23, you can actively generate and manage your private system API Keys using AES-128 encryption. API keys are assigned per organization and are crucial when configuring SCIM endpoints, and Lightrun Prometheus integration endpoints. As administrators, you need to generate keys in the Lightrun Management Server and then copy them to the target endpoint.</p>"},{"location":"api-keys/#rules-and-limitations","title":"Rules and Limitations","text":"<ul> <li>API Keys for Agents Pools use a dedicated mechanism and are managed independently for each Agent Pool. For more information, see Manage Agent Pools.</li> <li>As of version 1.23.0, Lightrun system API Keys are not supported for On-Premise deployments using Docker Compose.</li> <li>API Keys expire automatically after the predefined period you set when initially generating the API Key and can also be deactivated at any time. Please note that it is your responsibility to track the validity of the tokens to ensure secure and uninterrupted access.</li> </ul> <p>You have the flexibility to perform various tasks related to API Keys, including:</p> <ul> <li>Generate an API Key</li> <li>Revoke and delete an API Key</li> </ul>"},{"location":"api-keys/#generate","title":"Generate an API Key","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand of the taskbar to navigate to the Settings dashboard.</li> <li> <p>Select API Keys under Security in the Settings dashboard sidebar.</p> <p> </p> </li> <li> <p>Click Generate an API Key.</p> <p> </p> </li> <li> <p>(Optional) From the Key expiration list, you can leave the default 90 days or select an alternate range.</p> </li> <li>Click Generate.    The key is added to the API Keys list.    Proceed to copy the API Key to the required application endpoint.</li> </ol>"},{"location":"api-keys/#revoke","title":"Revoke and delete an API Key","text":"<p>Revoking and deleting API Keys is crucial for system security. Immediately revoke an API key if it's compromised, misused, hits its usage limit, belongs to an inactive user, is obsolete, or needs regular renewal. Once revoked, the API key denies access to the related service.</p> <p>Warning</p> <p>When an API Key is revoked, all associated integrations will immediately cease to function. It is crucial to create a new key before removing the existing one, as the removal will render all integrations using this key inoperable.</p> <ol> <li> <p>In the row of the required key, click Revoke and Delete.</p> <p>The Revoke and Delete the API Key dialog opens.</p> <p> </p> </li> <li> <p>Click Revoke and delete. </p> <p>The key is removed from the list.</p> </li> </ol>"},{"location":"architecture/","title":"Lightrun architecture","text":"<p>The Lightrun observability platform is a solution composed of a Lightrun plugin, installed on the developers' computers, Lightrun Agents, installed on live applications, and the Lightrun server.</p>"},{"location":"architecture/#lightrun-solution-components","title":"Lightrun solution components","text":"<p>The following diagram illustrates the interaction between the 3 main Lightrun components.</p> <p>"},{"location":"architecture/#lightrun-ide-plugin-lightrun-cli","title":"Lightrun IDE plugin/ Lightrun CLI","text":"<p>Serving as the client, the majority of the work done with Lightrun, such as troubleshooting, debugging, and performance testing, is performed directly from your integrated development environment (IDE) or the Lightrun CLI. Using the Lightrun plugin, you can insert Lightrun actions (Logs, Metrics, and Snapshots) anywhere within the source code of your running applications. Whenever you enter a command to insert an action, the agent receives your request. The plugin is available for popular IDEs (such as VS Code, IntelliJ, and PyCharm).</p>"},{"location":"architecture/#lightrun-management-server","title":"Lightrun Management Server","text":"<p>The Lightrun Management Server functions as the \"backbone\" of the Lightrun Observability Platform, maintaining the state of the system. It offers a Management Portal web UI for configuring administrative tasks and monitoring your agents and entities. Acting as the intermediary between the Lightrun agent and the Lightrun clients, the Management Server plays a crucial role in coordinating Lightrun Actions as well as privacy and security controls. This includes managing users, data security, system authentication, and other administrative features.</p>"},{"location":"architecture/#lightrun-agent","title":"Lightrun agent","text":"<p>The stateless agent that runs alongside the application is at the heart of the Lightrun platform. The agent lets you dynamically insert Lightrun proprietary actions, including logs, metrics, and snapshots into your running code.</p> <p>The Lightrun agent never processes, stores, or sends your source code to any third party but includes the Lightrun Sandbox that verifies and validates full integrity of your application\u2019s behavior when running with Lightrun actions. The Lightrun Sandbox guarantees no exceptions, system I/O, system calls, or state/flow changes, and ensures that only read-only code is ever added to your application.</p>"},{"location":"architecture/#how-lightrun-works","title":"How Lightrun works","text":"<p>Lightrun operates through a seamless process that enhances code observability and debugging capabilities. This architecture diagram shows how the different Lightrun platform components communicate with one another.</p> <p></p> <p>The process illustrated in the diagram is described as follows:</p> <ol> <li> <p>Developer adds Lightrun actions</p> <p>You begin by adding Lightrun actions directly to your application from the IDE. This allows you to incorporate logs, snapshots, and metrics directly into the running source code of your application, on the fly and in any environment.</p> </li> <li> <p>Management Server processes request</p> <p>When a user action is initiated from the Lightrun IDE plugin or CLI, the Lightrun Management Server processes the request. It then sends the request to the Lightrun agent deployed within your application environment. The Agent, residing within your application, verifies the stability, integrity, and security of each requested action through the Lightrun Sandbox before dynamically adding the instrumentation to your application at runtime.</p> </li> <li> <p>Action inserted by agent </p> <p>The verified action is then inserted into your application at a specific location by the Agent during runtime.</p> </li> <li> <p>Data transmission</p> <p>The data generated by these actions is transferred back to the developer\u2019s IDE through the Management Server. Once Lightrun actions are added, you can immediately view the output directly from your IDE or from the Management Portal in any web browser.</p> </li> </ol>"},{"location":"architecture/#whats-next","title":"What's next","text":"<p>Give Lightrun a try or embark on your journey to experience its debugging capabilities firsthand.</p> <ul> <li>Try Lightrun.</li> </ul> <ul> <li> <p>Start using Lightrun in three easy steps:</p> <ol> <li> <p>Install the Lightrun plugin for your IDE:</p> <p>- IntelliJ, PyCharm, and WebStorm</p> <p>- Visual Studio Code</p> </li> <li> <p>Install the Lightrun agent for your runtime environment:</p> <p>- Java agent</p> <p>- Python agent</p> <p>- Node.js agent</p> <p>- .NET agent</p> </li> <li> <p>Add your first action.</p> </li> </ol> </li> </ul>"},{"location":"audit-use/","title":"Audit system usage","text":"<p>Lightrun maintains a record of your organization's Lightrun system usage, which is crucial for observing continuous compliance, performing system audits, and maintaining security.</p> <p>The stored events include data about activities related to the Management Portal, Lightrun plugins, and agents. With the Lightrun audit events, you can answer questions such as:</p> <ul> <li>How is a specific user in your organization using Lightrun?</li> <li>What changes have been made to your organization\u2019s account, and when?</li> <li>Who made a particular change, and when?</li> <li>Who created an agent or action, and when?</li> </ul>"},{"location":"audit-use/#view-captured-events-in-the-management-portal","title":"View captured events in the Management Portal","text":"<p>You can view a brief overview of all captured events in your Management portal.</p>"},{"location":"audit-use/#to-view-audited-events","title":"To view audited events","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Select Audit events under Security in the Settings dashboard sidebar.</li> </ol> <p>The Audits page should appear similar to the following image:</p> <p></p> <p>The following table describes the data available in the Audit table:</p> Data Description Date Date of activity. USER Username of who performed the activity, including automated system actions. STATE State of the Activity. EXTRA DATA More data from the activity. See Events Type below for a list of all events audited by Lightrun and their metadata."},{"location":"audit-use/#filter-audits","title":"Filter Audit table","text":"<p>You can filter the Audit table in two ways:</p> <ul> <li>Filter based on a specific date range.</li> <li>Filter by specifying custom conditions.</li> </ul>"},{"location":"audit-use/#filter-by-date-range","title":"To filter the Audit table based on a specific date range","text":"<ol> <li> <p>Enter the start date by clicking on the From input.   </p> </li> <li> <p>Enter the end date by clicking on the To input.   </p> </li> </ol> <p>The data filter will be automatically applied after selecting any of the two options.</p>"},{"location":"audit-use/#filter-by-custom-conditions","title":"To filter the Audit table by specifying custom conditions","text":"<ol> <li> <p>Click the filter icon   next to the date fields. A menu appears that allows you to filter on various conditions.     </p> </li> <li> <p>Populate the present fields with your preferred conditions. The Audit table will be updated automatically.</p> </li> </ol>"},{"location":"audit-use/#audit-events-retention","title":"Audit events retention","text":"<p>The default retention period for captured events is 30 days. For advanced capabilities, such and extended timeframe and the use of an external event storage, please reach out to our support team.</p>"},{"location":"audit-use/#events","title":"Events and events metadata","text":""},{"location":"audit-use/#stored-events","title":"Stored events","text":"<p>The following table describes a list of events stored by Lightrun and their corresponding metadata.</p> Event Actor Description Metadata <code>create action success</code> Agent/User New action creation was successful. - Action Metadata  - Agent Metadata  - User Metadata <code>create action failure</code> Agent/User Action creation failed due to an <code>error_message</code>. - Action Metadata  - Agent Metadata  - User Metadata <code>create new user</code> User, System New user was created successfully or failed due to an <code>error_message</code>. User Metadata, System Metadata <code>delete user</code> User User was deleted successfully or failed due to an <code>error_message</code>. User Metadata <code>create agent success</code> Agent Action was created successfully. - Action Metadata  - Agent Metadata  - User Metadata <code>create agent failed</code> Agent Action creation failed due to an <code>error_message</code>. - Action Metadata  - Agent Metadata  - User Metadata <code>remove agent success</code> Agent Action was removed successfully. - Action Metadata  - Agent Metadata  - User Metadata <code>integration added</code> User New integration was added successfully. User Metadata <code>daily exception limit reached</code> System Daily exception limit reached. System Metadata <code>change company name</code> User Organization was renamed successfully or failed due to an <code>error_message</code>. User Metadata <code>tag created</code> System New METADATA TAG added to organization\u2019s account. User Metadata <code>authentication Success</code> User User was authenticated successfully. User Metadata"},{"location":"audit-use/#events-metadata","title":"Events metadata","text":""},{"location":"audit-use/#user-metadata","title":"User metadata","text":"<p>The following table describes the data available in the User metadata.</p> Data Description <code>user_id</code> User ID value. <code>user_name</code> User name. <code>user_types</code> User type. <code>user_group</code> User group."},{"location":"audit-use/#action-metadata","title":"Action metadata","text":"<p>The following table describes the data available in the Action metadata.</p> Data Description <code>action_type</code> Action type: - Log - Metrics - Snapshot <code>action_id</code> Action ID. <code>condition</code> Action conditions. <code>expression</code> Action expression. <code>file_name, line</code> Action filename and line. <code>ignore_qouta</code> Action <code>ignore_qouta</code> configuration. <code>max_hit_count</code> Action <code>max_hit_count</code> value."},{"location":"audit-use/#system-metadata","title":"System metadata","text":"<p>The following table describes the data available in the System metadata.</p> Data Description <code>operation_type</code> System operation type. <code>executor_ip</code> System IP address. <code>message</code> System operation message. <code>operation_result</code> System operation result. <code>actor</code> Event actor. <code>target</code> Event target."},{"location":"audit-use/#agent-metadata","title":"Agent metadata","text":"<p>The following table describes the data available in the Agent metadata.</p> Data Description <code>agent_api_version</code> Agent API version. <code>agent_ip</code> Agent IP address. <code>agent_id</code> Agent ID value. <code>agent_name</code> Agent name. <code>agent_os</code> Agent OS. <code>agent_pid</code> Agent PID value. <code>agent_version</code> Agent version. <code>runtime environment</code> Runtime environment. <code>log_piping</code> Agent configured routing value. <code>source</code> Agent source."},{"location":"audit-use/#export-captured-events","title":"Export captured events","text":"<p>Lightrun provides two options for exporting captured system events.</p> <ul> <li>Export to a CSV file.</li> <li>Export to AWS S3.</li> </ul>"},{"location":"audit-use/#csv","title":"Export to a CSV file","text":""},{"location":"audit-use/#to-export-your-captured-system-events-to-a-csv-file","title":"To export your captured system events to a CSV file","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Select Audit events under Security in the Settings dashboard sidebar.</li> <li>Apply the necessary filters to the Audit table. See Filter Audit table for more information.</li> <li>Click the Export as CSV button to download the <code>.csv</code> file.</li> </ol> <p>The exported <code>.csv</code> file will have the following naming format <code>lightrun-audit-events-&lt;timestamp&gt;.csv</code>.</p> <p>Important</p> <p>The CSV export feature is limited to a maximum of 1,000 records. If you require more, please contact our support team for alternative solutions.</p>"},{"location":"audit-use/#csv-file-fields","title":"CSV file fields","text":"<p>The following fields will be present in the exported CSV file.</p> Fields Description Date Date of activity. Actor type Event actor, can be: - <code>Agent pool</code>- <code>Agent</code>- <code>System</code>- <code>User</code>. Actor Event actor, can be: -Agent pool name -User email - Agent ID. ID Event ID. Agent Pool Name of agent pool whose agent were used to register the action. Event Type Event type. Result Outcome of the event (<code>success</code> or <code>failure</code>). EXTRA DATA More data from the activity. See Events Type below for a list of all events audited by Lightrun and their metadata."},{"location":"audit-use/#s3-buckets","title":"Export to SysLog","text":"<p>Lightrun captures all events made by every user associated with your organization and stores the event in Amazon S3 buckets in a Syslog file format.</p> <p>Important</p> <p>The option to access audit events in Amazon S3 buckets is not available to every Lightrun account. Please reach out to our support team for more information.</p>"},{"location":"audit-use/#audit-events-retention-aws-s3-buckets","title":"Audit events retention (AWS S3 buckets)","text":"<p>The audit events S3 buckets are updated daily and have a default retention period of 24 months. Please contact our support team for more information on configuring your organization\u2019s audit event retention period.</p>"},{"location":"audit-use/#syslog-file-format","title":"SysLog file format","text":"<p>Lightrun Audit events data are stored in Amazon S3 in a Syslog file format. The following code sample describes an example audit event for an agent-removed event.</p> <p><pre><code>1 2022-08-29T12:19:51Z 10.50.29.9 Lightrun 72850 [actorId=d885cc7b-344f-44aa-a853-0a261a844d8d eventType=delete event=REMOVED_AGENT_SUCCESS outcome=success]\n[runtime_environment=Java agent_id=d885cc7b-344f-44aa-a853-0a261a844d8d agent_name=shiran-Latitude-7410 (pid 72850) api_version=1.7 log_piping=BOTH agent_os=linux agent_pid=72850 agent_version=1.7.0-rc4.de87b07b3]\n</code></pre> The Syslog message has the following format:</p> <ul> <li>Header (Line 1)</li> <li>Structured Data (Line 2)</li> <li>Message (Line 3)</li> </ul>"},{"location":"audit-use/#header","title":"Header","text":"<p>The following table describes the data in the Header part of the audit event data.</p> Data Description Version Syslog protocol version TimeStamp The time when the audit log was created in an ISO 8601 format. HostName The machine that sent the events data PROCID The log Process ID  which can be used to further identify the sender of the audit log. MSGID Audit log message ID.- <code>authn</code>- <code>creation</code>- <code>access</code>- <code>change</code>- <code>deletion</code>"},{"location":"audit-use/#data","title":"Structured data","text":"<p>The following table describes the data in the Structured Data part of the audit event.</p> Data Description Actor type Event actor, can be: - <code>Agent</code>- <code>System</code>- <code>User</code> Actor ID Event actor ID. For example, User ID, Agent ID, or System ID. Event The event that created the audit log. See Events Type below for a list of all events audited by Lightrun. Event Type Event type, can be: - <code>authentication</code> - <code>creation</code> - <code>access</code> - <code>change</code> - <code>deletion</code> Outcome Event outcome, can be: - <code>success</code> - <code>failure</code> - <code>unknown</code> Target Event target. Details Event details."},{"location":"audit-use/#message","title":"Message","text":"<p>Event metadata. See Events Type above for a list of all events audited by Lightrun and their metadata.</p>"},{"location":"authenticate-plugin/","title":"Authenticate Lightrun","text":"<p>To start using Lightrun in your Jetbrains IDE, you must first authenticate your Jetbrains Plugin.</p> <p>Prerequisites</p> <p>These instructions assume that you have:</p> <ul> <li>A lightrun account.</li> </ul> <ul> <li>Installed the Lightrun Jetbrains plugin in your IDE.</li> </ul> <p>Important</p> <p>You still have to install a Lightrun agent in your JVM application to use Lightrun in your IDE.</p> <ul> <li>Follow the instructions here to set up a Lightrun agent in your Java application.</li> </ul> <ul> <li>Follow the instructions here to set up a Lightrun agent in your Python application.</li> </ul> <ul> <li>Follow the instructions here to set up a Lightrun agent in your Node.js application.</li> </ul>"},{"location":"authenticate-plugin/#to-authenticate-lightrun-from-your-ide","title":"To authenticate lightrun from your IDE","text":"<ol> <li>Click the Lightrun tab on the top right-hand corner of your JetBrains IDE to open the Lightrun tool window.</li> <li> <p>Click Disconnected - Click to Login on the top part of the Lightrun tool window.           Your browser will open automatically to the Lightrun login page.</p> </li> <li> <p>Log in with your credentials to authenticate your Lightrun plugin. A confirmation message will be displayed on successful authentication.</p> </li> <li>Go back to your IDE. You should have access to the Agents and Tags tab if the authentication process is successful.     </li> </ol> <p>Note</p> <ul> <li>Please note that there's a timeout configured in the authentication process, and you might need to re-login if the timeout elapses. </li> </ul> <ul> <li>The Lightrun tool window display might appear differently, with the Login and Sign Up options appearing as buttons in the center of the Lightrun pane, similarly to the following:  In this case, click Login to authenticate your plugin, or click Sign Up to create a Lightrun account.</li> </ul> <p>Watch this video to get up and running: </p> <p>Lightrun - Getting started from IntelliJ from Lightrun on Vimeo.</p>"},{"location":"blocklists/","title":"Lightrun Blocklists","text":"<p>Use blocklists to prevent Lightrun actions being inserted into classes that might expose sensitive data. Files and packages that include the patterns specified in the Blocklist table are protected, and your team won't be able to add actions.</p> <p>You can configure blocklists to include package and class names, file names, and directory paths. You can also add blocklist exceptions for any relevant subclasses in which you want to allow action insertion.</p> <p>Each time your application is started, the agent's blocklist configuration is downloaded and applied to all future actions. If you modify the blocklist configuration, you must restart the application to activate the modified blocklist.</p> <p>This is a common blocklist example. In this scenario, you aim to prevent actions for <code>com.sales</code> using the following pattern:</p> <pre><code>com.sales\n</code></pre> <p>To allow actions specifically for the <code>com.sales.Admin</code> class, you can add the following exception:</p> <pre><code>com.sales.Admin\n</code></pre>"},{"location":"blocklists/#configure-blocklist-and-exceptions","title":"Configure blocklist and exceptions","text":"<p>Info</p> <p>All users can view blocklists and blocklist exceptions but only managers can create, edit, and delete blocklist and blocklist exception patterns.</p>"},{"location":"blocklists/#to-configure-a-blocklist-and-blocklist-exceptions","title":"To configure a blocklist and blocklist exceptions","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Select Blocklist under Security in the Settings dashboard sidebar.</p> <p>The Blocklist window opens, showing a table of existing blocklist and blocklist exception patterns.</p> </li> <li> <p>To add a text pattern for a new blocklist or blocklist, click the  button next to Blocklist or Blocklist Exceptions.</p> <p>The Add Pattern dialog box opens.</p> <p></p> </li> <li> <p>In the Name text field, for each pattern, enter a unique name.</p> </li> <li>Respectively for Blocklist and Blocklist Exceptions, in the Regex text field, enter a Regex pattern to be blocked or allowed as an exception (for example, a class name, file name, or directory path).</li> <li>Click Save. <p>The dialog box closes and the Blocklist (or Blocklist Exceptions) table updates to include the newly added patterns.</p> <p>Lightrun agents will fetch updated blocklists during startup. To apply new filters to your existing agents you'll need to restart those agents.</p> </li> </ol>"},{"location":"custom-sources/","title":"Managing Custom Sources in the Lightrun Management Portal","text":"<p>A Custom Source is a dynamic group of agents and tags defined by a set of conditions, like a shared hostname or tag. Using Custom Sources, you can simultaneously apply an action to multiple agents without editing your agent configuration or restarting your server. To learn more about Lightrun Custom Sources, Custom Source conditions, the differences between Agents, Tags, and Custom Sources, see Introduction to Lightrun Custom Sources.</p>"},{"location":"custom-sources/#create-a-custom-source","title":"Create a Custom Source","text":"<ol> <li>Log in to your Lightrun account</li> <li>Navigate to Entities</li> <li>Select Custom Sources to open the Custom Sources page.</li> <li> <p>Click + Create a Custom Source.</p> <p>The following modal should appear.   </p> </li> <li> <p>Enter the Custom Source name, specify the relevant conditions, and click Create a Custom Source to create the Custom Source. After creating a Custom Source, the Custom Sources page should appear similar to the following image.</p> <p></p> <p>The table describes the following parameters in the Custom Source table.</p> Field Description NAME Custom Source name. CREATED BY Email of user who created the Custom Source. CREATION TIME Custom Source creation time. </li> </ol>"},{"location":"custom-sources/#view-agents-attached-to-a-custom-source","title":"View agents attached to a Custom Source","text":"<ul> <li>Click on a Custom Source to view every agent attached to the Custom Source. <p>The table describes the following parameters: </p> Field Description NAME The name of the server on which the agent is running. ENVIRONMENT The application environment. START TIME The time at which the agent was started. UPDATE TIME The last time the agent fetched actions from the server. ID The unique agent ID. API VERSION The Lightrun API version currently implemented. AGENT VERSION The Lightrun Agent version currently implemented. ROUTING The current configuration for log piping. TAGS Tags attached to this agent. </li> </ul>"},{"location":"custom-sources/#delete-a-custom-source","title":"Delete a Custom Source","text":"<p>Important</p> <p>You must remove every Lightrun action associated with a Custom Source before you can delete the Custom Source.</p> <ul> <li>Click the  icon next to a Custom Source to delete the Custom Source.</li> </ul>"},{"location":"data-logs/","title":"Collect all log output","text":"<p>Lightrun agent logs are collected and made available for troubleshooting if any issues arise while using Lightrun.</p> <p>Managers can work with agent logs as follows:</p> <ul> <li>Collect logs from all active agents and plugins</li> <li>Download any of the collected output</li> <li>Delete log output - this only deletes the output you've collected</li> </ul> <p>Note</p> <p>This is not related to the dynamic Lightrun log action, but rather the logs collected from the running agents and active plugins and other associated Lightrun services. </p>"},{"location":"data-logs/#to-view-agent-logs","title":"To view agent logs","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Select Lightrun's logs collector under Compliance in the Settings dashboard sidebar.</p> <p>The Lightrun's logs collector screen loads and appears similar to the following:   </p> </li> <li> <p>To collect new active logs, click Collect Logs.</p> <p>The collected logs will appear on the page.   </p> </li> <li> <p>To download a log, click Download from the relevant log row in Log Requests table. </p> </li> <li>To delete output, click Delete from the relevant log row in Log Requests table.</li> <li>Click Refresh to refresh the collected logs.</li> </ol>"},{"location":"docker/","title":"Lightrun on Docker","text":""},{"location":"docker/#installing-lightrun-inside-a-docker-container","title":"Installing Lightrun inside a Docker container","text":"<p>Docker containers are ephemeral.</p> <p>If you were to create a shell into a Docker container (by <code>docker exec -it &lt;container-id&gt;</code>, for example) and add the Lightrun files there, they would disappear the next time the container would spin up due to the ephemeral nature of that container.</p> <p>Instead, we suggest you install Lightrun by adding it to the underlying Docker image directly, i.e. by \"baking\" the agent into the image.</p> <p>Instructions for each language we support are provided inside the \"Install an Agent\" section for the language:</p> <ul> <li>Installing Lightrun for the JVM inside a Docker container</li> <li>Installing Lightrun for Node.js inside a Docker container</li> <li>Installing Lightrun for Python inside a Docker container</li> </ul>"},{"location":"dynamic-log-customization/","title":"Customize Java dynamic logs for logger integration","text":"<p>Note</p> <p>This feature is available for the Lightrun Java Agent.</p> <p>This guide describes how to customize Lightrun logs to align with your application's logger format. Lightrun supports the integration of dynamic logs into your application's existing logs, maintaining the application\u2019s log format and structure. If your application is configured to send logs to log management tools such as Kibana or New Relic, you can also include dynamic logs in real-time during runtime. These dynamic logs will be piped to those tools along with your application's static logs. For more information, see Dyanmic Logs Overview.</p> <p>The Lightrun agent uses <code>java.util.logging</code> as its logging framework, and integration with the application's logger is achieved by adding a <code>java.util.logging.Handler</code> implementation to the agent. Certain logging frameworks offer built-in handler implementations, for example, SLF4J provides the <code>SLF4JBridgeHandler</code>, which serves as a bridge between the <code>java.util.logging</code> logger and the SLF4J APIs.</p> <p>Before integrating Lightrun logs to your application logger, it is important to understand your application logger configuration, map its hierarchy, and determine the specific level of <code>LoggerConfig</code> within the hierarchy that you wish to be inherited by the Lightrun logger. Notably, <code>Log4J2</code> implements a hierarchy mechanism between <code>LoggerConfig</code> objects.</p> <p>The following diagram illustrates the integration between the Lightrun agent logger and the Application logger through <code>JUL</code> handlers.</p> <p></p>"},{"location":"dynamic-log-customization/#before-you-begin","title":"Before you begin","text":"<ul> <li>Prior knowledge of your application's logging configuration is essential for executing the described steps effectively. Familiarize yourself with relevant logging settings before proceeding.</li> </ul> <ul> <li>In your logger configuration file (typically named <code>&lt;framework&gt;.xml</code> or <code>&lt;framework&gt;-spring.xml</code> in a Spring application), configure the Lightrun logger with the relevant appender(s) for your application by adding the appender(s) to Lightrun logger. Note that this step is unnecessary if the appenders you want are already configured on the root logger.<pre><code>&lt;Loggers&gt; &lt;Logger name=\"com.lightrun\" level=\"info\"&gt;\n            &lt;AppenderRef ref=\"AppAppender\" /&gt;\n    &lt;/Logger&gt;\n&lt;/Loggers&gt;\n</code></pre> </li> </ul> <ul> <li>Keep in mind that later, when creating Lightrun logging actions, you will need to ensure that the Target for the Lightrun action(s) includes Stdout. </li> </ul> <p>The following sections describe common use cases with examples on logging frameworks.</p>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-slf4j","title":"Configure Dynamic Logger with SLF4J","text":"<p>Note</p> <p>If you are using the Spring Boot framework, refer to spring boot &amp; SLF4J.</p> <p>This section describes how to set up the dynamic logger with SLF4J, without Spring Boot, using one of the following options:</p> <ul> <li>Configure Dynamic Logger with SLF4J with code change</li> <li>Configure Dynamic Logger with SLF4J without changing your code</li> </ul>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-slf4j-with-code-change","title":"Configure Dynamic Logger with SLF4J with Code Change","text":"<ol> <li>In your code, configure the <code>SLF4JBridgeHandler</code> of <code>org.slf4j:jul-to-slf4j</code> on the root logger at the beginning of the execution. For more details, see Class SLF4JBridgeHandler.</li> <li>Configure the agent with <code>com.lightrun.DynamicLog.useParentHandlers=true</code> which can be set in the <code>agent.config</code> file,  as a Java property, or as an environment variable.</li> </ol>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-slf4j-without-changing-your-code","title":"Configure Dynamic Logger with SLF4J without changing your code","text":"<p>Note</p> <p>This option is not supported for a JAR containing nested JARs (Uber JAR) because it is not possible to specify a classpath for nested JARs.</p> <p>Prerequisites</p> <p><code>slf4j-jul</code> libraries must be available at runtime. Typically, the required packages are <code>slf4j-jul-{version}.jar</code>, <code>slf4j-api-{version}.jar</code>, <code>slf4j-core-{version}.jar</code>. In case of containerized applications, ensure that the packages are packaged inside the container. </p> <ol> <li> <p>Search for the <code>jul-to-slf4j</code> library.</p> <ul> <li> <p>For Maven:</p> <p><code>bash mvn dependency: tree -Dincludes=org.slf4j:jul-to-slf4j</code></p> </li> </ul> <ul> <li> <p>For Gradle:</p> <p><code>bash gradle dependencyInsight --dependency jul-to-slf4j (or ./gradlew)</code></p> </li> </ul> </li> <li> <p>Find and copy the JARs to where the Lightrun agent is located.    In the <code>agent.config</code> file, add the following configuration:</p> <pre><code>com.lightrun.DynamicLog.handlers=org.slf4j.bridge.SLF4JBridgeHandler\n\ncom.lightrun.DynamicLog.SLF4JBridgeHandler.classpath=&lt;PATH_TO_jul-to-slf4j.jar&gt;\n</code></pre> </li> </ol>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-log4j2","title":"Configure Dynamic Logger with Log4J2","text":"<p>Note</p> <p>If you are using the Spring Boot framework, refer to spring boot &amp; SLF4J.</p> <p>This procedure describes how to set up the dynamic logger with <code>Log4j2</code> without Spring Boot using one of the following options:</p> <ul> <li>Configure Dynamic Logger with Log4J2 with code change</li> <li>Configure Dynamic Logger with Log4J2 without code change</li> </ul>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-log4j2-with-code-change","title":"Configure Dynamic Logger with Log4J2 with Code Change","text":"<ol> <li>In your code, configure the <code>Log4JBridgeHandler</code> available in the <code>org.apache.logging.log4j:log4j-jul</code> package on the root logger of your application as part of the application utilization: <code>Log4JBridgeHandler.install(false, \"\", true);</code></li> <li>Configure the agent with <code>com.lightrun.DynamicLog.useParentHandlers=true</code>, which can be set in the <code>agent.config</code> file, as a Java property or as an environment variable.</li> </ol>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-log4j2-without-code-change","title":"Configure Dynamic Logger with Log4J2 without Code Change","text":"<p>Note</p> <p>This option is not supported for a JAR containing nested JARs (uber JAR) because it it not possible to specfiy a classpath insided a JAR.</p> <p>Prerequisites</p> <p><code>Log4j-jul</code> libraries must be available at runtime. Typically, the required packages are <code>log4j-jul-{version}.jar</code>, <code>log4j-api-{version}.jar</code>, and <code>log4j-core{version}.jar</code>. In case of containerized applications, ensure that the packages are copied inside the container. </p> <ol> <li> <p>Search for the <code>log4j-jul</code> library.</p> <ul> <li> <p>For Maven:</p> <pre><code>mvn dependency:tree -Dincludes=org.apache.logging.log4j:log4j-jul\n</code></pre> </li> </ul> <ul> <li> <p>For Gradle:</p> <pre><code>gradle dependencyInsight --dependency log4j-jul (or ./gradlew).\n</code></pre> </li> </ul> </li> <li> <p>Find and copy the JARs to the location where the Lightrun agent is located.</p> </li> <li>Add the following to the <code>agent.config</code> file:<pre><code>com.lightrun.DynamicLog.handlers=org.apache.logging.log4j.jul.Log4jBridgeHandler\ncom.lightrun.DynamicLog.Log4jBridgeHandler.classpath=&lt;PATH_TO_log4j-jul.jar&gt;\n</code></pre> </li> </ol>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-log4j-1x","title":"Configure Dynamic Logger with Log4J (1.x)","text":"<p><code>Log4J 1.x</code> does not have a built-in bridge, unlike some logging frameworks, requiring the implementation of a custom handler.</p> <ol> <li> <p>Implement this simple handler:</p> <pre><code>import java.util.logging.Handler;\nimport java.util.logging.LogRecord;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\n\npublic class Log4J1BridgeHandler extends Handler {\n\n@Override\n    public void publish(LogRecord record) {\nClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();\nThread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());\ntry {\nLogger log4j = getLog4jLogger(record.getLoggerName());\nLevel log4jLevel = getLog4jLevel(record.getLevel());\nlog4j.log(log4jLevel, record.getMessage(), record.getThrown());\n} finally {\nThread.currentThread().setContextClassLoader(originalClassLoader);\n}\n}\n\n@Override\n    public void flush() {\n}\n\n@Override\n    public void close() throws SecurityException {\n}\n\nprivate Logger getLog4jLogger(String name) {\nreturn Logger.getLogger(name);\n}\n\nprivate Level getLog4jLevel(java.util.logging.Level level) {\nif (java.util.logging.Level.SEVERE.equals(level)) {\nreturn Level.ERROR;\n} else if (java.util.logging.Level.WARNING.equals(level)) {\nreturn Level.WARN;\n} else if (java.util.logging.Level.INFO.equals(level)) {\nreturn Level.INFO;\n} else if (java.util.logging.Level.CONFIG.equals(level) ||\njava.util.logging.Level.FINE.equals(level)) {\nreturn Level.DEBUG;\n} else if (java.util.logging.Level.FINER.equals(level) ||\njava.util.logging.Level.FINEST.equals(level)) {\nreturn Level.TRACE;\n} else {\nreturn Level.ALL;\n}\n}\n}\n</code></pre> </li> <li> <p>Compile the handler.</p> </li> <li> <p>Add the handler and its classpath to the <code>agent.config</code> file:</p> <pre><code>com.lightrun.DynamicLog.handlers = &lt;FULLY_QUALIFIED_NAME&gt;.Log4J1BridgeHandler\ncom.lightrun.DynamicLog.Log4JBridgeHandler.classpath=&lt;PATH_TO_FILE&gt;/Log4J1BridgeHandler.class\n</code></pre> </li> </ol>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-spring-boot-slf4j","title":"Configure Dynamic Logger with Spring Boot &amp; SLF4J","text":"<p>By definition, Spring adds the <code>SLF4JBridgeHandler</code> handler to the root logger, bridging <code>java.util.logging</code> logs to SLF4J. The Lightrun logger (<code>com.lightrun</code>) parents are <code>com</code> and the root logger. Therefore, setting the following property to <code>true</code> will cause the Lightrun logger to publish logs to its parent's handlers, including the <code>SLF4JBridgeHandler</code> handler of the root logger.</p> <ul> <li>Congfigure the agent with <code>com.lightrun.DynamicLog.useParentHandlers=true</code>. which can be set in the <code>agent.config</code> file, or alternatively as a Java property or as an environment variable.</li> </ul>"},{"location":"dynamic-log-customization/#configure-dynamic-logger-with-a-custom-handler","title":"Configure Dynamic Logger with a custom handler","text":"<p>You can implement a custom handler of your own and add it to the agent <code>jul</code> logger.</p> <ol> <li>Compile your handler.</li> <li>Add your handler and its classpath to the <code>agent.config</code> file:<pre><code>com.lightrun.DynamicLog.handlers = &lt;FULLY_QUALIFIED_NAME&gt;.YourCustomHandler\ncom.lightrun.DynamicLog.YourCustomHandler.classpath=&lt;PATH_TO_FILE&gt;/YourCustomHandler.class\n</code></pre> </li> </ol>"},{"location":"encrypted/","title":"[Limited Availability]Encrpytion testing","text":"5/tIFO0YS2OvdVi0p1q/NQ==;gB4dxSiPOzd1zKV/Dgdf4Q6bK+JEXngGStFnQKLJzF+gK7y1sV6CgSyEDZQgQrVPsiY17jIxND+TmPBcxYHiWuIE79L96iW1VkaCRGt+IHDEVZoLQ5i00nfYubWRJVOO/a6TQLXkvc2LsH8V2I1APsJ+d6vNpI1lA+/Aquvj1u308i9qT9Z4b4rhuRxzoCqqp8Rj9PfhC8yx6/qkWpLFruhCo2Z0ebDgY/jqx1tHCl8xmn4iiY/GntSQo2wakD94CcBgKPXi9LGE12hiGzRbkThmBK2b5NSoxHslM9m5b3dhigzQ/Jfr4o+RbGHg2NXaSYX0fdiQSakSRnMaK126v0YRjvCbHKciq5t68Tvtyx6d0a9WyqwBGR8DjecxgohpbYWWxImtDohH1z/k0Oxiyc6deapG8GUHnDiBowZrgBWwqC3xOuJYPGyEilHFVQQ3aUfe8VPzS6ZRtHRf0SoEf7KzmFf6xSVRTT3ZOR0dcAGYbvRM32x4oxnp4ITU3hEs+sogV7Qh5bqPv2/aW4LKUrfL9eE1D1Kuto/A48l1J8aj2eIip9yd4MnKlLfAUtU0UL0Wex9NocKh1OlbQ2xEk09we53+q1R0XWsuYWqEdI1gz/mB7iXz4vh7dUVlWOTMiBVBXy0KHSvvQJXpztAZPisINPYPf/UJ8IlPEUJ6iddQ/BVYL9M5lN/AwGhib3lzdmhSf462+w/OxfLCwyvSHfRqmV6ENf7Td6BY14302Cj4RFHyzgnbLP9/2Td++wL+;^ This content is available for authorized users <p>Contact Lightrun Support for access to this page!</p> <p></p>"},{"location":"get-started/","title":"Get started with Lightrun","text":"<p>It\u2019s time to get started with debugging your applications effortlessly. Explore our options for trying out Lightrun and dive into real-time debugging and troubleshooting with Lightrun.</p>"},{"location":"get-started/#try-it-out","title":"Try it out!","text":"<p>Experience our developer-friendly environment firsthand through our virtual playground, enabling you to test Lightrun in a real, live application within seconds. No configuration required. Simply visit https://playground.lightrun.com/ to get started.</p> <p>Feel free to experiment with the Lightrun platform against a live running application and witness modern troubleshooting and debugging using dynamic logs, metrics, and snapshots.</p> <p>Ready to dive deeper?</p>"},{"location":"get-started/#book-a-demo","title":"Book a demo!","text":"<p>Get a demo and learn how to easily debug applications in various types of deployment methods and topologies: microservices, Kubernetes, Docker Swarm, ECS, Big Data, serverless, and more. For a personalized walkthrough or to address specific queries, feel free to schedule a demo with our team.</p>"},{"location":"get-started/#lightrun-pricing","title":"Lightrun pricing","text":"<p>Check out our plans and pricing for more information. We're here to streamline your debugging process without the hassle.</p>"},{"location":"get-started/#start-using-lightrun","title":"Start using Lightrun","text":"<ol> <li> <p>Install the Lightrun plugin for your IDE:</p> <ul> <li>IntelliJ, PyCharm, and WebStorm</li> </ul> <ul> <li>Visual Studio Code</li> </ul> </li> <li> <p>Install the Lightrun agent for your runtime environment:</p> <ul> <li>Java agent</li> </ul> <ul> <li>Python agent</li> </ul> <ul> <li>Node.js agent</li> </ul> <ul> <li>.NET agent</li> </ul> </li> <li> <p>Add your first action.</p> </li> </ol>"},{"location":"getting-around/","title":"JetBrains Plugin Quick Tour","text":"<p>The majority of the work you do with Lightrun, such as troubleshooting, debugging, and performance testing, is performed directly from your integrated development environment (IDE) or the Lightrun CLI.</p> <p>Using the Lightrun plugin, provided for a variety of popular IDEs (such as VSCode, IntelliJ, and PyCharm), you can insert Lightrun actions (Logs, Metrics, and Snapshots) anywhere within the source code of your running applications. Also, from within the Lightrun plugin for your IDE, you can view, in real time, the output of Lightrun actions.</p> <p>And, thanks to Lightrun's comprehensive range of integrations with third-party logging tools, from the plugin, you also can route output from Lightrun Logs and Metrics to your usual logging framework (such as New Reic and DataDog).</p>"},{"location":"getting-around/#scope-of-the-quick-tour","title":"Scope of the quick tour","text":"<p>This quick tour guide provides an overview of the main features and functionalities of the Lightrun Plugin for JetBrains (Intellij IDEA, Webstorm, Pycharm).</p> <p>For more detailed information on the procedures involved in running and managing Lightrun actions in your JetBrains IDE(Intellij IDEA, Webstorm, Pycharm), see:</p> <ul> <li>Lightrun Dynamic Logs in JetBrains</li> <li>Lightrun Snapshots in JetBrains</li> <li>Lightrun Metrics in JetBrains</li> </ul> <p>Prerequisites</p> <p>These instructions assume that you have:</p> <ol> <li> <p>A Lightrun Account.</p> </li> <li> <p>Installed the Lightrun JetBrains plugin in your IDE.</p> </li> <li> <p>Authenticated your Lightrun JetBrains Plugin.</p> </li> <li> <p>Attached at least one agent to your app.</p> </li> <li> <p>Opened the source code file for the running application from the IDE.</p> </li> </ol>"},{"location":"getting-around/#the-jetbrains-plugin","title":"The JetBrains Plugin","text":"<p>Once you have authenticated the Lightrun plugin in your JetBrains IDE, your JetBrains IDE user interface should appear similar to the following image.</p> <p></p> <p>The following table describes the sections of the interface as numbered above:</p> Sections Description 1 Lightrun tool window - Authenticate your plugin, manage Lightrun actions and tags. 2 Lightrun Console tool window - Manage dynamic logs and metrics. 3 Lightrun Snapshot tool window - Manage snapshots. 4 JetBrains Code Editor - JetBrains code editor. 5 Lightrun LogOptimizer(\u2122) - Lightrun LogOptimizer(\u2122) 6 Lightrun Metrics tool window - Manage metrics. <p>The following sections describes the different parts in detail:</p> <ul> <li>Lightrun tool window</li> <li>Lightrun Console tool window</li> <li>Lightrun Snapshot tool window</li> <li>Lightrun Metrics tool window</li> </ul>"},{"location":"getting-around/#layout","title":"The Lightrun tool window","text":"<p>The Lightrun tool window is part of the IntelliJ right-hand sidebar, and appears similarly to the following image.</p> <p></p> <p>Note</p> <p>The Lightrun tool window displays the Data Delay mode when connectivity issues arise. Data Delay mode allows you to continue debugging and retrieving Lightrun actions, with a short delay of up to 10 seconds, allowing new agents to be added or snapshot action data to be retrieved from the server.</p> <p>The Lightrun tool window has three tabs: </p> <ul> <li>Agents</li> <li>Tags</li> <li>Actions</li> </ul> <p>Note</p> <p>Please note that the Agent and Tag tabs display only actively running agents and tags in your IDE. If both tabs are empty or only the agent tab is empty, please contact your manager for assistance.</p>"},{"location":"getting-around/#agents","title":"Agents tab","text":"<p>The Agents tab displays a list of all active agents currently attached to your JetBrains IDE and all the actions associated with each agent. You can search for agents, view and configure agent details, view action details or delete actions, and configure agent output piping in the Agents tab. </p>"},{"location":"getting-around/#to-search-for-an-agent","title":"To search for an agent","text":"<ol> <li>Enter the agent's name or PID value into the search bar.</li> <li> <p>Click the Search button. </p> <p>The agent lists should appear similar to the following image    </p> </li> <li> <p>Click the drop-left icon  on the left-hand side of an agent to display a list of all actions associated with that agent.     </p> </li> </ol> <p>The following table describes the icons present in the agents and action lists and the functions of each icon.</p> Icon Function 1 Opens the information dialog box for the agent, tag, or action. 2 Toggle this button to hide/show dynamic logs in the editor. This applies to the hierarchy and can be toggled globally on the login button. 3 Use this icon to configure an agent output piping. See Viewing action output for more details. 4 Delete agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 5 Jump to the source file and line number in the code that is associated with the action. 6 Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 7 Displays the current state of the action. - One checks indicates the action was submitted to the server. - Two checks indicate that it was received by the agent. - Highlighted checks indicate that the agent accepted the action.From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 8 Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error."},{"location":"getting-around/#details","title":"To view more information about an agent or Lightrun action","text":"<ul> <li>Click the information icon  on the right side of the agent or action. A dialog box will appear on your screen, showing more details about the agent/action.<p>The agent details dialog box should appear similar to the following image.</p> <p></p> <p>The following table describes the information present in the dialog box.</p> Field Description Host The name of the machine where the agent is running. ID The unique identification number automatically generated for the action. PID The process ID (for the machine where the agent is running). Start Time The time at which the agent started running. API Version The version of the API used by the agent. Agent Version The version of the agent. Piping Mode The configured piping method. Tags All tags that have been applied to this agent. <p>The action details dialog box should appear similar to the following image.</p> <p></p> <p>The following table describes the information present in the dialog box.</p> Field Description ID The system-generated ID associated with this action item. Type The type of action. Location The file and code line where the action starts following behavior. Create Time The time and day on which the action was created. Owner The user who created the action. Quota in effect The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like.      Quota settings can be tuned in the agent.config file. Log Message The message resulting from the action appears here, if relevant. Error Message If any agent reports any errors for this action, they are documented here. </li> </ul>"},{"location":"getting-around/#tags","title":"Tags tab","text":"<p>The Tags tab displays a list of all active tags currently attached to Lightrun actions running in your JetBrains IDE.</p>"},{"location":"getting-around/#to-search-for-a-tag","title":"TO SEARCH FOR A TAG","text":"<ol> <li>Enter the tag\u2019s name into the search bar.</li> <li> <p>Click the Search button.</p> <p>The tag list should appear similar to the following image.   </p> </li> <li> <p>Click the drop-left icon  on the left-hand side of the tag listing to display a listing of all actions associated with that tag.     </p> </li> </ol> <p>The following table describes the icons present in the tags and action listing and the functions of each icon.</p> Icon Function 1 Opens the information dialog box for the agent, tag, or action. 2 Delete any agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 3 Jump to the source file and line number in the code that is associated with the action. 4 Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 5 Displays the current state of the action.- One checks indicates the action was submitted to the server.- Two checks indicate that it was received by the agent.- Highlighted checks indicate that the agent accepted the action.From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 6 Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error."},{"location":"getting-around/#actions","title":"Actions tab","text":"<p>The Actions tab lists all Lightrun actions (Logs, Metrics, and Snapshots) currently in your system. This includes active actions, disabled actions, expired actions, and actions with errors.</p>"},{"location":"getting-around/#managing-actions-with-the-actions-tab","title":"Managing actions with the actions tab","text":"<p>The actions tab appears similar to the following image.</p> <p></p> <p>From the actions tab, you can:</p> <ul> <li>Search for actions with their filename and line number.</li> <li>Disable actions.</li> <li>Filter actions with the active, expired, and error statuses.</li> <li>Filter actions with their filename and creation time.</li> </ul> <p>The following table describes the icons present in front of each action.</p> Icon Function 1 Opens the information dialog box for the agent, tag, or action. 2 Delete any agent or tag actions. Only agent-activated actions can be deleted from the Agents list and tag-activated actions from the Tags list. 3 Jump to the source file and line number in the code that is associated with the action. 4 Toggle to disable or enable an action. Only agent-activated actions can be toggled from the Agents list and tag-activated actions from the Tags list. 5 Displays the current state of the action.- One checks indicates the action was submitted to the server.- Two checks indicate that it was received by the agent.- Highlighted checks indicate that the agent accepted the action.From the Agents list, the tag icon indicates the action was activated with tags and not agents, and its status can be viewed from the Tags list. 6 Indicates the the level that was configured for the log (on log rows only): Info, Debug, Warn, Error."},{"location":"getting-around/#console","title":"Lightrun Console","text":"<p>Lightrun dynamic logs and metrics appear in real-time in the Lightrun Console when you enable Both or Plugin piping configurations in the Lightrun toolwindow (See action output routing). To open the console, click Lightrun Console on the bottom part of your JetBrains IDE.</p> <p>The Lightrun Console should appear similar to the following image.</p> <p></p> <p>The Lightrun Console is divided into two parts:</p> <ul> <li>Header section</li> <li>Data section</li> </ul>"},{"location":"getting-around/#console-header","title":"Header section","text":"<p>The Header section is used to search and filter the Data section.</p> <p></p> <ul> <li>Enter an expression or name into the search bar to display only logs and metrics with that expression/name in the Lightrun Console.</li> <li>Select an agent in the Agents dropdown to display logs and metrics associated with that agent in the Console.</li> <li>Select Only my logs to display only logs and metrics associated with your Lightrun account in the Console.</li> <li>Select Error, Warning, Info, and Debug to filter logs and metrics in the Console based on their Level.</li> <li>Click the  icon to clear the console. </li> </ul>"},{"location":"getting-around/#console-data","title":"Data section","text":"<p>Once you've configured your action target to Plugin and added at least one dynamic log or metric to your code, data from the inserted dynamic log and metric will appear in your Lightrun Console Data section in real-time. </p> <p></p> <ol> <li> <p>Hover on a dynamic log or metric to view more information about the action.</p> <p></p> </li> <li> <p>Right-click a dynamic log or metric and click Clear to clear the Console, click Copy to copy the action data, and click Go to Line to navigate to the action's source file and line number.</p> <p></p> </li> </ol>"},{"location":"getting-around/#snapshot","title":"Lightrun Snapshot","text":"<p>The Lightrun Snapshot tool window allows you to view and configure your snapshot data directly in your JetBrains IDE. To open the tool window, click Lightrun Snapshots on the bottom part of your JetBrains IDE.</p> <p>The Lightrun snapshot section should appear similar to the following image.</p> <p></p> <p>The following table describes the sections of the Lightrun snapshot interface as numbered above:</p> Sections Description 1 Header section 2 Snapshot data 3 Stacktrace <p>The following sections describes the different sections in detail:</p> <ul> <li>Header section</li> <li>Snapshot data</li> <li>Snapshot stacktrace</li> </ul>"},{"location":"getting-around/#snapshot-header","title":"Header section","text":"<p>The Header section is used to search and filter the Snapshot data section.</p> <p></p> <p>There are four search and filtering options in the Header section:</p> Option Description CREATED BY Use the CREATED BY filter to display only snapshots created by specific users or all users in your organization. LOCATION Use the LOCATION search to search for a snapshot using its location in your code. SOURCE Use the SOURCE filter to display only snapshot belonging to specific agents or tags in your system. STATUS Use the STATUS filter to filter snapshots based on their current status.  The STATUS filter has the following options: - Deleted - Expired - Done - Disabled - Active - Imported - Error - All - None"},{"location":"getting-around/#snapshot-data","title":"Snapshot data","text":"<p>The snapshot data section provides access to a list of all available snapshots and their creation details. The snapshot data section should appear similar to the following image.</p> <p></p> <p>The following table describes the data available in the Snapshot data section.</p> Column Description CREATION TIME The time at which the snapshot was created. LOCATION The line of code at which the snapshot was inserted. TARGET The agent or tag to which the snapshot was attached. HIT Number of recorded captured hits. STATUS The snapshot status. Can be Active, Done, or Deleted. <ul> <li>Click the  icon to view more information about a Snapshot.</li> </ul>"},{"location":"getting-around/#snapshot-stacktrace","title":"Snapshot stacktrace","text":"<p>The Snapshot stacktrace section displays a snapshot stacktrace. The section should appear similar to the following image.</p> <p></p> <ul> <li>Click on a snapshot in the Snapshot data section to view its stacktrace in the Stacktrace section. <p>The following table describes the data available in the Snapshot stacktrace section.</p> Column Description CAPTURE TIME The time at which the snapshot hit was captured. FRAMES The snapshot frames. VARIABLES The snapshot frame variables. </li> </ul> <ul> <li>Click on a CAPTURE TIME to display the frames recorded during that captured time, click the  icon to save the snapshot data to a file.</li> <li>Click on a FRAME to navigate to the source code and line, click the  icon to copy the snapshot's stack trace.</li> <li>Click the Share button to share the snapshot's data.   </li> </ul>"},{"location":"getting-around/#metrics","title":"Lightrun Metrics","text":"<p>Support</p> <p>Lightrun metric actions are available only to Java/JVM applications in JetBrains Intellij IDEA.</p> <p>The Lightrun Metrics tool window allows you to view and analyze captured hits from Lightrun metrics (Counter, Custom metrics, Tic Toc, and Method duration) directly in your JetBrains IDE.</p> <ul> <li>To open the tool window, click Lightrun Metrics on the bottom part of your JetBrains IDE. The Lightrun Metrics tool window should appear similar to the following image.<p></p> <p>The Lightrun Metrics tool window has four metrics tabs:</p> Tabs Description Counter View and analyze captured Counter metrics hits. TicToc View and analyze captured TicToc metrics hits. Method Duration View and analyze captured Method Duration metrics hits. Custom Metric View and analyze captured Custom Metric hits. </li> </ul> <p>Each metric tab is divided into three sections:</p> <ul> <li>Header section</li> <li>Metrics section</li> <li>Graphs section</li> </ul> <p></p>"},{"location":"getting-around/#headers-section","title":"Header section","text":"<p>The Header section is used to search and filter the Metrics section.</p> <p></p> <p>There are four search and filtering options in the Header section:</p> Option Description CREATED BY Use the CREATED BY filter to display only metrics created by specific users or all users in your organization. LOCATION Use the LOCATION search to search for a metric using its location in your code. AGENTS Use the AGENTS filter to display only metrics belonging to specific agents in your system. STATUS Use the STATUS filter to filter metrics based on the metric current status.  The STATUS filter has the following options. - Deleted - Expired - Done - Disabled - Active - Imported - Error - All - None"},{"location":"getting-around/#metrics-section","title":"Metrics section","text":"<p>The Metrics section displays the metrics currently attached to your agents.</p> <p></p> <p>Use the Header section to search and filter the Metrics section to display the only metric hits relevant to your current investigation. The following table describes the data available in the Metrics section.</p> Column Description NAME The metric name. FIRST CAPTURED TIME The time at which the first metric hit was captured. HITS Number of captured hits recorded in a 24-hour interval. <ul> <li>Click the  icon to view more information about a metric action.</li> </ul>"},{"location":"getting-around/#graphs-section","title":"Graphs section","text":"<p>The Graphs section allows you to visualize your captured metrics hit in a graphical form.</p> <p></p> <ul> <li>Click on a metric in the Metrics section to view its graph in the Graphs section. The Counter metrics and Time measurements sections below describe each metric graph in detail.</li> </ul> <p>Important</p> <p>Captured metric hits are collected and available for visualization and analysis in the Lightrun Metrics tool window in 24-hour intervals. If you want to collect and analyze metrics for a longer time interval, you can take advantage of our integrations with Application Performance Monitoring tools like Dynatrace, Grafana, New Relic, and Elastic Stack. For more information, log in to the Lightrun Management Portal and inspect the Integrations page.</p>"},{"location":"getting-around/#counter-metrics","title":"Counter metrics","text":"<p>The Counter metrics graph is a vertical bar chart showing the number of hits recorded every five seconds.</p> <p></p> <ul> <li>Hover on a bar to view more information on the bar, use the  and the  buttons to zoom in and out of the graph.</li> </ul> <p></p>"},{"location":"getting-around/#time-measurements","title":"Time measurements","text":"<p>The Lightrun Time measurement (Tic Toc and Method duration) graph is a line chart that shows the duration of recorded hits in milliseconds and the date and time when the hits were recorded.</p> <p></p> <ul> <li>Use the  and the  buttons to zoom in and out of the graph.</li> </ul>"},{"location":"invite-a-user/","title":"Invite a user","text":"<p>Lightrun offers an efficient option to invite new users to register, in addition to manually adding users in the Lightrun Management Portal. This feature eases the burden on administrators, especially in medium to large-sized companies. </p> <p>Lightrun supports two methods for inviting new users:</p> <ul> <li>Email Invite: Send an email invitation directly to the new user.</li> <li>Preset URL: Provide a preset URL that users can use to register themselves.</li> </ul> <p>For those who still prefer adding users manually, one by one, please see Manager users with basic access.</p>"},{"location":"invite-a-user/#invite-new-users-with-an-email-invite","title":"Invite new users with an email invite","text":"<p>This method allows you to invite new users to join your Lightrun organization with a personal email. It is particularly useful for medium-sized organizations that would like to control the users added to the organization and give a personalized touch to the invite as opposed to the generalized URL. </p>"},{"location":"invite-a-user/#invite-a-user-to-an-organization-with-an-email","title":"Invite a user to an organization with an email","text":"<p>Tip</p> <p>Get quick access to  on the main bottom left pane. In the Settings page.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings located at the bottom left corner of your Management Portal.</li> <li>Select Users under Identity and Access Management. The Users Management page opens.</li> <li> <p>Click + Invite users.</p> <p></p> <p>The Invite new users page opens.</p> <p></p> </li> <li> <p>Fill in the user emails and click Send.</p> </li> </ol>"},{"location":"invite-a-user/#invite-new-users-with-a-predefined-url-link","title":"Invite new users with a predefined URL link","text":"<p>This method allows you to invite new users to join your Lightrun organization by providing them with a predefined link. It is particularly useful for larger organizations where you may need to onboard multiple users, and you want those users to enter their own credentials and complete the registration process.</p> <p>With this method, you generate a unique link or token within Lightrun, and then you share this link with the individuals you want to invite. When they click on the link, they will be directed to a registration page where they can fill out their details, set up their accounts, and join your organization.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings located at the bottom left corner of your Management Portal.</li> <li> <p>Select Identity Configuration under Identity and Access Management. </p> <p>The Identity Configuration page opens.</p> </li> <li> <p>Under the Provisioning section, copy the URL under the Self Service field.     </p> </li> <li>Send the URL to your selected users in the organization.</li> </ol>"},{"location":"invite-a-user/#whats-next","title":"What\u2019s Next","text":"<p>You can then proceed to assign user roles based on your access control method:</p> <ul> <li>To manage users and basic roles, see Manage users and basic roles.</li> <li>To manage users with RBAC, see Manage users with RBAC. </li> </ul>"},{"location":"kubernetes-operator/","title":"Lightrun Kubernetes Operator","text":"<p>The Lightrun Kubernetes (K8s) Operator is a Kubernetes operator provided by Lightrun to help install Lightrun agents in your Kubernetes workloads without having to change your docker or manifest files. </p> <p>The Lightrun Kubernetes operator project was initially scaffolded using kubebuilder book and operator-sdk, and the project aims to follow the Kubernetes Operator pattern. You can find the project\u2019s GitHub repository here.</p>"},{"location":"kubernetes-operator/#how-does-the-lightrun-kubernetes-operator-work","title":"How does the Lightrun Kubernetes Operator work?","text":"<p>To add and debug with Lightrun agents in your Kubernetes cluster, you must:</p> <ol> <li>Install a Lightrun agent into the cluster (with initContainers or with Persistent Volumes).</li> <li>Instruct your application to start using the installed agent.</li> </ol> <p>The Lightrun K8s Operator carries out these two steps automatically for you. You can learn more about how the Lightrun K8s Operator works by checking out the following link.</p> <p>Note</p> <p>Read this before deploying the Lightrun K8s Operator to production. </p>"},{"location":"kubernetes-operator/#setup-the-lightrun-kubernetes-operator","title":"Setup the Lightrun Kubernetes Operator","text":""},{"location":"kubernetes-operator/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you are using Kubernetes version 1.25 or later.</p>"},{"location":"kubernetes-operator/#install-the-lightrun-kubernetes-operator","title":"Install the Lightrun Kubernetes Operator","text":"<ol> <li>Create a namespace for the Lightrun Kubernetes Operator.     <pre><code>kubectl create namespace lightrun-operator\n</code></pre></li> <li>Deploy the Lightrun Kubernetes Operator to the created namespace.     <pre><code>kubectl apply -f https://raw.githubusercontent.com/lightrun-platform/lightrun-k8s-operator/main/examples/operator.yaml -n lightrun-operator\n</code></pre></li> <li>To show how the Lightrun operator works, we have created a test deployment for you. You can access the <code>deployment.yaml</code> file here.  Create a sample deployment namespace and deploy the <code>deployment.yaml</code> file to the created namespace.     <pre><code>$ kubectl create namespace lightrun-agent-test\n$ kubectl apply -f https://raw.githubusercontent.com/lightrun-platform/lightrun-k8s-operator/main/examples/deployment.yaml -n lightrun-agent-test\n</code></pre></li> <li>Create a test folder.     <pre><code>mkdir lightrun_operator_test\n</code></pre></li> <li> <p>Download the Lightrun K8s Operator agent configuration file into the test folder.     <pre><code>curl https://raw.githubusercontent.com/lightrun-platform/lightrun-k8s-operator/main/examples/lightrunjavaagent.yaml &gt; agent.yaml\n</code></pre>     An <code>agent.yaml</code> file will appear in the test folder.</p> </li> <li> <p>Open the <code>agent.yaml</code> file in your preferred code editor and edit the following configuration options.</p> <ul> <li><code>serverHostname</code>: The <code>serverHostname</code> value is your Lightrun server url. For SaaS, the value is <code>app.lightrun.com</code>, while on-prem users will have to use their own hostname.</li> </ul> <ul> <li><code>lightrun_key</code>: Your Lightrun secret key.</li> </ul> <ul> <li><code>pinned_cert_hash</code>: You can get this value by navigating to <code>https://&lt;serverHostname&gt;/api/getPinnedServerCert</code>. Note - you have to be authenticated to the Lightrun server to view the key.</li> </ul> </li> <li> <p>Create the agent Custom resource.     <pre><code>kubectl apply -f agent.yaml -n lightrun-agent-test\n</code></pre></p> </li> <li>Login to your Lightrun management portal to confirm if the new agent was registered.</li> </ol>"},{"location":"kubernetes-operator/#install-the-lightrun-kubernetes-operator-with-helm-chart","title":"Install the Lightrun Kubernetes Operator with Helm Chart","text":"<ol> <li>Add the Lightrun K8s Operator repository to your Helm repository list.     <pre><code>helm repo add lightrun-k8s-operator https://lightrun-platform.github.io/lightrun-k8s-operator\n</code></pre></li> <li> <p>Install the Helm chart repository using one of these methods:</p> <ul> <li>Install using default values.   <pre><code>helm install lightrun-k8s-operator/lightrun-k8s-operator  -n lightrun-operator --create-namespace\n</code></pre></li> </ul> <ul> <li>Install using a custom values file.   <pre><code>helm install lightrun-k8s-operator/lightrun-k8s-operator  -f &lt;values file&gt;  -n lightrun-operator --create-namespace\n</code></pre></li> </ul> </li> <li> <p>To uninstall the Helm chart.     <pre><code>helm delete lightrun-k8s-operator\n</code></pre></p> </li> </ol> <p>Note</p> <ul> <li><code>helm upgrade --install</code> or <code>helm install --dry-run</code> may not work properly due to limitations of how Helm work with CRDs. You can find more info here.</li> </ul> <ul> <li>CRDs will not be deleted due to Helm CRDs limitations. You can learn more about the limitations here.</li> </ul>"},{"location":"kubernetes-operator/#chart-version-vs-controller-version","title":"Chart version vs controller version","text":"<p>For the sake of simplicity, we are keeping the convention of the same version for both the controller image and the Helm chart. This helps to ensure that controller actions are aligned with CRDs preventing failed resource validation errors.</p>"},{"location":"kubernetes-operator/#lightrun-kubernetes-operator-limitations","title":"Lightrun Kubernetes Operator Limitations","text":"<ol> <li>If an application has JDWR enabled, it will cause a conflict with the Lightrun agent installed by the Lightrun K8s operator.</li> <li> <p>You must install the correct init container for your application\u2019s container platform. For example, <code>lightruncom/k8s-operator-init-java-agent-linux:1.7.0-init.0</code>.</p> <p>Supported platforms:</p> <ul> <li>Linux</li> </ul> <ul> <li>Alpine</li> </ul> <p>K8s type of deployment:</p> <ul> <li>Deployment</li> </ul> <p>Supported languages:</p> <ul> <li>Java</li> </ul> </li> </ol>"},{"location":"kubernetes/","title":"Installing Lightrun in Kubernetes","text":"<p>Since Lightrun works on the application level, there is no need for any extra configuration while installing Lightrun in Kubernetes - you can simply follow the Docker container installation instructions for the language your application is written in. </p> <p>Once your <code>Dockerfile</code> is ready, you can re-push the images into the relevant registry (like Docker hub), and Lightrun will work  out-of-the-box.</p>"},{"location":"kubernetes/#lightrun-kubernetes-operator","title":"Lightrun Kubernetes Operator","text":"<p>The Lightrun Kubernetes (K8s) Operator is a Kubernetes operator provided by Lightrun to help install Lightrun agents in your Kubernetes workloads without having to change your docker or manifest files. You can find instructions on how to set up the Lightrun Kubernetes Operator here.</p>"},{"location":"kubernetes/#lightrun-on-a-local-kubernetes-cluster","title":"Lightrun on a local Kubernetes cluster","text":"<p>If you'd like to get started using Lightrun in a local Kubernetes cluster, we offer a step-by-step tutorial for running Lightrun on Minikube - which might prove useful for experimentation purposes. </p>"},{"location":"lightrun-onprem-deployment-guide-restricted/","title":"[Limited Availability]Lightrun On-premises deployment guide","text":"u5BWyTdLNwQ/WPtPUPOZzw==;l5EudMKXpAIf0fNnk/yI3GfXR2Me3JiCWg8ieGeGvAL2P+z0kAtjJD5gZ86dneKCFr7BbMFAu2MmYjM69f/Qin4KbPI3V+jQs3pUYYraQ2Wd84l1U9TiZdJuNOEYRgnp34/RRSKabUrfyo3VvC6/iq6IRqivrMCV0qYhlMSA5INyFCgy6MrSbljz0v6HugU7qzbRLICoFkhGg+GvnkjKRdFk/MYlh/GghfnJKZbxi4+QAe05jS55OfaDEdNtsU5T7m9v0QS35tTxNk8z3O4DROJBIljtVbOJYkSXLhjgK41GQAalBV8EwLPDcCuk7m3t8ECz2y6rtZas2wQ+cXPLUAxlnkapdICy/XcaHmNgjlbrXS1CZd8Z2rxNZNfpk1/ufSBR57hl6uZR2c1rPfShXc45d2andu5U8TrZ8AMMDxSpOJR20xXzZKIgOc4yMIMheSh+jW9av02C0r5FtXFEQBe5bFTcPkofBhTi/n5lUlV8XFOgwA7FpuXRLlnsZZSmEQU5Xs4I+wCU27Z8uPtBx1lrRLnV0y7Jk0l6L64gNJzoTHw4TuS/qaEE7FShc/TQaNmSoSF7mPSY2q9r+E2a9ULgXiOq5sGDqnxewJRaBH/Zd7LlxoVzKnjs4rK1zK0YsPKoud+xhz06o6DhCPJ3CZASiCYmoPCLKT01R5PFYG75S4WaeflqnkbW+UNV1MGwx2yIWufEMhhxsIx12veA3yKiUjRF/sxld+hPM7xIoBId8K9vxqhFGq5drTgJbSp6kltTgmNexyR4QxPEGQuFBdHNf7YVhZEhn1ohxBbPNTQCPyJg4rUeN3fpWEVe0juhraoZd+9k3fsTgwQA+l0ugXKqZ/GNt1qjSXhGA2weFwzBZxsVa3CrrPzC52Rz+EYU/KHfsifQLciNwgr2BgzJK0QtHpCsp1UM4cYIM23gzy59WVjH5ECdyIgSLyAgPcaihWYc1St9gtbytRZPz0a9I/30Ibdhgcq8OnCBbGsHaSWKcLbdeyUtKKkNyPEILmC8SAFR5BXCtOk3f1ieSdPELXcfkKjXQ0zvMYWZGzSH1/JAdz7frQ5t7nC6TBL0D7AANnUo/3prnVu4kmKfaP+aScn/WRmSQfErD5R7ZAo+nIbQW3uPu0MiNZqMm/6nSjTVuo7gjmXlwONbWm3DeGweg0cwPtDTO07B5SaEF4bOh9R1AiSbNjLKJg5n5d4aNRN0Vqf916c6DfBIdTkKSA2lQvFqbWVX7Y3+KVw/jb/WeZnG+MWhlKEdemT3ppUA2A0t+EY498BphJ2+SHbLaTSHAumqMk/AeWZbK8TnDLKI3V02j2Pr+qjDbPVl32PkMxFgrZ19mfCCb5ELK01y1wSeVb/WdtISExO2JexLQ57vsoD2ukz7IKqYp5pV2+2Yga9bX7i27+cQfsBrczHWkfoK0u7VA8q21aROiOmk9fdyti/r8O9QSJEz4LZt3cv7EvRcgOZX/wTl4F37TskZA1+PDXiO0ib0qYqJtJdb26B8dmO6RkQp67XqLPN7PwamYkPV5cZPPAeJAxbyX5gMv9cw7pFkStKdwfwAb5vL4f4jjs3SDA97QWfxG2QYKQ8dBdWUH65wgVJpCvV+RqworP8J/P9+4iQ3Ve/6BT5bC3L2Wqgz24WngZz5Kdv8FsIdSWYecNkf5eLE7irsCYXWlHZCshswfqFuyjV0GX+t4DEhYUm6rKHNuStouRUzzj9XmCQMlKCmbd7IyBy5tmOKKIQDTdYVfOdyQnrjmjseBYdRLKRK7OOgk72GdwNDx5pJwi6jMXEd42Qxe35j3Hz7MmTNaB6CZJyjm/bMNpdPPvbSnaQhBHDlEdyelZfafh/Yl0m5h94UatVY6dDCYHnbgPfaPUsR7A9LW+Q4zEJZpqeCaWLxpoWUlJiBYjO5e8BCKEVcfU+jvLXAMP/OOqCiAqvgnGbI9MiUU9t8Z6qNa+whd6mgga/b+V/EGoVcVv9QQ0l9uQoJGXzi6Y7ar7pMlQ1yBEi8TjEvJA6bpTW6O8KL6ffbkX9azR1iUCFgcSFrGiN52aMloj6jCetWR1IkteOgRcFA82taS+6BI6yoB2mfofqK4sZerUNVK2mvYFi01ABqKucN1L5HkWRuwLPPS2dhMn8w4+wUfx6rEZasDyz9dFz0xs1TEU2IyzLVo56oZ7vDVR3tWCq1mPLugjpfEdSW+4F11QUcpnqO72xaomLYgiHeoZE9lAN8Riv4bZySmXH34Hr8H2eQ92Fn00zw8ljKPxZ78AWv4fz0ribhIRge8Al8eGfwpLCx2yKlFtx+IKXz1Sbf6CijzOWoGtgh54WbmbkCmky7hXX/w+8tfgBdspzkIOkYOEsbN5PUj2uV5XxdQ1RPGMB7U7dPlkro5bjOczXnWwsUM7VUEpVCq7UNvnXU0uJEB7V4dnCerdsZBHLnVWOBoYjcvgHrmwFAFC/Vx19yS6xZBR474UymQtEWDZhrT/NlJqLBI7jzJAjlYXUO8UYgLbj0gpu+mnqV/YylLkp76K/bJWc2m0vGOnw7V1qoWxoGMPIdnLfTDe4jGOBvty5GxNkq7g0tsdYhnso4cKB4jhQ0yHHxlv6on06fbfoEmLqMxVJmnq7krZmpqmzSgm5AS8p4S5CkI1qTUy/bKeVgmyZ3n3n/JjUWySV2iBgUKJYFfBKmXYbqj/CIE4ZToowV72W2MpENDbybFnodXHtylrUJobHwxjKDNdSb1tveMS74cozkxxmMxTvMccrGnwfLqv0GAQ6yZghL+dgCtMqfJLzt2GL6SZVSysNGMx0v38f3ts/AkilyhKgQrfAzlUhZWIzNF3f7EoCnlIrIemPEQdWhlvlhzTbjtBOIDXLnL75aaW2H77AafUlxWAr1WCWEr25rxEIfKBwrkv0HAvyTcR5btdg8k1WSEMvodYzNI0+8A/VYkzxc5YmZU9dNdor/giKNGhElIl+yqLdgs984C7K9RMKo9FbMON+My17vh7D6/8S/aJakYkm++uXUBfgf7VnCQoiPR7J6I3i3g2eKzvNCOKn40K+ArhRiEMhTsiNuNqmPlvTJKqDP3Ea+lbYfpQJls7MllR7Vk36m3DVRTgA3GFXyxjTIL3RhLfQRY37yX0YHVV+Aiz/CwQjiVVl6QnUaEA5fX6BiyKLit2gUPeuVXVqrxiEMnsonFFkP186Zv1whrrUbYitYOXosPAPZDzTVmgSOu1eKlzqXHoNnOAdFynCJkbmhYh2PfV23PABZfFlZePrONK8rMZIPNrRB+4OjEyVhiF1GIE1EcZa2Erukn4SnRRJqoFWqdSkd8h+eXLyvcfKUXLW9j7nWfQ85rekrxZUig0chMzrN6QNOvJm4uWaedqWRtMThrdr8Asfo7172pZ+taL/1kkqGS8B6zWVZNCkwilNFg6ZzqoMFF3isroSKwl1S7/zQTMgVzvmm2dfPWSu4cQJDF2ZsZm9HsuYRZ+e9PWjDj1PRgfCa7ogXe6VnRmO2Fsg9Fk+OzowU3B2jHrLjLHUU4GEfAbK3OcGy+rkc01Hwu9WG+SLGdVGupa0u6DGUSqXGkGd/Cf8/Gsp34aI3bJQ7S1XBZi83OTmg58cPLuIkDhUbUzLyVGgwk+4Frp0Z3+wAypPCYfY2Qdy36A+PXiLot2EfDlBtkQRSxXbgWsi46qhq4ncGjfYkD3BOt1XE8JaGYPSkz3jbHhboNkUJ3FNq6Np9t29YEscR6QNbCRnWY8ktyzz6IDQp1gBCAPMFt13aY1vmgX5sk2pEja/sggm5eXDDdNvhaxB1UyYJ1Y0aYFutpGUfXc+/ZD2M+od15X8zNs7qp9kPOMBMBlYlLFuww9YzCEckTrnOGvnmiZ/HrUhOXlMenB8cfQYOkNuRaJTw7+UI2qswnr5rcBmXzXvWmTQ83Y0NWGLXlSgb/5amMlIXeXkJRDmRxas/ahbDIlnnrT57HiCq3I6k46jEnVudxBj+YkCvY/oqmzkzHunL5Tv6CsIjgI6sGdrjNNxYn+M4VpwqTu33YL9F4Xzqcr+Ixw01wk5rIfqG3pSFr6DDb0zc4e+3g9kY7KL7N85IOYNlpdzoOcFhblnAZ/bhzikT5+i+EglipeGrUW5FqERAELgft8cfvSfv5bb/wE3qI1zg/rJq8e/obVjtAZi02VP9ndhpXzvPtld35cIHt6IuAgLfNtS8wDXdbepqilPCN3XaHj2wHFH/etJDT9PkFMYyDq6vnp8VMP0YF5J6+GKnypeRH3ZCNhd5m9c50zDx6EXr34ewIepkDJWzxry2am1uSTWi80aNC15ClEgRx5aYKhbBIrB/q+WNyVPDCmkYojwWt87MzswqPNH0/jbmRX6CNuwVBs77eUGENtZ2/ghrKalrz6q+J5EWP/YEtYCqFQgAwo2dVAwYJ9N6eOGaqkDB40LCL7LHOA721cLuk9mzuBfxuz3LMGevjCkr3dvl49E6xNze2fyEgKQe78gILdUeydjphLElvAk3237Nqp4OXr+AVJXMvJK6GPdM6vI1EbHAhxAa3CMoTa55hBMQM0rRonows2WuG7O55XzItsjSBt46EuTHfsEqyunehKMyudFj1MWtcpaq2+8bPaCObGDr8im+2QDSS7LRVKC74WJLyki3szBbdOY5gsUq44w/gnHsEtim6hVL1qBZg+R5Cjct+yhEMe3kzdn5joGQyUKANL7VXYoSH72czrr69NP4TnkHWG6x+STuMZCtZjD1W8XVRjq6KmrWKpn50AtCtCNSAnPgEn1eGANZX5Kr5zDqVOU/15d/1zFfTRSqPKesyPadyf02e4SuAiLXr6Egj4XJ1+iEQn4Ig6nSLFL8vyrJzFYp/u1LGvbRUQziMmi1eSNESOdTmHygDxHQmQ7gSC2TrwzQNyCBlS+WKy3RQ1dpBx5hGelxi163aAQR0qbSCLR+hd/X4akdaNZ24cAxWYiLBjwNN/Eav3opZj7FTUPubu69MTGo/RHMcJ3H2OFLm0UVDyRplH0j6QqxIMUJ8JoDt03rgTJJUuoijWitSHVxCAVThQu4n83UU1Jhit9Zc/PMBoXh2N9FV+M65saDXfTgJp1OUvi+V4UiaFcEcba0Yozgxy93dUAnkNmX3GAp/TZm6gtdAXue2UNvfsluhstXSEKPAuY0bEZ70j36Y355BHjuLz9CWUE/B8ygadL7BjvtF8k4FzPCK8/E+Y+ct8vwqagVoZ/NF7n+Re/hRqL7UTqTCBLBI4X/KryKHIK6LfjKGIvmIDaAfJgMSuFmIp8NQ6jM0Csumq+gDzL48MxLMQTcQAA6snr6X48JrCty49CZrRuH3aOw4Z9hobXpnm5Si5ZmCkCMocNbdAUkFY1bzG8Z3yRTPpla4jF6M6MS9KwUbP/5l5HZcSB0TES5VxEjOnWOrDgNXBnSWRWmsRxMzTH4sIZoHsirIXvuh2+Lo6/u9OIAtZnr1rCQdPuDfyjAaf+NJOC1S2+gcutFRUIH1Hnmc633Rd4S9AAZ+ewe5sbLIA0wLcBVDGvxc13JKXE1RlvNZXG/QTBvzsCyKO579M+rLTfICXoDl4lh/hgN3moxfd6aI+rmMvPyRvk1ivejTRPhH1kjwWGddpOyF2lFn/d2igXgV4npGmEfqOJicf+/fZRN+p89OyVmdZzZEZ1D35FQlgrx5GWTd4/Gx19kWW0hc9jJFcnsHf1lzOPHYdmc95XnByOeeutjCC+EMHgupCfyiga4uTABbg6bvaqgpQceIBxQmZY3riwoIMfpsAufI57NOJiOoBCAiw1QPNOPatSE09Bcd4QJWU2JF8jWDsUrpCEGUgThJO2VKgQ7xVMJsCNWp4kOrFKJXELHFh8/kYqPWgjzzv5wXWMiGAQFHTkr0ok0zvrnZZhP3LPgtVB9jBEFcwyJmDTVDnkejwdgh0rh2v8l7DGqH739DiZJTFPMm15LNHM9Li3Xn12zVuF5G8sNZibapFayPhGeckZdAgCekeKVf5XN8JL4KXL+P0e3Ag53nGmzfc0B43pc5dfAo4GJ3tgF7VB0+o0nkVfNSzWqmrzZmwg0qn/yOaxhtbrO/NjQVqepOckQwW3AA5P/YwXuia3te4yUgYFOMZT+/gqM2/kvvrw6QVGL3fgpfQx/6/HtgUdqwFqf6P3iKDLRVtFeailHQtuslOjv40tQM+hKvW1+BKblDZLy6xRlkL6uMnLbU1kam5RVvsct0FfmkdwTctRNEKp5TitFlESm4/TcSl/ojZMKo+T/KYf+MT6zHV2hmIekr9fwdS7RhoXzYqELSMX/k+XEytW4DOKB0F/zXX9XQnJQrXvhoJWlHcbmIea/qXdrmJG9XW7iKZusG4yqew12DewPXKioVHTTwZZ8Zmwwvt7D4XP9ZPulbuPuo2bycQWFqBURHS7Psj9drbq/H7aFdqj8br1n9YnlIP235icQtXcopWTKO5eXVQdclOn/wLru29iUrik5H+FiWZmDAAIs9GRISL948HR6aXEA3E2SIYMWdQ61Dj1NuZ3XZbIfhko6UVN+pWZHXaooM+Jq5X6tzHK8rc+U1rNUGN7MCXIbbH19INLwEC8NGGv16sDSctLfYCCZOwnBbjn87JV2XdHGdZTTGFFX2S6wt7E/mzKTDx9NSVWqzs24pL+8AsUT3e98qIdfDG4qOPFRrNu/S5YsU8a2Qx5fDxSybGKmbuFtxIDmHrRSjku33v+ddc68VkChiVjbLfx3DTlXoIkI5RM2x/u4McGJLhYfluKD7qNDRv4rQ7VQy1VFf31f6cRx2v8CPlccY/ur9p9lgum8k9r4/5cUUuRWLklM6dBmYOWWD+9X/e2J2j2argLRWwb7RhBCsP81KjZ2UTb65uwB9n7p+EIfuhDOfbcIy+6D8nx3GCzjhmrizyzpbIgFh586i+dcmd2Mbb9pX3G6q4MjuMbrC7qXOtmRKTYJIB8LSbvsPwZCKIx6K7RY05cV1Kfxu3MyhluJg+5D5V9m2QVEzYFwiE9FGASCpfFOKLpkbY5x+3RfCjMrc6hkC5efotn5YwAA2F/EwMPdjcJaApIg2RYz18XwcfDySYmc/vDi27BbjqrLvI0+J0WqabDFxOCXzhhPdC6eDnoBtZ7ybYrf/pE520RFxYwbu1BlTW6uKoQqPQge+SnWk4kR2KMqjWuSsKqufu7TTB5NFQUM69AJ6hiwur2JZvvW2LBE+W0SuQhgpyrRPQBAhzRPQU2fsO+lJKl1mQxvV1XyEUT1OviPak4Db8cRzAhZrxe6xGE6U+Or+x43JhBaXYfJ01L4ao/lQiJS6J2laLSBjXUPXwfjuQKEhN6hM9pClrrtL3SefX1v0eUZ1crqVkuVupfor0vMO13SkS3NUzkGiwbMORtuZgTzedDSdlJxDnlF96/EKZvQkdiw7kJUVB03OaD6tZBCJVH8vcvSYfC/NAMqIiRCO/ukremkdmUEqOGlc0rrNgEeF1YnOxTqqGW9CLBkmFdgFj0qTlsybigkqI9uwYhDCuQf5ynGduxeBekcoX2lqvsHe3d+iIyGZXv7SMoyx3ezQVwEh5erTJpmVNytBAna9O6G79VrV25Ft/IFJnFJyehptFPktmffnPYEw996AX3SNqu6z4fFFu+OAhu++QXXVu1h7OFA+1AAlqMGBcAAwyOB1SYQVjAG6577gH+l8CVIJ/OyYd2/zd193GcpanuszOHrRu6W3oFN5u2z1CvRFX8luPFvEFXMY1Rtw0e5cCmMzLnmkenf3y0P38kPgcdGjW5f7zql7rtRPqZiytJh/SiifLmK6DuW+5uq6OQd23FcMxodyECTvXzBQSa8EC2Z9DqqWrcIiOzdGhidYrgBRREVOCoINkWrWC4r5jXwxw7MRi0sJR0Hr5OGITY2Vq/C2MhMZCcfsQvCDrinceY3xJQAZwjdqyWcWmm4FZmHeEtnkv4lUdz8V2cO4aHsXho80381/oVLgeWjEMSycjfc4dmwjx9mq1KhjCq7AMhsDhAUwI/0bbHqBeWAZRQ0fHsGNFF5uzUcRuDF/opPiI8UplYjW4BKBDlFa/tzK01hauQHjpcYj96+R6pEGZ67JTxKA98v2i9MGi6SZVK31pCOK3KaEhk5+c0IbGinpVhSh1G1lejTrfdyF4cG4u05NWFrhZ57INXCBAxGGbkckke/1jg/F6gFF1ZxpwSpt3YIxhgJCfn5cD0IjxqGgQWLRInTupg0aA0M0Lh/+6cv3+9t9sqdlX3QInBT3BUID0NqOToqRsLzCDX4yH9U7pOyxb6iAufFRNkbnGI+rtgJXsCfH9DP0rPpGFzAPVNmDwJ+TNyNGQr5Nr7SvY5Izcsd2ENHDzvBp8GX5rOMFjWSKJJera7iszE9k9kCoPDxTdlRy2c/n95L8wIpoGR3LJxOBgwLGoD0u9BnROJ7POi8IYyjIypO9it/JeDmeiNAI3vrGoo8nVjiqTyj9+iRU9o2KFTtZGYqgxyJRpbg5uFHdqKAURi0oU/Oh/dSdQSH+dLB0HcaPxJetumgNRHbPYqfW+KJQzWZJ2e9kxTqFtGGkEYNZKWkLgYhZ+q2joGCHuEOr0OTtPG7t4yAPf/9U5u64dQHBhzJexUliSDsLLx+TMSsaWtNT8evZeTssAcAjiOBg6yzbShW4dz6IRpg03jkjErHxzW3mTHe31iM2LrWL3fHI+R7EcHh1EX68Od9/ZnZrjIYG+385G+UrDB0W+B6GSA+pxIijwppxa2eDM/EI5d8wBDCBJjAiRbvNGqePuw64gM9GJEM1rCB4SmHd44IiHDx4Bxw/YEkqhYpuN3Ey8zWB5Ha2FC9WN7efdASuHhGsn/FrHwFyskgud74SrX2/isT7lgHJyYrKZ3chIWruq7BRu2CNQEySVJNAwRp4isPM37s+IqiPeB8W6DgERB+Q0X6Jybh6KdlfXx3Qz3uPMa7mAXjJBez+QwL7oTV+I4BnfRqV1W9A9DtdFkopf65FcsEX/jQjFrliP0els1zNPcHkDrX3CeU6FgdgYu6LahtNMqS+Te7nSRGmahhTCAsA5ZkA7Xak3MYnVimY4a322VAZqq4xy6Mx72M03fANOO/Sm+wmlP/nsaWnryy8KpbLJKuX4yh7SezPJZyK27ncALvgf+3sHmR2hWJZcO3gQvQp5E1c2rSPncu0niLc66ydqhi9ldfra43utfjW8i8Wse1ponfsT+GYW34BnFOtxtgVRTPkL6ivS95x286Vh+voEDZjVyHgW1E7R/y4KuoFtDoZiTdNrj71ndcnaHdle38M+2FEJR2nT97a3/IyjylKaoaaZNzT+NM0bJepaf7CSi7GBiHth66ff6t+DmtFdLOVqNqz29IREnyuDf18Plk3kp3fMNpTDdoqKmwrrahrAZDCND7CV3Gc5c3W4s4qG3rN112IQcNCEmW1fCg1bH5o70IWYHuPfKLlY+kBJaJPaMhf62MCueb2l/Op8oXVNq2Qz6FAW5oOz1FsCEtRiHWTGm2RKdVL7mfBi5HG84DYu2fkv4wXgjpmNDbakjzBjDyMJehKTy716BShz5vJrJ9nJ0OOuXhXzjsoyrqfEZf346OQt2zqco5mfnh7sRHdgTfE2168HZl7UFAJXTSkAE/HmSR1NW/8sNJnPBQlB3dT0pNsyvTSCpyWl/jnRmXLILIHmIPovTAMN2FHFWS28QYeV2cw/2Uy//3z/pXeZbx2545U/AW8T11bewCRFdqAvxDMpM3zhZIbQyesSS9Cb1afEWW40NN90jHgFKmoc4j+aRjAD3Zl1aqpHlOxX9nKI4wLsk4WPTGjUCEJRyGF+RSEv8nVpL5dRMKGyI3wtexX+7oyZBzIaNo3oj8l3Z//igaUoM1zUfnKMkyfWqgUJJPoO34nOnoNP62jBPMFpT1A56thDdhirXsKzLcd8fvDCsQ/bGVksdnqi4NtiDqvaR083QZe8KoYeBu1ukBGAVKZn2cOfhGY5P4M9F6s6hwq7024nRzXmVQzRGNQA5rWi/+IdZEbK3zBFYzLPoGQ6+CDHbNUKaC7D7QjIrllgpYW5OqI37FLNPQkibNJi4KkQd8MBBwufz0wM8JVxOTFM+tQ4MMQCGc8TUQaVMHE5iF/i7XPl6d7wk5xro4rfNNsr5SAg0bgJVAnL7WAWYP5DY6hx+yRy81uAemwsaIvplx+2qd1KNMxOsitgmi6qKXgHkPztnSfq4kHcFrtA4oHYau7JKdpS7ZIJLtxPjzbLIep9YUESF6FuotSlvF161QaYcjtx3a9DOffMssLGwBJp9PKMcCGdZFmE5Ou+HI9c7Vlh+10yfnZF6MHls0qXx/bXgb0ESNcUQdnX9nVMyK95johm9PCUmFbksLMYmm5nOaSwYo1wP6H9vaXl27GiS6PkAxGsIpL0FO+QZ1h2w4qMljE8YRS6gt2ZVq4+/n9AhoCVKKTXqP7dvcL9bVRwVOZflICGJsfIsdj964HGBoc4eKNhhHFZc7XpCkxyTqVogobLj2A5l1YMZ8Mv8es14oZfDkQLgMam2B8UdQ+neF8PGxM8/jy36hMW0F+JHxRM8LJFHTz42kllr3YV0xDysz5/aP1iHDfDPyuR0BufiHkQUF0Kb8siIK3gvZ4uMlsgijE8lsTgzVoLkQaYkWq/Yj5WCb6h0McNT5ghxtplxi4lkcM+v1jU5+uZ4DUFRxUo8QqU7uSjk80tt6B17dMub2+dTsL1R9lUIN42aFGyyx/aRaypupC9QFW8PLO1QdTJfWSOJO5p9t5HDZ8qkTzkGVfeBOQWQlt9sc1HpN2xyfhBeuOyfnEk9nXI+6QrclaXvY5BYiBVvcNaIJF8BXOZkHHlbG6TYNFirlqaMIMCgTCxph7NfOweXPY6vnPhE1vfI3AsiwwDnbGNpvo1YJZhqjNh2g+GgyMJYUYgQt3l2yXU7zq09ZUhZgFF1SXoGTyoHc1lnQJVl0t2kXqYPBG6fMvz25X86oZogEvy0VW3ok5z5B0Z4ZFfI5LV3fvynZtQ7wWxqu22H9MGC4xZ1BjIA8His5yXzj5eLAhTfy+f1xvR8myVx2xHtWqHQgLKrUleyxV46a45UpJGPXBW29GKcloiUl7hKeytr560qZyRjD+ilx4yyZZFYGHkyYc9CaMr+IlncTxCY4oVZwxxkMHb3p63x2VJghcxMy4Ku69AHWdCdlF6mxHyG9YDQO3hR13oBp+n37eDprIfoomfVs5/xpESYZ9qmUZNscvrl41YEM9KWgqljtmwg7RcShk7+zNxJ+6QvLJ9CF9E8znnVsLyYOHflI/ByrzKcnz6Un2lDjcgjtSmeUO2hvNhUV+FKp2/3HRzVjh13iGb++zfAzaBbGvMGTAvAawisd+EIKHXwh2D20aUdvjOipFDqQMTgv10MJ6OeCTdYkdws7189IcSUkd0D/4SbCiOfJPYokZFXmNW/9pe2/5LtGtoNR5xSLb97m330ghtlLEQFXLKSMS94Nj5mfpKGa1boK5LrzUOneuPh4115RNFSObVVGP+VTPCajKCWoRiJSiyISZjw673w++kE3dBU34VfveEnWrBiq/WRS1JiSRHhpkpVFbajiukHm1PEE4yDwJSaZFaL6/sG1NG+6RXJBdngFNj8/WuxlDtik/r/EkMVJ77OMY/EnjXfqPhr/TmNhv1aqD0Tgchu+QppmkufQG9GkuoPNJGeaSqxC1PIg7sVwyhYfnNJdnGe+tIldPQqcsX4PFymA/mkVTN1WJKKu5m9j9FOys483oxGImpY9y60fE6R24bi+0eW1LlSAQEMq9swJcWZUTcgVJSUI43PUDOkgpscieBZELCa8Ky4RiECe3RMWXi6bJO7ixOpWuyYPJZXLNg2yqsG0V9mmAouekeKFM3JHSd4qcC1cePvkUBCrxr/PvvyK0L+YBt3RztgN4WCHjXt5o58fj8Fov5RPYKvbn2a/QbtPSAdiC8o0WYkT3fVMCcH24CY7Wn5OL4tQV/IyTfuxXm4oNBBOj3EYLCaSFgCjiKSX5QEApc+eYCoRA/tEzN1PnDRXnwN6hqYcDIbQSzpnjIuRntW4SEvGiu00reRJhSz7mc4mivcXrn4hBpb6z1iyfRYjz6VZaHGRXRNLsAwerpVPEpUw69jFn0dj0T3Pc4beyBafGE2HMev1VOfR8aGXuQ+cXfbjrnx/nyw0u9yjQyNXckaFw1jvQnedEzwHYV3iZOjnzXzV8218GfGqxP/l3aj39Zrw6tQ6rCJUCf9c4IdrpuURrsBI+8U8GXDGj/uQwJ9gFKJzkMIgp8gdePF0NhdSlCjLCxRBf7UdYUH7xMcKMHoYZ6RayzDxrairJ0NLOIBNeW/8QNVPPR2LxCs6psJ83z6Ka/MIiy7pCs7KBgm4Yh9c6HlFC2S4WKE5YoCiYdAqyv7wQRim8gC4ICZZVvtgRmeTME3iaVEwqrogc3sW/wV47lKGu80R4Gs7aMGMqcuBze9kVOs0JhInHlulKUF4PRPz8T34wQJWGpQcy3QNsIZ5B3nlsRTBBUf4HHkVSLc6ARP5dpcYv5UwUU2mNjFAfIfdg4FTqDKHzR+398V8vW7mPHRT+5eouGLX5sNWI6Sjk3+rCsNgHG4rHuKbBJ8edJtSwSgjpy4zZJ646jv5GTPEN797N7M+b9Ya2OI92DX5ydqGEKbjYOMPSyj0sU7ZotAV3YgBWdmu8TzHcc6sJJHNJDiTs4XWYXqxr8vUOwCO+dBDykY7WC1WlGyr8xC1erEDpTvQCGrShfPP8e5QEk64pozNfMJ2++pekrS0Aj4z8i2kG/KFbV2ihWZW0WYm0DI1QDntiy6VePYlNZy2h8Yp6qr1VpubViX5eP8tCSBt73p4UJYIMbUNCIZbmJDBcDAbpkn8WJZDdr25paAGJclPysh4y58nYIr5WsRfpH5WdRu1tF3isJQUCCX/o9x2if3t6nLvrNsCxOBcVPsayxkIpCuIHB2cwcu6x/0n/+YcVmxh0FWn62ut/Erzc4Ig4Xygd0quRDZsOmXCPjA/gaBeSWl9JyzeQPOQ7R8wt0SUqeuEJwWgy5B1M+TlMxpzWhG60VGf6agi52/sRp4bSqaBqGy94PYJz3qyX9R1teTRHESBqDm73iHOAV9w53NRT6gtJX4BbWT30RvRNUtVB9IDkdsG7UAIkJT1k+oBd4TQQBtbbJXK6wmdl26q1U0y8sXZuq7AKcsDU6WhsVMiRskMFrYL1x/FEW+oUBysmYT+GwoH0mHMITA4bQ0QX7U50SGM9Wp14R8Z86gKHbcmMnAOaFSJUhOAHQeRRYAkcyH7v3zCVLB8Em2ET03vYXbAtaUZEARrkdrdfu8mfRkrM8dVjipD3KPwcisIc437gQdlMjWDrdpGymf/C876diWmEEKT66Wr+9c10tgtTOX+mVVRlUOjScb25idPxpXJwfY5R2XHQJL1vvctrP8qjSEK0V0L2UiRL/p9Jl+MV177f4iEknnFn8c3tBMEJ6+ByxQh4bAyQeK2Ush6DNbK7SNxKftIwpUFSzMUxGf8ZScnguBn0tYN056WhjhdIxjlu5kkBHcw++CjOnCVtiI6baQqzJ95SPI8vRLssHhxB2ULbK4Vl7fgbIsacVKGRlMOE1T3wBhX3TrYjRRKoBBapeMLq2uPaAGjdxVW6N2oiVRcJmHlyTYGskOjhnxQVV/LefNe48929stjbvsvPvDSjxrCfNgz20BjMStgLOvy7EIBbIoOrGb9wChJcxErRVazxA+zn+m/N94KXoOxx8cm9OBGP9OOAjsDUepRKU/Z9JgLIumba+gaiwy8vI5pbNBQl80zQtoPzt+isZ/2yDW+YvZ0qp77LlPAPIW61wA1C/QqQIb3QzGRLXv/9GZoFuH6MfJlM9n3oPMPtVD1+Vsyx4hrgrYES84J2cNcpJppOD7sPB9Z9dwIjJrxqq12v6ZuvDHYooTrLatA/xMb6DtrkIzexGZWKMTWlYvKCnW6i8+VWbTjlaT3rvtNv/f4PZHmniHkvjBeaYwHYppQbC+CndAANwjMxaPMpOZXltd1lmgU+CfF8TyUdci74HvweMJ9n/MI15bc4oKIRnHBTAeWVbLuSFdcntgASD5ZKtylW+4jY5XBM+APweemDrwIXtUXcANAzv2RFMBWh/QOayma1/zLOK+AuZWWI84LD39ZQVx2h6u/3kTBfiP0m5DX0Ml3jgrCGqG1mphu9P8UCYsfhKM5X+68pLppfLU3R0+mH2CZ6sfy3HJgPCMmdpTwefFnH8iCUBY829qia19I63zXW/0kxsVL3Sx8zqEYLW60jpnUv/pnfjF5PyzTZyzuSjREkFRtAtiGpFmNrW0M3XtpwpUR0N0Bjwjq1zP4TSQ1cjyHNIm9p11KmPt7+NjYEpnA7mj+Kyzmz6AGK0/ivKaOOtndsi/J+/7xMwke4Q18DlJ+FTPCgVoq0WMa7b25sGhQxNgfOauMNAefmgMYVFpAKx2uHd4CdETe6+KTj6Jk69wblEOHIoEGUF4YMC7/pwxuuJHrljpfeQreXSdjfViKnxtGgA+RQiU/3SohZ6I2DWBtalNk2r5U2iAKzJuwbJH/nPtC6fZcASaNoILzFmUOx9QJZOBgUFoKbsJSnng2ghR4WBcJwJ+Z6rC7ycgSfrg3/5E64bMRJBo71QDeyjSWWy5TCM2AC9TUeEQ4rFdzeFzhwVciZm+4JtTe+Dfjk9SUHo9VzgtfNh62k7C7P6gMYDVlwubI66Mwhu+TDMeaztECdb9H1x27dGFjndcECy3cjNEnv5HsbQZp+BiTMTP8IaK7q/p2AfM0KI6s5ytqC+rgIQU4DrTsrWLKh24LREuJC6IP0YjfDHenE8+IoIvb2EuTlA1TBhbW09AKvHq+8y8VyXTrvlOSrfXaPYXFzqpgi+5Gtx0XtVunbu52J60fctTzfFYMd1m8yyIXzzJZwkQQdfTwKSbEZnJ4rgOi9TlPPGYS7A2pDHsTH+BXw1y3LpN+8uSJFSFLLtKuLKK3ly53PkJU+3ta5JoeOpc44N8vFvu7AaH3pZJcx2UmBsjO6T2abtYE19O20jk9uzFGvn0jU/ocivKsxvJ5rLr5xwnbTD/kjNz3PH70CrPEbG/AXFWAhfZ87Wp66b4FCLfc5EVMXzadTF9sxD6BRqjvWEnbL2Avzq6bApfzstHx1R8vuzG8G889iyKAhCXpPTqr+lCTUFLSS6j/D5b7NFD2iLhE90O84cC4Cpk8hInBnoHgnGkjAm5qy2/EGs7MCa4rUkWB8ZBHWy8RUsQ7K8m349usgJLsQTO1mzA7lPCvOG+tHT0sx/LzrdPEcScwwSMJg8YizSm3c3lm5jHdzYnR1BMnUdQQWhFFlqEnEhNIKU1zmuQuSsBsFtDSDCu/xW/rV/lZ39ds3Yil8vVJXQFnDopxhhEGscD5AmAY2nNGP9FCrIa3bYhTOAhsSRjmzdNv/h0YKeQM61XbbUtrS8To04ZWhLaw+3aw51ozgkbWfowymw0nOXy8pm62YBIdSXSAIsI7TrwQHJ48sU17V5o8h+155C3e548Zoldo30yvDTlSkTBUopyzFdehRrcDicshgvnqtTeoG874NziuT2rN0VtyH5tA1/kvxzR8lHPvSvVZUjcnjfeS1o1s292Taxb8T6CnGDf8kZzQb4ax0vlPFuFQeZmAiGHhGnvYc6Lg1mA7NEND8QMRdDMZyCD30w9ltWDGES2vbsPEl8A9q92tSjyHlEX+304UJosJaqil1X7DAfuBigum2XYLqlcTwkgAi4TK9LrPR3KM2P/mqKx1A3/jzKsC7psORKj/c2rbxqBg4LKP7SVNnCzhPhWDOHjhgrWVPLd9me7dutWNTfC/ZXA38AwgGuiyF1iIyZSsV7uu2f7iHNl/ZwSahV3sU/fT2fYN2WYlZ//cR5uWixdcmULOHdZ4dE+h3l3WRkLHpK2ayJMzw4FebMaBMGm9JVvMLDXduQlQShmgMmujLRaau4fSmAs8QBokjCd01jD5+ET1Zx0id0BJ4EzDliSqSFmiu20XHXZhxlJqGHEhhWm2l2Ij9oSkM/9HfrPmgcid3af4o+GvBC87bE3/DDzkp0prNXHTZuTi9w/4ACd9rih+dJRBDQyRNjDGVE0/zolnRyH7s6ja5AGN2d/ZX4mvuPd+5KhO36N1aFrFEPOA3CIcxtOKH2yk/SGIdKFv8ktT7eizi4kFy1rSiGAmO/kFk3Kwz06INXAXzbu/d2/UQ//5IxDd+D2mdERFcXPDjXWsMAVgZPRnHsklP+4ED8vv19QGdJ9JSZRSz8pFR0Xna3pXP6DjCsALxFTRW6f0RXi3TI9NiAEoi0iWfokH2NU8h50Dp6RaA2mtNwRd9m+/sJkXyJsvWZXN1N3YvwvlFHczzqZmoVsyEaJs723Ss+wbvfsM5atAUpxnlIs822FMR0KqGVRPcqtHNs+De+Nm8rWB3aDn0ev5hXpRb9sDYh9Y55LPOq2oHNr808SFN9qBB6vJ5bHaopWh/J9Ua2Z6bB8LoaSv1is4613MpEYEbLoZN8Tl3HgVcWfShm34CsmxUJXb0pu8l/gIaGzzh9bjEvADCn+c+ev7P/a6EQNtc/B9RRLTS4Bdd15RHMTkyT+7cQvHYtSKlwL/KcocwIi//kF2T1VT3Co7pT9ZKIX5E/qYv6SpOeUlzjdRgURqgXcnh1Jcmv4QPxpno2NBF7DBf7KqzhU+qPs97BF2cfa+xvYo9JK6+T4lQ6bI72P/NkLpsBbZyP/v2Abq6y9PZuJXGL5oLJLkYXtfrYbVH1WV4uwZFscdPa40hKN2gfHUF5gVTD+lrfvAd08XjNsCscuAM8ALa4d3I7ypKrsZzTgQ6fJiy0LkgfyZ240GfKvkDUM4gBeiHazdL29W4UAQlLb308HYxqFZkyLeWY8QR8kxeOnHWYkR0oyQr5S9yMBVhTf5ghpMNxxo+1w8qGhVkxTAWodPskrbTnV3nRRkLnoPSIiwEL0qgbUevmpLhfMxMMlFd7TsZ2Z1B2KNo98dYxGd30+cxNzthbY0CHoHXmedHwUC1bDM+37tMlcHIvagS2MzEbEX0JgyV+OWSaJFWKORbz226EFEDmsFFIyYDFhZM/TuJCRet2VqH0cUyIzzTqp92LKIA4Y+d24gVJmrzQEQmN4xAIIS8TknS8ipCi08erJe0L2YeOxRwODzSx8rbjjAD9x8rMCa8Io3NzR+mxWZI6zz9A8BXqitUWzsecGzqHj89HfoIO0msLI+2ZIlykTnRoG3ejIn86+P9IjF2iAVKetWnb+Rnb9axc2man2d+J+tJ79BgvJ31j69adDnQtMZCmub51W5TBhJ/gWxUcv8FXM5eKP9tl+ixLmqgNzeYFG2Hp8ZLCkecqZtPvxAAdjOUvDWGZbV6ttA3aTuUUvNW9Xnslq9eVFr150oFNNmUGaNCe0AL2/z3nC8lNAs/rlj+3NRRhE2HXf7Vb9W1zew8JFcIaCtoEOpq2+ErPeD85ssDC4E8LtipcPujyTiUTQ/ZTy14gn3JRIQSoSXEQR9hrWXUe5I41VlJWXlSGoLkvQTEa65siWTODJzUOacUMKakL2Lg21mI07kzeae+GP/C2dHcKpZGLLKYfan1+QDYrtKT4zCfcrQqdJ0niYCPfW0F134IV8x9tsHedOHX+IGSH4aB20V12OnH8S4x4PhVCgIMI6xyBBJATOSJ1GsVqJs+qILQIHHeJFIg3edxy4tObqFzytQ4UYoJ2ieNm+gPCwm3Ghfg5Lsc5wk/qNeD3tzgN8vUj0l/nmIP8onE4GW24Qnzx6nRdCsgaUi06ZIoHhpfjCVkPu9QSm42k4XDwgidPSaNDlmwD+cb66ebi2cm5+kIgN0ILEs+XzaLhxt4PqxhaE23g25h/Oe7o3PjwzURo/DOhtTgudHnu7I1NyqT2lrAR3leDtTeYSfcMv/pPqyGydXhoQ3g7YviikvbF+BIQJXBJGKpo+3qPr02cUigyhESUkyFs79WAMxdrEaq1FtbbmEBw5UdlqIKcKLuOj0BxGzBRxnsIZIxie00DOnIPKI+khsmjtckIOst+Brcujb5uOf48stSP7XvwqL0HVhPFMXj1MM4Z6C01roo6vOZOxazrA41+3yWc7WMW8dL/dxwFZpWPqBYKotHYrzeJ91Gs78jeDRczguo5I2fN02dza9X/OxoZSZchlQAYar0foDKeW308CapJoWzPQYRcmdltogLx7ZxEgDofJlFSL84WLQdjlbjNyajF75pAsZdOlwIlbXqSyrwXJZhy9P1HoZKI4VfiC0/8bVMNQ57p3bI3izbHl0sOoWTwmMdI+kDbn8oUBNtzsXozjj2V9BpWmjHWteEXba59hnxd10HzvGczrLIJ4hWtDXHJp5C9PUAJxa+b/OchvQzU9BVMqJb90VComcDOLQ2VVhmiT66/r4RKzdAEFSFcGPzqXY6rCBlcdoD4Rpnh1QY79tAdglJ4R6c+5HzsEpik9aPbiOAA8c3ljCrPaHkxJ4jE8623iLBD2phrFnPO3BuLqMUrq4HcpQ+LqNMnQtEsCkyLk0wDo6hMA6vm1n891eiZg7XwRlmO+WRaXZ8cZyUk4qoDoqL2FhbLkPwZER5b+5wkl6nFP4sqZvRCIphpWuWsb8eLIsN0ZHrPGJQlRYlgzd8cuDOM9ma3ni2YgC6GYOw6G822WbPxbvCI1m2mhV+9puf7bJFbuyoi+eue049SAnCqR69HqreztsLBRWn35lT6Xn6Z8fjTbCHd7JE8FwfN2t5DCKEZCP8e8kcTjAzcxUt9mpy2fqt/NXxqNeQfil5q99Fjotz+s8XwrTVlDO6hnnn9bDwS6qhrGLjItLo812+14cX9LcAdfm/K+O+4NKny+HWq/l5UzDgVm+zIvuP7phLG6dONiGNMAHlxXwsbKKxbFgkX1jfbH0R+LAbR+rzpgGK0tkhV6M1X/KiKB0mcKJ4R5Hz7fyVFtwnuNQVa6+RB1AY7xQzPjNFzshqODbDv+nNfeoOtJ61/cATd62pgmbHsNyls+ZI9SKYE1SDr4EaWV5DvJtI2fBac48w+L0XmXu1oxZN4NgBrrX/DnnF0DitLyhRLxuSAdstPqqFtzwXlcIKEFzzZ0QspzJXhUku17o3gVHG4A9rSmYyso4ttOu+mRnwfwzDE3evFit/feXGOf2dUtlXFZ6lZ9Hppo6mdR60Jxcv7dev2Fi0Ux6wUr4vCyJWET6/fhADwYQQ+Xqy106Evepmo4L7uPgAeJS7zrxqxOr2ZGgUTGyi3yYVzHBsN8RxY9KSc6QtZEsczJGBkw7bNWphfjnvL5exmUf2Ry7XcTyqp3gYKwUYgA5GHITYkRuHBZZjJQDkzXFxa0BOJPal/nuDYbijYaIL9K3IgAvkzQFXCdkUwI0Xy5ZUTohYuHriK+1XP9Huy7muhAK4LENByCglG32dQZ40HzKtbFYC+MNdsJCYr1ij+KQpqecnWpUg7YxTg1dp25viQ/NWvxggMEGhzKw5cLU54xvwoB21BLImVRltY88jg/pjbNTSYjRRlCZcDwC1Bv4S2bKHXtzN3sO94GhEUnF7/ZdmqIcSnuFNU1J65UGFjN+bSiPg6lOP1XG2O+wStIlSDwrjDNzz0sRDVyV8Gnp/qhKTpCz5KKCFRiG9cxw5aQqsE2QMxYODfOcryEqsN7Ors4yPZKfptnLBJdDOGyua8Qeabeqi7hU6dun71HG8eV/L9v+7VkWroFrFjdjL25RPCSKOSF8X2Pl9fWMrslN6u22J9wK+RV7zDy+b3xM2TZWkbvkXBClzYqzzueINxAPC8FW2zD4lqdoiVgPULhrantTxO+G2+41L7VKS/b9kjJmRUl6jrHrKjOiIRW88AatHlL7pt4LkZlIgcmraT/EByfqLXPNBv4u4MJSO6ypdFwu3ZyehkEkGYqRo8bnz9N33YLW2cia0h4GQ+v6YdWdGy1D+IUO2cQDyvxOZQ9l1dlvZHZJgQpjGyDpFzQs4rrsJJIBSGDwSzU+5rjggdvXJSShQLlfRlTLLQV2n/d68F+DkRE4ugUnD8aaiOeCWVwIx+qKvJKiAYwsa8LkYONfbxrRglf3xb+koEvoiSEW9dE+AQ1YapO2dTEWzm2ZoxIC1yXnTwo0DJzabDkh09AuMdUPOs1XQRWLo892tgJzQm5j65XFXofRbTX8Li3t/bWg5o2ctjcA2rhv5T4MbJ9Aa3ANaoZ48TG3UTgu5ENGcThTaw6CaIhvNDcdoBOJJEnMuctq5WW3pZG8v3GOGrCZwjxGBd74iKOtqbkXBqNx6uUb2ppT+d59+KKioRsK8RaIKHGVOE9/5PqFQyLHj90pZ1nyuUtGuRHpjQXZtLbGm1pkbtIYbqE1t9P4VBMZMtONG2eJNDXfjhMY68JNEuta2eVz0IKv6nCOHFGzrA8gbPu6qcwRDIbJHM5zVc1Oklzk0DwvuptUjWkngIkkFwU5bBgQdpwQrqhEVy0i4VVVQSnNQqbaYwF7QTtY7/Yeml3tuTbwe6vXBM8OrDOjX8H7louvxoIXqbziEOeE8SY9+vLjz1EZso/l7fAX6mwAic7RJzkCqr6BuZfXp0Pzak7C/Y/Ft8rpYDj/iKOsvqC420rOoFDyZzhfD7xSbR/vCiNnXTgQtwMj6LeN+RQjIFo48evatLtTBpeSveZuCfI0REmvuMTvI8mPSraH61RmWTY/svrIFLsxECdpeAVi0XeFm8GZDEEKZFZTFLcLrEXAmrJKYJtYzU7pavEjfC7W05/J1VvibLW9eKNVQAwSlEkfwkh8H8LGfq7i4SmO+mq7xKKcTQ6y2dRSMASFRNqY33qG23eadRO1aTEgDBrOieF2C7MxCsbQMnIHncocgrnB/AdNRwpHZRyrJ7cqxSZjnuZPjjif6FvONpNjgQZgtWlccAmR44tQHHUGS1nOL1sS/1/9+CQsTX14SVjnvO46qnXNyAet5hzyu2au2bt9xrKnboINQCRJaMMvJcVn6BCj5lxIbvn/L7LUL/3X+LSVW090awnz9J29BwOjZqr7Yjq4zXHikrHAIAXtN5VARZr0PqMUloVnJJ5V7BhD23/ln8c1xY4UDX/pkPedtGY1Et4SEJW7PMG0neMXn/WF5ZEH9CfQSdQJiIo26ODvc2WZydDs+WWb6lpewoInaT3xD6jP0M628qrFr5LmBg9BDdpyBzUI880pdcP2T/qv3ggcJA59rR5B3RikQ97Ecn9jsBf9MO99DahkDVavt6Ini5b1PGy/sdSfL4jele1FHykC0/ah5mbdRC/aeMoygtFKPqBI4RQ6yTuFy8R6wcvanUq5uqGiteWRcylHiaOOL/jG9+aQ20jL8QFc4JPfwfnxh+8nLREm+EjNKw/Y1e9badY3JTKDlilXv8FJhCbyaIO6UD253wRB/7KRsGxU0ya3sdyji0tJHTfyLFKRIBtdmbq7rJGe6nWqsA/pays2zS21lDgqPrRVG311JdMVfZRYEJlzR+flmEJTtRHvOCeVk4SAj4zcoWKD20W+hXqSZLGjHMCLYh9PXJtxYrtUbmt2wUbZRF5MfNKkD0OI23T0CYQt8xzb8MOwLdaT3iZZk6VjMnKZC7rQs9tdy6+MBE6sKyLcCYd52E2T12eFV7ewegN+wx9kNiyQ/5g4UIoj8rIdPLNGMWJzqj2dvz2tGtDrzVHdMxSHiQYpLsEGDBEvSWqJk204zJnxSN0NkQs3S+rgg8LJHF7EHNypFEfuwYZtZg+VvLfUeOkRJKuXwjCARUSCR8F56SQJCcL962FGaXobDmMUwfbJ9qM08x/VRxy6Ib/knMwzHoZIC6h28Iwpf/92BkDD5vGyhpiqRNLgDgxLtGd8iPN1a6J44WxqXWm5Ai36YhmHg0diJYFBjIsJCyRw2X2iiZjl4pTz2Ti0wtfptHqunTXqFa0vjwWEmHPFC2Ne7dPHbjPxXpqH4Zq0Dn04uvtQbLJnJ/mki7xoPJ0Rg3OILAJ2b8wZSLAegBTfaVpGlRvyMVzo4cuCudY12L4PdGTpOhBZUIdyoJPrT2RAEcm7d4gRtvCX/fL4sndGu8FmZ27zHQBrO/DN6HIB1xGt0nKJsPHJGKX0mtmFMURUMb6zkkPRHGoSV+TXgcP0vIecHTaHt7XO+ov/Fu58NxdyaSIocHSEyTCYZhTOWQlEeIoiaRj5tN/k54ZaBPyHejpsZZl8XgBhgIRR87IPykD+AsY9qW4CWymy3Ecallc/s2/BrjseCh2e+qdTDqjEJHGZVTjlSyywcdYvKyPQSz+URMZbFGrU8y8sjyjrl3zw9BoOXeh8xnYEVrfNyw9vTWVVbsvnqiuMuC6cIimI7EgcU5Hssi2ak+jJ5Q0LYC7dWVxWiDJJ1L9cLcQDrvkuN0haKm7zX6XHujY1lGaBr7EFcHnmo1fjNIzSX+hrfLL2qiHABvHzqKrNzvyNryqLw/wuqrx3T8GWCtW+E6/yvGOgzYeSgCJhq3Uzbk3O2Kc1JqW46CKjqQUOKVmynNIsfngzMHs6rc24COha7/53Hmyw1WP3fdtO2xaRfkZUA97SI1MHM2RUCpUtKBKBR88c82QXP+x/yAjZ9ga3x11PFDk50esHnXgwISM1NAHqDbS0qVJQHVJvjAp6RMjPDvZLscU2ukEjUBgSFRwiL1MRpDF2oyE9yfv2gcFxi1U7oMWrcx5gWuEL8YPCmnm7m63lFdB8E543dGr4iesvPI+lfc6WCVIHf+UklzRL9mLJqMVO6sOF1GRd4Yv2EvBAPPatrSEkSc8sp/gx4uGe68UjdAQQ9KpFgp7l9q/VA5jUMi27lLvUjvjbLbgpOeaPci608eTZIC1o1/mQEjOtcVSJOJt6ks3IFXyV7y4t0ED2WwVkOhAz5KitLsxPi+2bDsc7zi978sDpKiGUhXNc5SkxxWsjNEqqXSdv6xybp9PbLHYexM49VtMo9QODfLn0UEYvPkkxGxei82YNAKeTA6Twx/f9G1bCtRoz5YUJbXFkd9fLkh/p33L+ZkssqBLIW1jDrRshq8m7Io6jVYU6ExB/diXMmmIbEXnsB9ZneY3uZUWrN+sukZ4dO3R8m967Cm6t4BxYATMdajZLpH/C9BftOoptKO3fnFTib0Hs4vDK2NEaqociE78q1S/guDmK3scmmt2ulCIV6ceo1j2TZYlNvmnZVq81aB2QVuD+xZMdIaBcUsGayKKLRiIHJxEVL2wfWzYPdecETUs5PPox3Jtk7brYSJW/4pTYjUpPhLVqJzBIy2C0fLV1J02iiXQVNcGGEK7VlEAALbjIB5sJMYTB/ndI2Zy8wwS6U7fkPDLI2xtLw2Kf53X2mK5lXdM0brOe6f8ywL14Ggu6PI0WR0MV5llzbmd0TdA8RsfAr/dAhsfeh9AaWc+6vFADT6doZQC/iszNc9pHaUPgelQ4cqH4ma1qDEtdvBLccgpXH/xUX+3CklXuKgbMqYw2ddGvoFj/tHYNC7Z1KEoPyMlBIMqh2MfB8W2YLi4K4x3Uf5rb+L6greqg0D78XEM6FDezwsAbRYEj447ObalfHzHOW3uga1Nk7w12TNpKl3oMwXfV7YsuawZg1nS/bB4Spj04CvB+8C3r3V22xfPra4pBm/TmH6/FFotFv/QhEmn4LJGmSJl3eR316OAlUV9NU4oQZrqdl7NSuegbSnSmhz932xYNLf6P+4BxT3A2PnyLmq5BaNl+upJHWCP3KOIaD2ACpIhHNp9G/xns+7d6qUvQpKXoQx9z78oUZn79mJBRNOrnlTOVMGUPE59ohvFUVpltZYQjdW7ziFB8n29YwfbHTUCR56KrWtXwhz6PAQvrUmwYAKS1Kojc2dmBU86P+EVKdyAMkHdYnsUh8wtgemPYNaDLx3Ta7xFakq1nrtiukMjTcGX6UnQ2lA/IjilWP/8VyBWIJ9AYf2dEDJKZYWjlnXElIH+CsVFAaYWTrVRuwpgBdnAiE9uzSNs6fkZ1bx8mgAK6ACuVAo2rJTB1VVDeSplr4RUkHJzmX4oT20lPZ7S8E/DC4gkavkfXXeX54VW/koacXeBCHy25uj94O1ZIzhLtJcxeIysr+LuYZ+mvNLnjr1gRYeFOX1kHkf4pmixJMs4pgnBzJYWDg6tMU+zIMs3n40FsIw+D0mMjy/JMIlWSnYDr0lsxwtO5MrxAGhX16AIJnLonTAWRETUgMfAvgEwI6gyAftAoNihUoez/qJbYu/g37QVkdLHv/Bdj1IFy1kRrgjmQiYfbxrwatwwFU6FapzxYd/zkNHy9iYEWV1GI2MQLWs8TTo5NW/U+smC1wYyj8Yc/u5kq99prUtwaQ5se2k+MrUZ2o/7shzYJZpDGPgpGG+hF4QLfbty31qCBypNF8aIoaIvSykUa/P+VBHkvCPBytDeyXrowm1x74IWTFF8gcPiMzn1KpTDZ+yFb4A9ouLlTEIopeuABFE3I2TDuvkReaq1UQ7rjLdNq6RkrdsGore++4U/fWLrRnxdQrMpF31IDgUshirBHONAE2xDYbH+LdGAzxZ7WSw4Q9+MHvIWh0KiRHxU0pAulExLh28uTJGoMRMjt1it9m6UCgXYwqfu0N65l9hLSp7NlwImsx1rsdOp495q2b7Qtvn2NNnUe7oEzCoQOGwvvfxzR+fsalU5z/9/IUWqSXB0ttWaremADzBWjO+dldgh0l3F1EL+oHeQEUbe840W3yntyKHlPSMs0sYIYSsCbOixTsGnh7q8HEcWFZghgHwI7fG/szpeEUv5BWb//vmu0phEn0NX9lQgDy3NZd8xSyeyzcK9IhS3fg4Wq/favvNh/DoJ1UOcHCk7xovXSdPI83FHV25xS+xAVsq4ikP/nL4dEn0ccahkcRgFBLttQYxUhgNHEkd8MuU/BzXTiv929TiNU7ZQ3QGbvKdbq/7hE/zMElFr+MEx+Txp49hznVQ66o8Yfr8BjDyN+EL3cK6Xe2fjRDHLOX2JPlIGXCC0Z416mXPXMJKaHdsAyGD81XUvXzAoFuoe53sU0UrT4OTd4S9WxwYo65luN7rGvGi0FDJBPzUj7XV+Rk8Jy79kUJ5vHjxhyKKSpSseuvkh0r5q1ktEkg+MYYIi+FwWtI0bFWxChTm8mSBG1TAyokKgVOLN+bOCkTd2DK6m8RSuKHWeCEt8W9PDLtPyxd09agLBXwtk1sFHvN/qgh0Ob5ovYq54h7G4l+dFZPcyapjyIkM49BL7y5HqMojYSM3QP8qQWWzXPdLzvbgh/dPhU3GviFWYSu0B3J7rbGi8broBQi24kggoMCO0YNLEeleN12rqxAAMJrKiX9rKry0q2FAIpo4lrB18krLakbfp99a669NbToc1dD0mTDkkvSDTecMwUZdzxW4vTF/ZXXPa7FtiymvVD0+n9FyZ73YT6ycfjIyJ6f+Vn1u1LCnEqo5BQ94kuyJZHEekojbDBXnPm8DiSefsNllrQj/uW2vLkqJHQTSjeNGUt/x/zl6xRLvxuyoO6sq3Q+Koh5RKF5ESOnpBfcSgDDMTqRV3Ba0Wv67zjLGts+IUZvecxil6Wh4VdOiANC5pNHoaluIsXlr0qvU5LfB0uHWwckhs6Q7fqS6YWYDX97ZEXFPchs8dgCo7ngioVHjIRiebwKBby/pvrXNyEhb7Rx96CQM6LEpyGfshinpxLbjDZAfJkjn3kVlEwgxzDMciMBjfWIWQqOz8Uq+I5ZrdkrhDO/dy7jBLVyduhZG3oFbT0Tg+yKb+GCZtGwgGyz5eCzoIrFdngFaYjL41Ru4r7kqSgxCfJd/ywbgvMsFRDmRpUJq+7Zw1K2ZNhVWDXHROArA5jrNh3oHGGSTgAyiJHvEnGRW0JNn6/RVldbFo8oiOeQkWb1iDnprEZ0LsjgrxYd5VwDu0Pext0KQI1hz/eqLrzWceYQYWQu1quoq26NpBFpmOWO+DIlowkz33zYyLvYhMyB/itEcOQq3hrWagtEWSw8iKCXWLIgeBfzRrf2a/NMQ9XB6oHSLJ9B/gHEuB9IR8iusw59PXYXwWaAWG/FAFdv9IpBTG4GX3cYEZq7TffbEWT8zz2KRVQwPSjj1xrc1E6yFrxiOpWCwgqr2kSlU6Yy64/WNsSi9NNtRP5uEcDHTdyD+imRk3RUH1wH0DGkwc0UPibinuTsPJZeIQhAu/f085ac8XYKF7OiEnHn1N1M3MMjnPB0PR8NLkuA0Sgnb5exQNRf16slbr6q1lJHhN7yeoyGmE5VyvpoHjnfblBLEogLlU9DQzBU/v05dZSwqIQudD1VMNmfOPi7GIZQaHkK7M8iTqzNhtML+zDA6B3VCbkqcu8wKTlbUeIMrzAxSBQh9qIMqCV809wE6aEstVX4911BZ2phlzJr/4CPY7lNF0VEzGG0r1HPi5sZuRe9vBP7rq6JNDkiJGWb4AA+QFvym4fQMv9Csq90Qkro2DXhGJVZEupPzM9xYjaOhzMOyx+cAuUbZ14khinyDDmyE5/JmZXC9Ox5Jx3N4KqgrY+js9r0nIGkTczzeD14C3nBdHq19Yc+1HjVMumNfXVBhwXig8pzOYTWt47F32qbq9l9HQhj7dENlneHI7ELFpFY/s/A5o30prk2+/LyPY6FUJ874ToHWXgwWKYiKBggJHxCIASdmQ/lDXFXJUPSZq+czKZBIG2oj2j41ZYL9JLcrsXgWoXk1zOL/zssFh/2kRAioHhrKwZ484Ng5FGLxfsTX45nrQWYsy1Mvm2ZxahomvKKEu/TNn05UA6/WHRvIVKr4h5LhFxHEMpl823q4wDWgLNDuxwf6hngvp/f/LkJUzr2XC2WVk6ZI80jYWqNlM3/7yil81VGvS+A6IgrKm35B2vLNWrptK3TyPP4P6KUABy2YLNVETIM0ItNuKEG7q9SNUOHPZjd5kW3GF1Bqg2oqpiLkqJPALU6v9msRQajA9gdZuTXYMxwjKL6WYtJDCUCZ448RdA1ct9Iw0vsUPo3cZc/MTUuDovbgqILrEKZesNL8VAS6EX4ps+QkVhOgZ88UXAfsu9WcKBSixHS9CKfxLLMfUM3TFoQCDiuWQzDcThky4a1Gl6PjkhRgkWSrQhA4Tnum4JOEjwbi69yxgspRgJeUWFr6R4cfMln7ocuQmZ8YM6abm7XI9z/g+XkaydCYyGRgbKrncgedkSDOcQoSqiOFuKZcryNB9EFzI5IIArWBXFkgaVesTNkryU0iz0h2htIMzK4VpfJUMoGmNygu436AFXT/aIK+dwumWapbLkSbEOJ01l51gY81XgiCScxg4fithmYnTcHAoSpBKsPwXupGEfln0Tne3hqGKiMfFpWESJBYq0sQfvApv5++9XEobPbAc3IMcKtSp3EGyssf6YNFf5TbbINJwW1okUlUR2P3eMAu4Li3kwhpyyfsU1283JIgNm6huhMYOlt9YwIFrm3oCt7P9XBk79azzo0gjx07fmf3Uqs0ggxTwAKyZZldT0Kc8SxQU3oCJEb0PQ88RAPwGLdWkR81w02DO4g4dP5fF5yVb3feXCGv8JY2y772DpDvOOy8twIRIBdGtdHULjIM0Bcb+yyrVfvs1NAO3wj2vLBwDYq6Q1qxamn2d31HwSMC0P/cjvgu0rhx0ySbhRDG/cvOFVwZRcizfdB410+QST1+2PfwN2LN7w/ZLmGT7zaHcIaRNcve6W12muVAfllXTZhKR1qTOeXqPLTw2/EJ5C/IreeZNIXuiLW3xxgqmQDrFaQMPWrbtzV7lxey8O2YIIiaJ7/JNodcIAX09kmrD7ZiVtLlN7nv7U6j7Gme852i91TdOUQEgfERyyTqYhrtkWOnsDKcqztl3unQhFH+3oL/DJDbKm8IzrQ1yWtAAuMHdLKB6kNoNogBOXmzCW68OTYSEgRRAeEPa7n7lRk96vqtoQhOy5wE9RpJtlsswd60luGATczk8jyoi2IA239jjXzgCsQNmAfZ3wGW4G3F2PE+Bil7H9xLZ+knhjYQm+AbOFN1tJpRPzD7TY71+rxZZlI1V5UHWXvLyq8qoyrR/mW9B8dVi3Yy9fe16y4MOTui553gt29fYBpq4YHRlqy+ccDtFWMJ9OCH4xWxed+4zWmZUXo+wSCDc/18W2O1ti57fKLMGv1EANMEFk5sTFCF40mKY767I/KEeTRRtqUDUGL8ruXrS35VOqs/917KRXJefNfAPbXMGhc0zev3daKPnWB6TeTlL6vPl1Y+xnPRp38h0GwTCXgFWugl2vcTeEeeGQJHxlS06JqvzHhi67DJZuID8cS5/P15tRSZuRZeDn3BOaVCWLQ8qOMihi5O1v7TxjRJPeW4w7AmC+aZbY9tFjiLX0BvySJmvnYthkSVRsYQGrYJOrNtE2mI1p3iJwS/VIv6eEXm6d702olJYzeLrhT2y3ReSkh7nebKJ0d2B249AhWq6LlYTmuivMiAyoFdct1QJL8ZD3oGHoT6SXSt9L1cLrPDQIn9DKZQjRuHVvo1Ir+uRguaUl26jlRhmPF+mvSYH9rgHzky8dFMDdtpE0MeawxD8p0TT3BmCPIbMMOzbOZiKrFPnmxfSdRiGk07/jngeG6wfL3K8AzWMrVxG9a2YGI+asb2TwqjC+a4qvGQrUw9l1rqGnZNQ97mE/YgdlU7/OLOC5jQ0bFxinTGKZfGK6lzFbCPTBE/8A7RpyGLUl6ai+HtfylJxbaCnjZJnRtFJtGXyNi7di+IxCVDLl9U5EZk608Q99xj4R+T4YtNqpXl3q+lJUjWj81R5/v8wiJFdgljrojoRjtbqZfg0FiZkqnYt3X8/bThUJowUlxCGBjrvoUFScfDZBxVmFlWOkh9aBeaZU5TLq1S/XcdtdBbNuGvkcSQCUf81wEv2bu7TXIWhBF2EXPUI2TLybb3VcOVgJxTJPuSZZIJhMLwg5VZJBxfUpGgtjxP5RbZ2qh1ULYqYI2zJl0hmmqIyTj5t3OKgVyOjAbNiWHhkuXvRsabXb+jWSYW5ZzppMlvDfrN7wcMyBkBlXfUOkwAHJnaJXGlnXvn4VxDga++VaSXFCvoGMpiWk9CZpR0A8NDgZffIXsjA6mxAPNrFygnT8mai4kvCsdLELAJsIsyWElfnuW96qHELpLKS71rxoLkb1DCNxFgccoorhsoXqsIcfjX1juA9ZmQOy+4G0m9rg3255xtuHok7uEYQ5JpXNrsIkaRlEO3zW6T7YVriUmeB02r171G/luwUmQuPjYqtNWYfdeWc3unarRYAiJtJ+65fayTnZdTPX17NGR0BBcDz5zm/FhZx8aqMEl/BICLu56HRF30NvkraL3Juib3OqDdx3p573OeElv/AM/MZ3PN9TVo9F1MAuMANPhGz66/uSjWGbvMu+gYreWF6hnXMEDaijy0jmtdUzUApX41eEfarDkEkbVpfQ4arTywhiVS62kPuEuzfHteS4sZs8C6wzxaQLiWaLz6gSdysxHmbkSgjCV4ohCU6QI8H8JaAoXOwIg9CP+PJc4gfOr1Wm/m3JzPaYHWN6MDOINcB33Nerg05ZdWqx8oYlsaOmSHbMBtwTr87L2uUtF831r4bLowiv3L3SuNDE/0i/w4kLMPwkbp/2PI9I0mgXV3esiwakXjQtginHCdvKhmuT5UpJIdbpsGL1jvZcS3fWAr836fG1YGghzz+aBptmq9D594sPV+Nx+GWMJiLn7YanO/75HodcZBoOV2ACQ+lMIgXctrylqYk+X5tjxdjEU9TlzEgJNOpk2CPTJWyYUeG8gx80JdfJrS25V4wQjrvSPT+OidlrqolmiH98tM9gpd9UmGFYDn8Bda40krRrlL8yeFZHu8yi/RcjwhOWjE/Mn1yvQG5Fn1qkvRjFuN3WWqVmavgM92vyx78ImfBHMiFECwx8ZYhpuCloL8+9aqZsKNFaZV0d6QpxTIxxksp5e2C663MqR9m71nzXvbg+Cza6cSTEI8zA2qFYUWQQLP2GidXwcIaIw40JoLuUoEPDCd8S8sg/yWvZVRaquCMhZsnNa6BZzZM7QGkd9S2hPIcDAwNSoiFOdhbY23ozFd6prIM6LItDxrEGhzO4+QskqI495MY00y1ztQrBV0YZn5bLLzMvknJmdqVl7e9Y8QthE9rd30IhT7luYx2gBIbmlbnAsfKI7wWsC3TYr7bg//qjuCc/x+CtHAXt5dMAWXAmTsICY1y77AOJvvNir0yAcCqT3NJHba9vW+U7qVkTvxye9x/IxeuI3wvd4v7mtAmsz968yyqgVzWL2F5g7YMSbeYxfdxOd3gUYjnRbw60gopS7Co+u9F3nmggzt32nHd9QYzPSks+d2eoLIjVFzyHa1jeB7+sVjceya7vNXF46FMV/mDmdGnd5vag+4P6b0MVaLbSQZu8SlzIpfGoQBWEQAPDeH2uMZqkerwD9mrm79f16ByOR282eFdq+wrlJDBbFmzpa720VAS56D9WrFd9Lu+HelvfNfTaWKZk0yYh+ckcDqRWFZHnAIoNXaT/fx3NtsVXgCYVV429XnQoo8aqRneUgTOaVUNrziMlSIs4hBbgRYSiHlQ+IzyTCszjE0P3W/jOJdCzo6YO55DcSr9Li8WNm9XWevsCIMUaa1WY8yqfkBursdo6fAhsDXulxtgCrVBM+uLL8/Tru0dmHnJBA0HB85/hZbQdLftxCFsoYmEg4IWt1IP/oa826MItZi7IYk8O1RC/I7G1Zd11QwRycgCcHF2d1UzujQ3PgQQcFkuug/ybswrK2I2uL9MYC/jyQRRq4dLwyb1dDxxDbDOcySritWir1CFCyPKk7LLUuWFWvWfFsMUmoh0oV63Z1RVF5MHwxWFo4y4QOGD/fe1o+F8qA64wGAhNPDFFgonzAkp8xGF+I3SrZy3EEXDut56RUVMHkWzsdbGyJj+bVGx7uKF37ro93oAgF/OdRntUwjEw4Yk/9yUCODfqlM68jKML4lNrogZYImB+aOWqvncGbjKmZFNl8hALeKrnN+DBc+fzPuGj8SDYRCDXcb1Ut0Raa7phKAem2TLRvEOXVr8+vnLUh3k7S4MfxgxD6MMUh9dYf8HVKFA6UqV1clohcnRrdXMFwS5IzPkqrR+ESbTDHNrNmh7mLsPqpT+r5xLSyy7oe7i1bMmvGIcV3vHYZMYoMdGITfoBo3RzUNiCmUL1f57snvK/OvtbwzHxtmTah/9O/8gmyg0zatFoV5WZduj51CJnJ+q46ZykwvGm9MpPFlgg5+UREktHqqB/H7SqgvEpVoX9tPp6EpMQkbzIla8jvc6jeQNn2L267moLeq0IG2bTPAprFTEfzss0C/fnueydwsiRvpK8XZPL6vtvLlpR7nCHMfxQ0cbGA1zY36kLg2neub6MdAUcWn/Vj1jaHkhGYcXiofOoyld11RpFmO+a4I5H3kr87oyxC3YwGQbYSA33woe2aCJf18HPz+ftOQZMOl5cp4ABsHPN77LVzozi/rcKjbxjUGFg0rEiTqXI2nZ7fW6Y18bR3v8htzE+ypkEVFd6zzkFBR2vJSSMvX/QHK1J9QuUiO4IvNhGb0SIoMkNGSi6vvTXUbMPL3qVcublqELS0o+J89dhySyXggM6jZnoklsrtt2nWK3H4/rbyuTvWwW6V/F3YCYP7DGsB9VvYYYsVrBaor4crowck4AFSUY1PwdlFcGTQfu0EnK858Gz7+UL2K4SeL4CfYFsCHVC0nmO4reyJ2xNFIANbn6XLX9lyIJleJuGRqi1PFgfhzSYAgvEXHB+zJB+Iy3MkfiMTumKVWqu03sYEiyNkd7Xh7km4Mw4B2AJ94/jcx8hSb5X3XmpNUwHm2AQelK6lrvUAxCnv4iypusMzrcu5V+L0xGsTskkyhNdA9uump3XiNklNvJYpc8g23c9fqodww/8T6J5YcJo7MODc2quKVE+hTO+ltgHsa+FGMpBITlDrRNhiQNKw09RnqtOAxmlRTXV69c4bvSKkXEXtrnHQGMvqhcLqRdnxYHnTrTeqRplf+/aJl6IsLsSJaKgm6bfH8HpeHwCOJu8m4Y11cA6cwoXaiWsnvrA4tVFLfmRLbEQ+32HgW/b2g79GbFxE/D+A7DC70/tjWoWzfy8R6dDWH/bifUpmhsOCMIPoFcsMCkHbKgwLvUPjQJig2eF2a61fX+Sz88gtKKGjRsENQdLdLKzJdmMbYhxLUfTBBm2bBJtD5oxzltCKDYDhXlQ5yHFtg+8mOv05dW5z7+5R7wudjv1NU+/N7jDnq+rg4Swhu7SUf/U9iLWw38uvUk8RzAhoLanltiF3+mtESfnzugLn8uj7cx01f0fKItZ+iWZ3OWlUWyLMfA8VYrfX9eW+xLHxtA1LI89urGRnWQK5ffyfPgZoTals/qrt8EiSS/KzFvHjMqKJEFApD0Hcesd59OvvYgIqqeFvu6SkjrPu7Bghrxs0rv05oXNi5sY4wl3QoM/i8zgpAC1juSYV/DUgMv6Fp9q2/fzX0KLP67Ehfk8GAlIwipRyZKK3Y64ZZIhdb6LFMYuCttTGwi5Tz+4McnUT/9maHSUcqbzIrMGvDrfQzOqRmurHaI2kBHj9tw3Gtux0fCd2Nt9d+2rz3dXrcJRwsc9MgB0rJyBXgVI1YtkH296SEdZ+I3TLTKWlsdC/gOclgbnBCb9+onufNSbTWaiNYIkYPgw4yAkuy/nAqGxRURNXyXoxnXYoIrYYwBI9qUEROfpWOWff3JqJARuwNbBeZvoe2spn9Y1aEXcFsoVJAf2VXuIQt0OiDkbpgAT75F++DOBxtt4C9sNufmCtaob/orgWZYCZISfQjCJPCpC3cN86ip3lhpbUMrwSDqRMVdoFpz1EPfLNc13/IsfK4bOjYOPEHSNNzf/x++gQmcH8EeLs60euzxaUdW1t5j7wPjVrYvz7dSUwZEATvn+KilYWmvRCetkezoPer5IJVpdxGjJcGFLPvXd3qtygpRWEgGulMa4I03ViAMDQvWYtyKOVSRJQmxMbwCaTsJ+7NDdVm3sDK9rUSDERWc6o2Rcfkj5rZ+y5v+oLYvYsUqQQyXpukbeOwY5L1P0tFmPKrAwK1DJBzOlx5QP7RpwAVyUJ/fgHnP6P2TA41bPfpxZf0N46UOdqysz6iB42s3AHVlvXAvQSllaXdgJ9NcEAGpc1+4M63yuKgR260lnoFsLJjeE2ODN1/glfxIiKQ9x/RPB7JIe33AzL0AIJgjfmyWWyEme8xpVIPYxVWf4uqOT9BEJYiuk8inHOORCfjsP/NrZ6Mplzc1EjBdaAps+vebu513k7zOfUsVhweIZkq+mVJ06x2hdVSJjke9ngp28hfj/XSiqQfZgU+x7UPKxGRIo+IeR3/xmfNeXSAg21PdqIYWGJGAJWtjHgbDLwgcLyztxrA2F6b4ASsQkSL60UlNBbj45MMIE83wAAmgmOF6xQVNeqn52zxkSpMgwWCDIQ7Z+xAsV0Bu+lMjnibDLr2xVHGWyUaAGHLE/yx2NudVDIeVgtWOIKwhRRbNwTBI6R/xrbi/R8vJrmnLf1PWjMwy1Foz9LUhf3tw992kf42yr8rKiZb7eWcljAVAMVdN1T8JsfKMhpwkQypRORkZXn4vXGpfq8kjoEoIz6RjZigD/Jx8RpFtcYGOZnu9lP+ONOWgoh9CSeLI29m0d9D7Utva6BSfZg/DDp8d51LV8AnH58aN7yVRYE7cZCZtOtaMlHxhHS0SwjM7+9mTbuYAQgVCqZkrss8+xeGN3Q3w5AHPDnzU9ybOz+lDJXNFUsdpQ4DVRfWyM/JWMNjTpfx8BXAJDXxCSX7uGOhJxxwHGlmijEPP9nWdXQlItKPctWXi5Pfr7iU2Shwg6bSiSPDHDou8apTzCLN5oiqJNf0hJZzmycsuWtJZQgvHNcYlUyeRMVsA9fl2+5dDP79gOEkCKMd/secvZUZ0qhZQTbEVi0sEIJZW1cwoZBqvIIY6s+n7oVU7Lg/tI9RMri9TPbrVYeL/BQNM6whJ+B3lEEerk1a1SIOq6LAal1d2O/l34NoU6Dcvjo/x0baHLpyjnQvPcwDiBsMXu8kQGuPvontx18nZwkPlflacw0lAItlnrydkrjfdkqMElawQF2PMhGcehzenC5pSEYmkHw607U4MBxGhkcan58Pm8aDCW6A5IDBfwsb8pgD5z4Tl7ft6utK1l2SnwAAUf66Za5BjaGV0JZkrSIf9b2x+eJ3SRpRFks0OGinmucAWEchGFyzBhB8SgDeL80ppCGcaQXyAr09NfEr1EfTEehCsns/s4hPz0/5StnBRiEzXKzRXhAKnqtj2U3lTX0KZ54m7nbcJzsr11MXVwmPURmHo15lfmkfv+kjfrLHTnHWctDElPExTH5Rlnk19veYs3iR6XaVe4UmE7PmyaLu5DlrXyPmr1IlwCaPkaTGrmnkiJxVf2Ig247Nt8X3bCHyQVZKu7T9tpb/5xWmtUx/Bi6ntXJuif8S8LMOnBH9UeSGuvk/xlYCp2Q3LTiUoINGXylJqenm0pH4acoy+/njSYDxtUZps30MELm/gADUU5a1l9BxATuQk2V2hD/lQI3PpslyqeQ3ZcKZA1WFjRIN4ueuqcmpAWtYx3JTuHapTWpSg1S1bOA5R664GHys0Z7LB2qNWx4Tul7lAy6UpQIf4CU1UAf85sqDnAkIDmBXTW5CFWSnSwmlv8JzKZx7MVOKcsFycoN0Ekky/FXpA7vdhWnqyWAHcbbcZFQCQ88fH92q10HWJEZEmKfI00FduvejbYbk/IkWXDUXaOfe26t+SNtbNWfjGB/TrQ9tN0W6X4QY/YsoGmcSOKgC/4CJbsU+4c6cyCTERgDZB48jBrrO0/n7z+6HQafUX6qxI77kXxWQ4qdUUG3fUGI3Dw+iPN2Aq2ew7OIWD9vXI+og3ZA+x5GLDZruGqR4/68U5QSSoOZfFR2yDYItLS5rVDr8D6nc/D4sPwVqJGrkgNmnJ4T3xWtmoUajmCWLDy9kjECSPJAYpbeExKCReLL8X6FrCqEBi54ouLtq8arZxSDJVcE75eAcUQtYEOfRzWP5XsRFCNayzbuqdk4Lgwx86/CdcTF3t+LgVFP78/xuG92wcmROsXE5/U/8ZJo2ftYr+ucNc+dkuBNQZT0HPkEMYYVHF/lLj3EXrKFH+t69DwiS2rCWKCMqpqHQS/ZdOANjR1BrA0quumzwkU+vOuDQW+FJcz62gzSaBgAiOngya/AwOdRk7sSzoZMsBcALPBeiykg/4iwrA5Xs0WHRKG+IbjUov78AmIvdmGeioc0jPYwpMAeKWTRGBkLEHQwYea0yLogilGJqwP4mWlBGhCnT1xrXe4ptq/WxHthv8zwUoIyUsrz/nQp8Cr8O2itxaBqhsWOCIAkBFyuenP1adqlW73GuV2rZEK6b7y2TLxExREAQdLd8L8QnvWhnWc7NFyYszPvqSXelFqyro3O59qq3IgqlUyBW9oxyfX7zJygDteEGkhW1KBntOTnZaYbrqd2VQyrj6OM/8YVAtJ3j959RQygmINIJafHP8QWfocG+O6UnyQHI1dEkvqahGEIycICCDoMFTLjCC/5a8efyv2OHJ1Msbil6rXlmL0Ls/HlJOJ7Qx9Cu6yJypyVrsynqD8ivhAa+E3A/4A73YRwxFpGvfmYCt0WpB7EpB0KWlgVmuOWiDNLE70zbYR2XGPmHwtsZmZTJurMXd+y8ncs4T8sQ9xIp2Ld8GHmwMmqNcOWeMGr0cbFHvfEhjZ2K1cBj1isgDDEqpJnR7JZHnZ5+ZoQOLmvotlngIhXxbRV45MQFr/S9+m/OCFLR0Npt9KX+zQVND2X+g26WALsorTU25pVJ0lQiJkKH3Uf5DrIte3St8O6+o997Gfkxzw0kbLYMD2ZT2OQgH3CPjoO49Ba3tyFwRv7biTv4Yj38k5yCNaAvH9NVvFvkcGkvAFqgPDktU3JmDJfMkAtgPUtglF1Pj84Vgv2VItq+NIQkM64TbPYg2F/8SpWF1OEFFNRAfSxRPzBzqfMkh6j9ZwqlinN0fXbO7TIQrpCmSx+pldVbRvtGONnwJDGgreEaVkG4JfXEu7HswiBgMRTYpksQ83qOpKYo3tEyeXOmXiIELXknfo5i6mWuMpO4a8W3FU0OrHDv6KSDamYRIw7wZmPOnnGTEICkKn88YL+OKEs8R4jNx2XyP1Yr0Okbb69CNrxzDLMWMDm/TU4jMSJ2oZITMF7yorR6z3He6FRgbFqEw9MBcjPCdTtTfeP6BOrgp5w/6rAopYg6xD5+RbDJ4rQLhEidCzgRctpi0aqXvOLBPh6thx6IdtNWrXbVM5KvqQ+RyhzHIN/Xum7JLt+Rsa5pYC3F0zUwcUvbSGNrcleFHA8n3Lt22srjezaWUTa1EdC8LLXDkqsYHYu4Eb9RSvvnHoc4h66dInU0XHnxd/qvzLHO/TQFocv6dBiN2qSJdC2y5o99rSrHoe9X0fD7DljaONIyVlAzX7SdUAtye3UqOMYOHCQKqIv8O6M7b1eB4SeB7/m1AcOK1Dd7eKIwgx3R/7r9qSaDYKlsHvqX+UBWOJXkF/8BuFlkN5rJwWLtCaDgm0AXHWKGknEEz5VLU9Azl6EgVShwimEN4VhVK2RhFOZamHGYcU4x2y73rMyrNfJVQOczPkImbP8I1OHcPsDZH05LVIzsgocV80CmwJJDOa13SfCnrCUUfj7KS4Y/jM/aWi/qgdFTVOz70EYxJuMJf9v8EpVoISuFxhAWriY4drnv4zgTqJLKj/PPvaqV/0C6r7c0uYtm4HWzyhfqZao4owosuUpyZ/QKpJaekHmGNuTcKUHrn8J4SFQYQsCTTOJGkByYe+CApiCD2K+ZaIUA7fFcBcjQqN99Jx1KDMv7IxiFq+btm+RtpADzzk4NJd1bstK8X5XfchBvfDNAYxRYvEPai+OiNop13usr0fpVDPd4ENlx/+oanheDaj+eRUehEmwibzkCyWwRnJJjd/WivjPezyjfZ5AqjgQD8YnnT+eHGkpDMhMsPLCl5KEVbGhs1g06u2MQa9qas1n1rSHYmroiW24nHrjGT43kDZwF4DVcpRIGh/H9wZQkEoA8fjvpZ/xBxizYaQ8SOTsqiP8sA/wTZFB+hnwJ0c7U7NeeuU7qKjAk/4r0yJKhdr4U48JL5hU8S1dDQ5A1kcEUgEtO9PAos8w8RV6iCcx/M528mY/DbZ0vBuMflUWN9tizDdmBde/pq/DK0Aa6+n+x4ByYHyV0c8hBfvbyBldq98aFlJwhlOarTxDYZBc9xJT6gXF1SGGDaUnIcy/aGUCEx2vD/5qH26Xe1r6j4ecGOZpdrCpxqtMAyj1JJHu2M5KILVzokkpxa5oG34laAfgfB29yxZ+S8Wqxv84VhlamcwBsp6oSxC4yDtXdTqWQgEPoVqn7ypBLzMPC3n7oBrNf+aT4u/nn9nddXC2c2cWOJwV2kOE5VA;^ This content is available for authorized users <p>Contact Lightrun Support for access to this page!</p> <p></p>"},{"location":"logs/","title":"Dynamic Logs","text":"<p>Prerequisites</p> <p>To use the plugin, make sure you have:</p> <ol> <li>Installed the plugin in your local IntelliJ instance.</li> <li>Authenticated IntelliJ with your Lightrun account.</li> <li>Attached at least one agent to your app.</li> <li>Opened the source code file for the running application from the IDE.    </li> </ol>"},{"location":"logs/#adding-logs","title":"Adding Logs","text":""},{"location":"logs/#to-insert-a-dynamic-log-into-your-code","title":"To insert a Dynamic Log into your code","text":"<ol> <li>Go to the line in your application source code where you'd like to insert the log. Make sure to use the source code version currently deployed to production.</li> <li>Right-click to open the IntelliJ context menu.</li> <li>From the Lightrun context menu, select Log.        The Create Log dialog should appear similar to the following image.    </li> <li> <p>Complete the fields in the dialog as follows:</p> Fields Description Source From the available options in the dropdown list, bind the action to a specific agent, tag, or custom source. Click Create Custom Source to create a new custom source. Filename &amp; Line The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Format The actual log string. Use expressions such as <code>My variable is {var}</code>, including method invocations such as: <code>Method value: {myMethod() + 5}</code>. Targets Select your preferred action output target. You can pick either: - Stdout - Logs are routed only to your application's standard output.- Plugin -  Logs appear in the Lightrun Console, the Lightrun Management Portal, and configured integrations.or both options at once. Condition The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. </li> <li> <p>Click Advanced to configure the following additional fields:</p> Fields Description Ignore Quota The quota (rate limit) is configured by the agent configurations.  Only users with <code>IGNORE_QUOTA</code> role can override an agent's quota limitation, the <code>IGNORE_QUOTA</code> checkbox is disabled for other users. Expiry The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. Level Select an appropriate log level: INFO, ERROR, DEBUG, WARN. Once configured, logs can also be filtered by the LOG LEVEL attribute in the Lightrun console. </li> <li> <p>Click Save to add the log to your code.</p> </li> </ol>"},{"location":"logs/#managing-logs","title":"Managing Logs","text":"<p>Once a log action has been inserted into your code, a log marker should appear on the code line where the action was added.</p> <p></p> <p>Right-click on the log marker to view more information about the log.</p> <p></p> <p>Click the log marker to edit or delete the log action.</p> <p></p>"},{"location":"logs/#view-logs","title":"Analyzing logs","text":"<p>Lightrun dynamic logs and metrics, by default, are printed into the application\u2019s standard output(Stdout). This process enables them to be analyzed in the context of pre-existing logs or metrics, which might provide further clues towards solving issues.</p> <p>At the same time, you can also configure your action target to Plugin. This configuration lets you view your dynamic logs and metrics output directly in your IDE through the Lightrun Console, the Lightrun Management Portal, and third-party integrated apps like Slack or Prometheus.</p>"},{"location":"logs/#viewing-logs-and-metrics-from-the-jetbrains-lightrun-console","title":"Viewing logs and metrics from the JetBrains Lightrun Console","text":"<p>Once you've configured your action target to Plugin and added at least one dynamic log or metric to your code, the Lightrun Console should display real-time output from the added dynamic log or metric.</p> The Lightrun Console <p>See JetBrains plugin quick tour to learn more about the Lightrun Console tool window.</p>"},{"location":"logs/#to-copy-and-paste-a-dynamic-log-into-your-code","title":"To copy and paste a dynamic log into your code","text":"<p>This procedure allows you to easily reuse existing logs in multiple locations within your code.  Note that the log is saved in the clipboard and can be pasted multiple times. </p> <ol> <li>Go to the line in your application source code where you'd like to copy the log.</li> <li>Right-click on the log.</li> <li> <p>Click Copy to copy the log settings.</p> <p></p> </li> <li> <p>Go to the line of your target source code at which you'd like to insert the copied log, right-click and click Paste Log.     </p> </li> </ol>"},{"location":"manage-users/","title":"Manage users with basic access control","text":"<p>To start debugging with the Lightrun plugin, users in your organization are required to be registered users and authenticated in the Lightrun Management Portal.  Note that this article relates to users who are not working in a non-RBAC environment. To learn how to configure users with RBAC, see </p>"},{"location":"manage-users/#create-a-new-user","title":"Create a new user","text":"<p>You can manually add users to your Lightrun organization, one at a time. This is suitable for scenarios where you need to add a small number of users, such as when you're working in a small organization or when you want to add specific individuals.</p> <p>To use this method, you would typically enter the user's details, such as their name, email address, and any other required information, directly into Lightrun's user management interface. The user will then receive an email requiring them to authenticate their credentials.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings located at the bottom left corner of your Management Portal.</li> <li> <p>Select Users under Identity and Access Management. </p> <p>The Users Management page opens.</p> <p></p> </li> <li> <p>Click + Create user.</p> <p>The Create user dialog opens.</p> <p></p> </li> <li> <p>Fill in the user details and set the user as Active.</p> </li> <li>(Optional) Assign admin roles to the user to help you manage your users. To learn more, see Admin roles.</li> <li>Click Create. <p>The user is added to the management user list and an email will be sent to the user to verify the account and then proceed to log in to Lightrun.</p> </li> </ol>"},{"location":"manage-users/#manage-users","title":"Manage users","text":"<p>You can perform the following administrative tasks including viewing the status of your users, editing, or removing a user.</p>"},{"location":"manage-users/#view-user-status","title":"View user status","text":"<p>In the User Management page, the following status indicators for each of the users is displayed to help know if your users are registered or not.</p> Status Description Active The user is active and completed the activation process. Deactivated The user was disabled. The Active toggle is disabled in the User Details page. Pending The user is active but has not yet completed the activation process."},{"location":"manage-users/#edit-a-user","title":"Edit a user","text":"<ol> <li> <p>In the User Management page, click the required user in the user list.</p> <p>The User details pane opens.</p> <p></p> </li> <li> <p>Apply the changes and click Save.</p> </li> </ol>"},{"location":"manage-users/#delete-a-user","title":"Delete a user","text":"<ol> <li>In the User Management page, click the required user in the user list.     The User details pane opens.</li> <li>Click the Active toggle to deactivate the user, and click Save.     The Delete User option is active and appears in red.</li> <li>Access the User details pane again and click Delete User.</li> <li>Click Save.</li> </ol>"},{"location":"metrics/","title":"Metrics","text":""},{"location":"metrics/#overview","title":"Overview","text":"<p>Support</p> <p>Lightrun metrics are only available for Java/JVM applications.</p> <p>The Lightrun plugin for the IntelliJ IDEA provides four different metrics for monitoring the performance of your code and identifying issues:</p> <ul> <li>Counters - Count the number of times a specific line of code is reached</li> <li>Tic &amp; Toc - Measure the elapsed time between two selected lines of code within a function</li> <li>Method Duration - Measure the elapsed time for a method to execute</li> <li>Custom Metrics - Create customized metrics, using parameters and simple or complex expressions that return a <code>long int</code> result</li> </ul> <p>The following subsections describe, for each Lightrun metric, the procedures for:</p> <ul> <li>Adding a metric action to your running application</li> <li>Viewing and managing a metric.</li> </ul> <p>Prerequisites</p> <p>To use the plugin, make sure you have:</p> <ol> <li>Installed the plugin in your local IntelliJ instance.</li> <li>Authenticated IntelliJ with your Lightrun account.</li> <li>Attached at least one agent to your app.</li> <li>Opened the source code file for the running application from the IDE.    </li> </ol>"},{"location":"metrics/#adding","title":"Adding metrics","text":""},{"location":"metrics/#counter","title":"Counters","text":"<p>A Lightrun Counter counts the number of times a specified line of code is reached and outputs the data periodically to the configured action target.</p> <p>With a Lightrun Counter output, you can obtain a deeper insight into the state of your application's code, at any level of detail, from expressions and method calls to individual variables.</p>"},{"location":"metrics/#to-insert-a-counter-into-your-code","title":"To insert a Counter into your code","text":"<ol> <li>Place your cursor at the line in your source code where you want to insert the Counter, and Right-click to open the context menu  </li> <li>Hover over Lightrun and, from the Metrics menu, select Counter.        The Create Counter dialog should appear similar to the following image. </li> <li> <p>Complete the fields in the dialog as follows:</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. TARGETS Select your preferred action output target. You can pick either: - Stdout - Metrics are routed only to your application's standard output.- Plugin -  Metrics appear in the Lightrun Console and configured integrations.or both options at once. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. </li> <li> <p>Click Advanced to configure the following additional fields:</p> Fields Description AGGREGATED BY Group the metric based on thread names. Specify the required thread name prefix, followed by an asterisk. IGNORE QUOTA The quota (rate limit) is configured by the agent configurations.  Only users with <code>IGNORE_QUOTA</code> role can override an agent's quota limitation, the <code>IGNORE_QUOTA</code> checkbox is disabled for other users. EXPIRY The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. </li> <li> <p>Click OK to add the Counter metric to your code. A  icon should appear in the left gutter of the editor next to the code line where the action was added.</p> </li> </ol>"},{"location":"metrics/#time-measures","title":"Time measures","text":"<p>There are two varieties of time measure metrics in Lightrun:</p> <ul> <li>Method Duration - The Method Duration metric measures the elapsed time during the execution of a method (function), from the entry through a method call to the exit from the return expression.</li> <li>Tic &amp; Toc - The Tic &amp; Toc metric measures the elapsed time of code execution between two specified lines, Tic (start line) and Toc (end line), in the same code block.</li> </ul> <p>Note</p> <p>The Tic (start line) and Toc (end line) both must be positioned inside the same code block.</p>"},{"location":"metrics/#duration","title":"To insert a Method Duration into your code","text":"<ol> <li>Go to the line of your source code where the method is declared, and Right-click to open the context menu.  </li> <li>Hover over Lightrun and, from the Metrics menu, click Method Duration.        The Create Measure Duration dialog should appear similar to the following image. </li> <li> <p>Complete the fields in the dialog as follows:</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. METHOD The name of the method (function) to which the Method Duration metric is to be applied. TARGETS Select your preferred action output target. You can pick either: - Stdout - Metrics are routed only to your application's standard output.- Plugin -  Metrics appear in the Lightrun Console and configured integrations.or both options at once. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. </li> <li> <p>Click Advanced, to configure the following additional fields:</p> Fields Description IGNORE QUOTA The quota (rate limit) is configured by the agent configurations.  Only users with <code>IGNORE_QUOTA</code> role can override an agent's quota limitation, the <code>IGNORE_QUOTA</code> checkbox is disabled for other users. EXPIRY The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. </li> <li> <p>Click OK to add the Method Duration metric to your code. A  icon should appear in the left gutter of the editor, next to the code line where the action was added.</p> </li> </ol>"},{"location":"metrics/#to-insert-a-tic-toc-into-your-code","title":"To insert a Tic &amp; Toc into your code","text":"<ol> <li>Place your cursor at the code line in the code block where you'd like to insert the Tic &amp; Toc, and Right-click to open the context menu.  </li> <li>Hover over Lightrun and, from the Metrics menu, click Time measure (tictoc).        The Create Time Duration (tictoc) form should appear similar to the following image. </li> <li> <p>Complete the fields in the dialog as follows:</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. TARGETS Select your preferred action output target. You can pick either: - Stdout - Metricss are routed only to your application's standard output.- Plugin -  Metrics appear in the Lightrun Console and configured integrations.or both options at once. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. </li> <li> <p>Click Advanced, to configure the following additional fields:  </p> Fields Description IGNORE QUOTA The quota (rate limit) is configured by the agent configurations.  Only users with <code>IGNORE_QUOTA</code> role can override an agent's quota limitation, the <code>IGNORE_QUOTA</code> checkbox is disabled for other users. EXPIRY The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. </li> <li> <p>Click OK to add the Tic &amp; Toc metric to your code. A  icon should appear in the left gutter of the editor, next to the code line where the action was added.</p> </li> </ol>"},{"location":"metrics/#custom","title":"Custom Metrics","text":"<p>You can insert your own customized metrics expressions that evaluate to a long integer result.</p>"},{"location":"metrics/#to-insert-a-custom-metric-into-your-code","title":"To insert a Custom Metric into your code","text":"<ol> <li>Place your cursor at the line in your source code where you want to insert the Custom Metric, and Right-click to open the context menu</li> <li>Hover over Lightrun and, from the Metrics menu, click Custom Metric.        The Create Custom Metric dialog should appear similar to the following image. </li> <li> <p>Complete the fields in the dialog as follows:</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILENAME &amp; LINE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. TARGETS Select your preferred action output target. You can pick either: - Stdout - Metrics are routed only to your application's standard output.- Plugin -  Metrics appear in the Lightrun Console and configured integrations.or both options at once. EXPRESSION Any expression - simple or complex - that evaluates to a numerical result. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. </li> <li> <p>Click Advanced, to configure the following additional fields:</p> Fields Description IGNORE QUOTA The quota (rate limit) is configured by the agent configurations.  Only users with <code>IGNORE_QUOTA</code> role can override an agent's quota limitation, the <code>IGNORE_QUOTA</code> checkbox is disabled for other users. EXPIRY The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. </li> <li> <p>Click OK to add the Custom Metric to your code. A Custom Metric icon  should appear in the left gutter of the editor, next to the code line where the action was added.</p> </li> </ol>"},{"location":"metrics/#managing","title":"Managing metrics","text":"<p>Once you've added a metric, you can:</p> <ul> <li>Hover over a metrics icon in the editor gutter, to view summary information in a tooltip.</li> <li>Right-click any icon in the gutter to delete or view details.   </li> <li>Right-click on a metric in the editor gutter to copy and then paste the metric in the new location.</li> </ul> <p>Note</p> <p>Because a metric's state is persistent during its lifetime (including between successive runs of the applications), they cannot be edited. A configuration modification requires the creation of a new metric.</p>"},{"location":"metrics/#to-edit-metric-configuration-parameters","title":"TO EDIT METRIC CONFIGURATION PARAMETERS","text":"<p>An action that was edited is considered a new action and therefore any data collected prior to editing the action will not be included in the new action.</p> <ol> <li>Right-click the metric marker to edit the metric action.    </li> <li>Apply your changes and click Save.</li> </ol>"},{"location":"metrics/#to-copy-and-paste-metrics","title":"TO COPY AND PASTE METRICS","text":"<p>This procedure allows you to easily reuse existing Metrics in multiple locations within your code. </p> <p>Note</p> <p>Tic Toc Metric guideline: You manually need to update the Toc (end line) for Tic Toc metric when you paste the metric, as the Tic (start line) and Toc (end line) are identical.</p> <ol> <li>Go to the line in your application source code where you'd like to copy the metric.</li> <li>Click Copy to copy the metric settings.  </li> <li>Go to the line of your target source code at which you'd like to insert the copied metric, right-click and click Paste . For example, Paste Counter.        The Insert a Counter dialog opens with the copied metric settings. <li>Provide a new name for the metric and click Okay.</li>"},{"location":"metrics/#analyzing-metrics","title":"Analyzing metrics","text":"<p>Once a metric hit has been captured, you can view and analyze the captured hit in two places in your JetBrains IDE.</p> <ul> <li>Lightrun Metrics tool window</li> <li>Lightrun Console tool window</li> </ul>"},{"location":"metrics/#lightrun-metrics-toolwindow","title":"Lightrun Metrics tool window","text":"<p>The Lightrun Metrics tool window is a dedicated tool window provided by Lightrun for visualizing captured metrics hits directly in your JetBrains IDE. To open the tool window, click on Lightrun Metrics in the bottom part of your JetBrains IDE. The Lightrun Metrics tool window should appear similar to the following image.</p> <p></p> <p>See JetBrains plugin quick tour to learn more about the Lightrun Metrics tool window.</p>"},{"location":"metrics/#lightrun-console-toolwindow","title":"Lightrun Console tool window","text":"<p>Lightrun dynamic logs and metrics, by default, are printed into the application\u2019s standard output(Stdout). This process enables them to be analyzed in the context of pre-existing logs or metrics, which might provide further clues towards solving issues.</p> <p>At the same time, you can also configure your action target to Plugin. This configuration lets you view your dynamic logs and metrics output directly in your IDE through the Lightrun Console, the Lightrun Management Portal, and third-party integrated apps like Slack or Prometheus.</p>"},{"location":"metrics/#viewing-logs-and-metrics-from-the-jetbrains-lightrun-console","title":"Viewing logs and metrics from the JetBrains Lightrun Console","text":"<p>Once you've configured your action target to Plugin and added at least one dynamic log or metric to your code, the Lightrun Console should display real-time output from the added dynamic log or metric.</p> The Lightrun Console <p>See JetBrains plugin quick tour to learn more about the Lightrun Console tool window.</p>"},{"location":"metrics/#understanding-metrics-data","title":"Understanding metrics data","text":""},{"location":"metrics/#counter_1","title":"Counter","text":"<p>An example Lightrun Counter output is shown in the code sample below:</p> <pre><code>CounterData Log{counterId='9b1e6b80-b5ec-42dd-b411-28bbb3e44059', name=counter1::*, count=751, m1_rate=49.51307448246653, m5_rate=53.94779140968095, m15_rate=54.77571845490024, mean_rate=35.71689054874403}\n</code></pre> <p>The following table describes the data present in a Counter output.</p> Column Description counterId A unique identifier assigned to the counter by the system. name The counter label. count The number of times the specified code was executed (hit count). m1_rate The average amount of counter metrics hit recorded per second for one minute. m5_rate The average amount of counter metrics hit recorded per second for five minutes. m15_rate The average amount of counter metrics hit recorded per second for fifteen minutes. mean_rate The mean rate of hits recorded per second during the entire duration of the Lightrun action."},{"location":"metrics/#time-measurements","title":"Time measurements","text":"<p>An example Lightrun Time measurement output is shown in the code sample below:</p> <pre><code>TicToc Log {TicTocId='670a505f-33c1-4c8c-846b-57afaa9a236c', name='MeasurementName', count='17', max='5', min='0', mean='0.46618461992518356', stddev='1.1864864756822397'}\n</code></pre> <p>The following table describes the data present in a Time measurement output.</p> Column Description TicTocId A unique identifier assigned to the time measurement by the system. name The time measurement label. count The number of times the specified code was executed. max Maximum amount of time measured by the time measurement metric in milliseconds. min Minimum amount of time measured by the time measurement metric in milliseconds. mean Mean amount of time measured by the time measurement metric in milliseconds. stddev Standard deviation of the times recorded by the time measurement metric. <p>Note</p> <ul> <li>When you create a time measurement metric, Lightrun measures the execution time of the code you\u2019ve selected not just once but every time a thread passes through the specified code. For various reasons, like the CPU being busy with different things at a time, this often results in a slightly different execution time for each code invocation. Lightrun\u2019s time measurement metrics data includes not just one number but enough data to understand how much time is spent in that part of your code. </li> <li>Lightrun time measurement metrics output is not displayed for each invocation; instead, the recorded time measurement data is sent to your configured output target (Plugin or Stdout) every second. This ensures that the system collecting and processing the data, typically a time series database like Prometheus, will have a constant stream of data to process. This also means you\u2019ll see Time measurements data being produced regularly, even when the code isn\u2019t executed.</li> </ul>"},{"location":"minikube/","title":"Lightrun on Minikube","text":"<p>Running Lightrun on Kubernetes is generally the same as running it anywhere else.</p> <p>Since we're an application-level tool by design, Lightrun's installation happens at the application level - in the world of Kubernetes, that means that our agents are meant to be installed inside the Docker image itself and not at the orchestrator level or lower tiers of the infrastructure.</p> <p>There are 2 main methods to install Lightrun in Kubernetes:</p> <ul> <li>\"Baking\" the agent into your application's Docker images</li> <li>Using an Init Container</li> </ul> <p>The Lightrun best practice is, without a doubt, the former - adding the Lightrun agent files or using a language's package manager to install the Lightrun agents. As we're an application-level tool, it makes sense for our agents to live next to the application.</p> <p>However, it might be beneficial to show how one might instrument Lightrun inside an existing application running on Kubernetes without modifying the original image at all. This is great for experimentation purposes and allows for spinning up Lightrun quickly in an existing setting.</p> <p>In this tutorial, we will follow the full process of installing Lightrun in a simple application deployed to Minikube using an Init Container.</p> <p>Important</p> <p>minikube provides a \u201ctoy\u201d Kubernetes cluster that is not suitable for anything beyond simple experimentation.</p>"},{"location":"minikube/#prerequisites","title":"Prerequisites","text":"<p>This tutorial requires you to install Minikube on your local machine:</p> <ul> <li>Minikube</li> </ul>"},{"location":"minikube/#set-up-lightrun-to-run-in-minicube","title":"Set Up Lightrun to run in Minicube","text":"<p>As a short reminder, Minikube is a CLI tool that provisions and manages the lifecycle of single-node Kubernetes clusters running inside Virtual Machines (VM), on your local system.</p>"},{"location":"minikube/#start-a-local-kubernetes-cluster","title":"Start a local Kubernetes cluster","text":"<p>Minikube takes care of all the bootstrapping steps for you. To start a local cluster, run:</p> <pre><code>minikube start\n</code></pre> Starting Minikube <p>The initialization process takes several minutes as it retrieves any necessary dependencies and executes various container images.</p>"},{"location":"minikube/#verify-the-status-of-your-cluster","title":"Verify the status of your cluster","text":"<p>To make sure everything in Minikube works as expected, run:</p> <pre><code>minikube status\n</code></pre> <p>You should see a status message that looks similar to this one:</p> Minikube status message"},{"location":"minikube/#launch-the-minikube-dashboard","title":"Launch the Minikube dashboard","text":"<p>In another terminal, launch the dashboard: </p> <pre><code>minikube dashboard\n</code></pre> <p>The operating system's default browser opens and displays the dashboard.</p> Minikube dashboard"},{"location":"minikube/#deploy-a-sample-java-application-with-lightrun","title":"Deploy a sample Java application with Lightrun","text":"<p>The application we'll use in this tutorial is a simple prime number checker - it goes through a range of numbers, and then outputs the number of prime numbers in that range at the end of the application\u2019s run.</p> <p>Let's first containerize the application - you can get a copy of the Dockerfile here as well. Note that we have not installed the agent just yet - we'll take care of it using an Init Container later, in the deployment:</p> <pre><code>FROM openjdk:11\nWORKDIR /app\nCOPY PrimeMain.java /app\nRUN javac -g PrimeMain.java\nRUN jar --create --file /app/PrimeMain.jar --main-class PrimeMain PrimeMain.class\nENTRYPOINT [\"java\", \"-jar\"]\n</code></pre> <p>Now that we have our Dockerfile, we need to build it.</p> <p>Note that Minikube ships with its own Docker daemon, that has its image registry. We can make that registry the default by running the following command:</p> <pre><code>eval $(minikube -p minikube docker-env)\n</code></pre> <p>This will allow us to build the image locally and have it accessible to Minikube - preventing us from the need to use Docker Hub or any other external repository.</p> <p>We can now build the image and push it to the local registry:</p> <pre><code>docker build -t primeapp .\n</code></pre> <p>Let's now add your organization details as secrets - save the following file as <code>secrets.yaml</code> or download it from here:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secret\nstringData:\n  lightrun_key: &lt;LIGHTRUN_KEY&gt;\n  lightrun_company: &lt;LIGHTRUN_COMPANY_ID&gt;\n</code></pre> <p>You should have received your <code>LIGHTRUN_KEY</code> and <code>LIGHTRUN_COMPANY_ID</code> during the onboarding process. If not, you can get them again from the web console's agent setup page:</p> Get your organization details <p>Now it's time to prepare our Kubernetes deployment - save it as a file called <code>deployment.yaml</code> or download it from here:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: app\nspec:\n  replicas: 1\nselector:\n    matchLabels:\n      app: app\n  template:\n    metadata:\n      labels:\n        app: app\n    spec:\n      initContainers:\n      - name: lightrun-installer\n        image: curlimages/curl\n        env:\n        - name: LIGHTRUN_KEY\n          valueFrom:\n            secretKeyRef:\n              name: app-secret\n              key: lightrun_key\n        - name: LIGHTRUN_COMPANY\n          valueFrom:\n            secretKeyRef:\n              name: app-secret\n              key: lightrun_company\n        command: [\"/bin/sh\", \"-c\"]\nargs: [\"curl -o /tmp/deployment.sh -L https://app.lightrun.com/download/company/$LIGHTRUN_COMPANY/install-agent.sh?platform=linux; cd /tmp; sh /tmp/deployment.sh\"]\nvolumeMounts:\n        - name: init-script\n          mountPath: /tmp/\n      containers:\n      - name: app\n        image: primeapp\n        args: [\"-agentpath:/lightrun/agent/lightrun_agent.so\", \"/app/PrimeMain.jar\"]\nvolumeMounts:\n        - name: init-script\n          mountPath: /lightrun\n      volumes:\n      - name: init-script\n        emptyDir: {}\n</code></pre> <p>What happens under the hood here is that the Init container downloads the Lightrun agent and then, via the shared volume, delivers it to your main application. In addition, we're supplying a new JVM argument - <code>-agentpath</code> - to the container's entry point command to ensure the application spins up with Lightrun. </p>"},{"location":"minikube/#apply-the-resources","title":"Apply the resources","text":"<p>Finally, we can now apply both of these resources to the cluster:</p> <pre><code>kubectl apply -f secrets.yaml\nkubectl apply -f deployment.yaml\n</code></pre> <p>Once the pod has finished initialization stage, you should see it up and ready in the minikube dashboard:</p> Dashboard showing the pod <p>Check that agent was connected via the Lightrun web console:</p> Lightrun web console with the agent showing <p>And now you've got a Lightrun agent up and running! Install our plugin to get started adding Lightrun Actions to your application.</p> <p>Info</p> <p>Just a quick reminder - Init Containers could increase the time it takes your application to start. Installing Lightrun via Init Containers is acceptable for local testing, but not for production usage. You should \"bake\" the Lightrun agent into your application when preparing it for production.</p>"},{"location":"multiple-sources/","title":"Working with Multiple Sources","text":""},{"location":"multiple-sources/#overview","title":"Overview","text":"<p>Lightrun allows you to select multiple agents and tags as a single source when creating an action directly from your IDE. This option lets you simultaneously apply an action to a custom group of agents and tags.</p>"},{"location":"multiple-sources/#to-add-an-action-to-multiple-sources-in-your-jetbrains-ide","title":"TO ADD AN ACTION TO MULTIPLE SOURCES IN YOUR JETBRAINS IDE","text":"<ol> <li>Open the Insert an Action form. For instructions on how to open the Insert a Log form, see Dynamic Logs; for the Insert a metric form, see Metrics; for the Insert a Snapshot form, see Snapshot.</li> <li> <p>Click the  icon next to the SOURCE field to select your preferred condition.    </p> <p>Note</p> <p>You can select one of two conditions:</p> <ul> <li>Match Any - The action will be added to an agent if the agent is associated with any of the tags or custom sources selected in the SOURCE field.</li> <li>Match All - The action will be added to all the agents, tags, and custom sources selected in the SOURCE field.</li> </ul> </li> <li> <p>Select the agents and tags to be added in the SOURCE field.</p> </li> <li>Click Create to create the action.    The action will be added to the selected sources.</li> </ol>"},{"location":"nav/","title":"Management Portal Quick Tour","text":"<p>The Lightrun Management Portal allows all users to: </p> <ul> <li>Access instructions and commands for setting up Lightrun</li> <li>View output from the instrumentation you've added</li> <li>Manage your account </li> </ul> <p>In addition, users with <code>ROLE_MANAGER</code> permissions can: </p> <ul> <li>Manage Lightrun users, logs, services and more</li> <li>Configure PII redaction and blocklisting</li> <li>Send data to email recipients</li> </ul> <p>Once logged into your Lightrun account, you will gain access to the Getting Started page:</p> <p></p> <p>The following table describes the sections of the interface as numbered above:</p> Sections Description 1 Menu - Gain access to the data and features available in the Management Portal. 2 Invite member - Invite new users to your Lightrun organization. 3 Getting started - Instructions and code samples to help you get started quickly and easily with Lightrun. 4 Learn more - Learn more about Lightrun. 5 Account and Settings - Update your personal details, users, password, etc. <p>The following sections describes the different parts in detail: </p> <ul> <li>Menu</li> <li>Account and Settings</li> <li>Getting started</li> </ul>"},{"location":"nav/#menus","title":"Menu","text":"<p>The menu section provides access to the data and features available in the Lightrun management portal.</p> <p></p> <p>There are three main menu items.</p> <ul> <li>Data explorer</li> <li>Entities</li> <li>Integrations</li> </ul>"},{"location":"nav/#data-explorer","title":"Data explorer","text":"<p>The Data explorer menu appears similar to the following:</p> <p></p> <p>The following table describes the different options available in the Data explorer menu:</p> Item Description Logs View all active logs in the system. Snapshots View all active snapshots in the system. Exceptions View all exceptions thrown by Lightrun."},{"location":"nav/#entities","title":"Entities","text":"<p>The Entities menu appears similar to the following:</p> <p></p> <p>The following table describes the different options available in the Entities menu:</p> Item Description Agents View all active Lightrun agents. Custom Sources View and create new custom sources. Tags View all existing tags in the system. Actions View all actions for all active agents added by all users in this account."},{"location":"nav/#integrations","title":"Integrations","text":"<p>Lightrun offers integrations for multiple monitoring, alerting, and communication platforms. The Integrations menu displays the list of supported platforms and the configurations for each platform.</p>"},{"location":"nav/#account-menus","title":"Account and Settings","text":"<p>The account and settings section provides access to your personal details, and settings.</p> <p></p> <p>The following table describes the items in the account section.</p> Item Description Personal details Update your personal details, password, and log out of Lightrun. Settings Manage your users, security, notifications, and compliance."},{"location":"nav/#getting-started","title":"Getting started","text":"<p>The getting started section helps to fast-track your Lightrun installation. The section keeps track of the installation steps that you have already taken and provides instructions and code that will help you complete the remaining steps.</p> <p></p> <p>The getting started section has 3 major steps.</p> Steps Description Install the plugin in your IDE Instructions on how to install the Lightrun plugin in your IDE. Set up an agent Instructions on how to install Lightrun agent to run alongside your application to enable Lightrun realtime intrumentation. Start using Lightrun Instructions on how to create your first action."},{"location":"onprem-install-encrypted-test/","title":"[Limited Availability]Lightrun On-Premises Deployment Guide","text":"fFwUPhCu/qeXQ8MaBKP1+w==;;^ This content is available for authorized users <p>Contact Lightrun Support for access to this page!</p> <p></p>"},{"location":"persistent-volumes/","title":"Lightrun on Minikube","text":"<p>In our last tutorial, we learned how to install Lightrun in Kubernetes at the orchestrator level using an Init Container.  An <code>emptyDir</code> volume was used in the deployment, and a Lightrun agent was downloaded and supplied by the Init Container to the main application via Shared volume.</p> <p>However, using an <code>emptyDir</code> volume for Lightrun installation in a Kubernetes cluster is not always optimal. <code>emptyDir</code> volumes are the simplest types of volumes in Kubernetes; they are created when a pod is created and destroyed when it dies. To use Lightrun with <code>emptyDir</code> volume throughout your entire cluster, you will have to install Lightrun with an Init Container in every pod present in the cluster.</p> <p>In this tutorial, we will learn how to install Lightrun in Kubernetes with another type of volume called persistent volumes.  A persistent volume is a cluster-wide resource that is available to all pods present in the deployment; hence, using a persistent volume instead of an emptyDir volume makes it possible to install Lightrun with an initContainer in a single pod and make it available to every pod in your cluster. We will also demonstrate this by installing a separate Helm chart powered application into our cluster and then supplying a Lightrun agent to the application using our persistent volume resource.</p> <p>Note</p> <p>The Lightrun best practice is to install Lightrun directly inside the Docker image itself and not at the orchestrator level or lower infrastructure tiers. As we're an application-level tool, it makes sense for our agents to live next to the application.</p>"},{"location":"persistent-volumes/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>Installed Minikube on your local machine</li> <li>Started a local Kubernetes cluster</li> <li>Launched the Minikube dashboard</li> <li>Installed Helm on your local machine </li> </ul>"},{"location":"persistent-volumes/#create-a-persistentvolumeclaim","title":"Create a <code>PersistentVolumeClaim</code>","text":"<p>The first step in this tutorial will be to create our persistent volume resource. Minikube provides a default Storage Provisioner Controller, which dynamically creates a <code>PersistentVolume</code> object of type <code>hostpath</code> when we make a storage request using a <code>PersistentVolumeClaim</code>. Hence, we don\u2019t need to create a <code>PersistentVolume</code> object in this tutorial.</p> <p>To create a <code>PersistentVolumeClaim</code>, add a <code>lightrun-demo.yaml</code> file to your project with the following YAML.</p> <pre><code>kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\nname: lightrun-volumeclaim\nannotations:\nvolume.beta.kubernetes.io/storage-class: standard\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n</code></pre> <p>The <code>lightrun-demo.yaml</code> file creates a <code>PersistentVolumeClaim</code> using the Minikube dynamically provisioned storage class. Apply the claim to your cluster with the following command. </p> <pre><code>kubectl apply -f lightrun-demo.yaml\n</code></pre> <p></p> <p>Once the claim is ready, you should see it in your Minikube dashboard.</p> <p></p>"},{"location":"persistent-volumes/#deploy-your-application","title":"Deploy your Application","text":"<p>The application we'll use in this tutorial is a simple prime number checker - it goes through a range of numbers, and outputs the number of prime numbers in that range at the end of the application\u2019s run.</p> <p>The first step will be to containerize the application. You can get a copy of the Dockerfile here. Note that we have not installed the agent just yet - we'll take care of that using an Init Container later in the deployment:</p> <pre><code>FROM openjdk:11\nWORKDIR /app\nCOPY PrimeMain.java /app\nRUN javac -g PrimeMain.java\nRUN jar --create --file /app/PrimeMain.jar --main-class PrimeMain PrimeMain.class\nENTRYPOINT [\"java\", \"-jar\"]\n</code></pre> <p>Now that we have our Dockerfile, we need to build it.</p> <p>Note that Minikube ships with its own Docker daemon with its image registry. We can make that registry the default registry by running the following command:</p> <pre><code>eval $(minikube -p minikube docker-env).\n</code></pre> <p>This process will allow us to build the image locally and have it accessible to Minikube, preventing us from the need to use Docker Hub or any other external repository.</p> <p>We can now build the image and push it to the local registry:</p> <pre><code>docker build -t primeapp .\n</code></pre> <p>Let's now add your organization details as secrets - save the following file as <code>secrets.yaml</code> or download it from here:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: app-secret\nstringData:\nlightrun_key: &lt;LIGHTRUN_KEY&gt;\nlightrun_company: &lt;LIGHTRUN_COMPANY_ID&gt;\n</code></pre> <p>You should have received your <code>LIGHTRUN_KEY</code> and <code>LIGHTRUN_COMPANY_ID</code> during the onboarding process. If not, you can get them again from the web console's agent setup page:</p> Get your organization details <p>Now it's time to prepare our Kubernetes deployment - save it as a file called <code>deployment.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: app\nlabels:\napp: app\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp: app\ntemplate:\nmetadata:\nlabels:\napp: app\nspec:\nsecurityContext:\nrunAsUser: 1000\ninitContainers:\n- name: lightrun-installer\nimage: curlimages/curl\nenv:\n- name: LIGHTRUN_KEY\nvalueFrom:\nsecretKeyRef:\nname: app-secret\nkey: lightrun_key\n- name: LIGHTRUN_COMPANY\nvalueFrom:\nsecretKeyRef:\nname: app-secret\nkey: lightrun_company\ncommand: [\"/bin/sh\", \"-c\"]\nargs:\n[\n\"curl -o /tmp/deployment.sh -L https://app.lightrun.com/download/company/$LIGHTRUN_COMPANY/install-agent.sh?platform=linux; cd /tmp; sh /tmp/deployment.sh\",\n]\nvolumeMounts:\n- name: init-script\nmountPath: /tmp/\ncontainers:\n- name: app\nimage: primeapp:latest\nargs:\n[\n\"-agentpath:/lightrun/agent/lightrun_agent.so\",\n\"/app/PrimeMain.jar\",\n]\nimagePullPolicy: IfNotPresent\nvolumeMounts:\n- name: init-script\nmountPath: /lightrun\nvolumes:\n- name: init-script\npersistentVolumeClaim:\nclaimName: \"lightrun-volumeclaim\"\n</code></pre> <p>The most important part of the <code>deployment.yaml</code> file is the <code>securityContext</code> spec that is highlighted above. Applying a <code>runAsUser</code> field of 1000 ensures that for every container in the pod, all processes are run with a user ID of 1000. This helps prevent permissions issues that may arise when the containers try to access the persistent volume resource. </p> <p>Finally, we can apply both of these resources to the cluster:</p> <pre><code>kubectl apply -f secrets.yaml\nkubectl apply -f deployment.yaml\n</code></pre> <p></p> <p>Once the pod has been initialized, you should see it up and running in your Minikube dashboard:</p> <p></p> <p>Confirm that agent is connected by checking your Lightrun management portal.</p> <p></p>"},{"location":"persistent-volumes/#install-a-helm-chart-application-into-the-kubernetes-cluster","title":"Install a Helm chart application into the Kubernetes cluster","text":"<p>Similar to the last step, the first thing to do is containerize our application. The application we will be using in the step is a simple prime number app that counts all prime numbers less than 1 billion.</p> <p>Create a Dockerfile and add the following to the Dockerfile.</p> <pre><code>FROM openjdk:11\nWORKDIR /app\nCOPY PrimeMainMR.java /app\nRUN javac -g PrimeMainMR.java\nRUN jar --create --file /app/PrimeMainMR.jar --main-class PrimeMainMR PrimeMainMR.class\nENTRYPOINT [\"java\", \"-jar\"]\n</code></pre> <p>Compared to the last step, we will be deploying our application to DockerHub rather than assigning it to the Minikube image registry. First, build the docker image.</p> <p><pre><code>docker build -t helmjava .\n</code></pre> Then authenticate your docker account and push the image to DockerHub.</p> <pre><code>docker login\ndocker tag helmjava &lt;username&gt;/helmjava\ndocker push &lt;username&gt;/helmjava:latest\n</code></pre> <p><code>&lt;username&gt;</code> is your Docker account username. </p> <p>After deploying the application's image to DockerHub, the next step will be to generate a skeleton helm application.</p> <pre><code>helm create helmjava </code></pre> <p>A folder named <code>helmjava</code> will appear in your root directory. The folder file structure should appear similar to the following image.</p> <p></p> <p>Update the <code>values.yaml</code> file with the following YAML.</p> <pre><code># Default values for helmjava.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\nreplicaCount: 1\n\nimage:\n#change &lt;username to your docker username\nrepository: &lt;username&gt;/helmjava\npullPolicy: IfNotPresent\ntag: latest\nvolumeMountsName: init-script\nmountPath: /helmjava\nvolumes:\nname: init-script\nclaimName: \"lightrun-volumeclaim\"\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\n\nserviceAccount:\n# Specifies whether a service account should be created\ncreate: false\n# Annotations to add to the service account\nannotations: {}\n# The name of the service account to use.\n# If not set and create is true, a name is generated using the fullname template\nname: \"\"\n\npodAnnotations: {}\n\npodSecurityContext:\n{}\n# fsGroup: 2000\n\nsecurityContext:\n# capabilities:\n#   drop:\n#   - ALL\n# readOnlyRootFilesystem: true\n# runAsNonRoot: true\nrunAsUser: 1000\npersistence:\nenabled: false\nservice:\ntype: ClusterIP\nport: 80\n\ningress:\nenabled: false\nclassName: \"\"\nannotations:\n{}\n# kubernetes.io/ingress.class: nginx\n# kubernetes.io/tls-acme: \"true\"\nhosts:\n- host: chart-example.local\npaths:\n- path: /\npathType: ImplementationSpecific\ntls: []\n#  - secretName: chart-example-tls\n#    hosts:\n#      - chart-example.local\n\nresources:\n{}\n# We usually recommend not to specify default resources and to leave this as a conscious\n# choice for the user. This also increases chances charts run on environments with little\n# resources, such as Minikube. If you do want to specify resources, uncomment the following\n# lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n# limits:\n#   cpu: 100m\n#   memory: 128Mi\n# requests:\n#   cpu: 100m\n#   memory: 128Mi\n\nautoscaling:\nenabled: false\nminReplicas: 1\nmaxReplicas: 100\ntargetCPUUtilizationPercentage: 80\n# targetMemoryUtilizationPercentage: 80\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n</code></pre> <p>The <code>values.yaml</code> contains the default values for a chart. I have highlighted the important values for our deployment in the YAML above. The application\u2019s image details are added to the <code>image</code> key, the persistent volume details are added to the <code>volumes</code> key, and the <code>runAsUser</code> key in <code>securityContext</code> is set to 1000 - same with that of the original init container pod. </p> <p>Note that <code>persistence enabled</code> is set to <code>false</code>. Helm chart creates a persistent volume resource for all applications installed with it, and since we have an active persistent volume resource that we will like to plug in to, we will have to disable this option.</p> <p>Open the <code>templates/deployment.yaml</code> file and update the file with the following YAML.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: {{ include \"helmjava.fullname\" . }}\nlabels:\n{{- include \"helmjava.labels\" . | nindent 4 }}\nspec:\n{{- if not .Values.autoscaling.enabled }}\nreplicas: {{ .Values.replicaCount }}\n{{- end }}\nselector:\nmatchLabels:\n{{- include \"helmjava.selectorLabels\" . | nindent 6 }}\ntemplate:\nmetadata:\n{{- with .Values.podAnnotations }}\nannotations:\n{{- toYaml . | nindent 8 }}\n{{- end }}\nlabels:\n{{- include \"helmjava.selectorLabels\" . | nindent 8 }}\nspec:\n{{- with .Values.imagePullSecrets }}\nimagePullSecrets:\n{{- toYaml . | nindent 8 }}\n{{- end }}\nserviceAccountName: {{ include \"helmjava.serviceAccountName\" . }}\nsecurityContext:\n{{- toYaml .Values.securityContext | nindent 12 }}\ncontainers:\n- name: {{ .Chart.Name }}\nimage: \"{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}\"\nargs: [\"-agentpath:/helmjava/agent/lightrun_agent.so\", \"/app/PrimeMainMR.jar\"]\nimagePullPolicy: {{ .Values.image.pullPolicy }}\nvolumeMounts:\n- name: {{ .Values.image.volumeMountsName }}\nmountPath: {{ .Values.image.mountPath }}\nvolumes:\n- name: {{ .Values.volumes.name }}\npersistentVolumeClaim:\nclaimName: {{ .Values.volumes.claimName }}\n{{- with .Values.nodeSelector }}\nnodeSelector:\n{{- toYaml . | nindent 8 }}\n{{- end }}\n{{- with .Values.affinity }}\naffinity:\n{{- toYaml . | nindent 8 }}\n{{- end }}\n{{- with .Values.tolerations }}\ntolerations:\n{{- toYaml . | nindent 8 }}\n{{- end }}\n</code></pre> <p>Note that we added instructions for installing an agent with the <code>args</code> key. Please check the highlighted part of the YAML above.</p> <p>Now that we are done with the configuration, package the helm chart.</p> <p><pre><code>helm package helmjava </code></pre> Install the packaged file.</p> <pre><code>helm install helmjava helmjava-0.1.0.tgz\n</code></pre> <p>Check your Minikube dashboard to confirm if the application was installed successfully.</p> <p></p> <p>Confirm that a Lightrun agent was supplied to the Helm chart application by checking your Lightrun management portal.</p> <p></p> <p>And now you've got a Lightrun agent up and running! Install our plugin to get started adding Lightrun Actions to your application.</p>"},{"location":"plugin/","title":"Install the Lightrun plugin in your JetBrains IDE","text":"<p>To use Lightrun from your IDE, you must first install the Lightrun IDE plugin.</p> <p>Support</p> <p>Lightrun currently supports IntelliJ IDEA, PyCharm, WebStorm, Visual Studio Code (VSCode), VSCode for the web (vscode.dev), and <code>code-server</code>. Support for additional IDEs is coming soon - sign up for our beta program to learn more!</p> <p>Version Support</p> <p>The instructions below apply to JetBrains IDEs (IntelliJ IDEA, WebStorm, and PyCharm) v2022.3.0 and later. Follow the instructions here to update your JetBrains IDE.</p> <p>Lightrun supports the following installer types to cater for the different deployment environments. When you access the Management Portal, the appropriate installer type for your specific deployment is automatically displayed.</p> <ul> <li>JetBrains plugin marketplace - For SaaS customers.</li> <li>Manual Installation -  For SaaS, On-prem, and Single-tenant customers.</li> <li>Custom Plugin repository - For On-prem and Single-tenant customers.</li> </ul> <p>How can I detect my deployment environment?</p> <ul> <li>If your lightrun account is at a URL that starts with https://app.lightrun.com, then you're on Lightrun\u2019s SaaS offering, and should follow the instructions under \"Installing the Lightrun plugin from the JetBrains Plugin Marketplace\".</li> <li>If your account's URL doesn't start with https://app.lightrun.com, then see if your server offers a custom plugin repository. If it does, this will make future upgrades simpler, so we recommend you follow the instructions under \"Installing the Lightrun plugin from a custom plugin repository\".</li> <li>If your server doesn't offer a custom repository, follow the steps to install the plugin manually.</li> </ul>"},{"location":"plugin/#installing-the-lightrun-plugin-from-the-jetbrains-plugin-marketplace","title":"Installing the Lightrun plugin from the JetBrains Plugin Marketplace","text":"<ol> <li> <p>Navigate to Preferences (Mac OS) or Settings (Windows/Linux) in your JetBrains IDE.</p> <p></p> </li> <li> <p>Go to the Plugins section and select the Marketplace tab. Search for Lightrun and click Install:   </p> </li> <li> <p>When prompted, restart the IDE. After the restart, Lightrun will appear in the right-hand sidebar and you can log into it by clicking the Login button.   </p> </li> <li> <p>Once logged in, you can move on to the final step - running the Lightrun Agent with your application:</p> <p>- Java agent</p> <p>- Python agent</p> <p>- Node.js agent</p> <p>- .NET agent</p> </li> </ol>"},{"location":"plugin/#installing-the-lightrun-plugin-manually","title":"Installing the Lightrun plugin manually","text":"<p>To install the Lightrun plugin manually:</p> <ol> <li>Open a browser and log in to your Lightrun account.</li> <li> <p>Navigate to Install the Plugin in your IDE &gt; JetBrains IDE(IntelliJ IDEA, PyCharm, Rider, or WebStorm) &gt; Manual Installation.     </p> </li> <li> <p>Click Download the plugin to download the Lightrun plugin <code>.zip</code> file.</p> <p>Note</p> <p>Do not unzip the downloaded file.</p> </li> <li> <p>Navigate to Preferences (Mac OS) or Settings (Windows/Linux) in your JetBrains IDE.     </p> </li> <li> <p>Go to the Plugins section and click the cog icon .</p> </li> <li> <p>In the menu that opens, click Install Plugin from Disk, then select the <code>.zip</code> file that was downloaded in the first step.     </p> </li> <li> <p>In the window that opens, click on Restart IDE and wait for the changes to take effect.</p> </li> <li>After the IDE restarts, authenticate your plugin by clicking the Login or Register button in the plugin tool window.</li> </ol>"},{"location":"plugin/#installing-the-lightrun-plugin-from-a-custom-plugin-repository","title":"Installing the Lightrun plugin from a custom plugin repository","text":"<p>Requirements</p> <p>This installation option is only available to our single tenant and on-premise customers. For more information, please reach out to our support team.</p> <p>To install the Lightrun plugin from a custom plugin repository:</p> <ol> <li>Open a browser and log in to your Lightrun account.</li> <li>Navigate to Install the Plugin in your IDE &gt; JetBrains IDE(IntelliJ IDEA, PyCharm, Rider, or WebStorm) &gt; Custom repository Installation.</li> <li> <p>Copy the custom repository URL.     </p> </li> <li> <p>Navigate to Preferences (on Mac OS) or Settings (on Windows/Linux) in your JetBrains IDE.   </p> </li> <li> <p>Go to the Plugins section and click the cog icon .</p> </li> <li> <p>In the menu that opens, click Manage Plugin Repositories... to open the Custom Plugin Repositories dialog.     </p> </li> <li> <p>Click + in the Custom Plugin Repositories dialog and add the copied repository URL.</p> </li> <li>Click OK in the Custom Plugin Repositories dialog to save the plugin repository.</li> <li>Click OK in the Settings dialog to apply the change.</li> <li>Go back to the Plugins section and select the Marketplace tab.</li> <li> <p>Search for Lightrun and click Install on the result which includes your organization's name.     </p> </li> <li> <p>In the window that opens, click on Restart IDE and wait for the changes to take effect.</p> </li> <li>After the IDE restarts, authenticate your plugin by clicking the Login or Register button in the plugin tool window.</li> </ol>"},{"location":"scim-provisioning-azure-ad/","title":"SCIM provisioning using Azure AD","text":"<p>Lightrun supports using the open standard System for Cross-domain Identity Management (SCIM) to:</p> <ul> <li>Grant your users in your company seamless access to the Lightrun Application using their Azure credentials.</li> <li>Add, remove, and assign your users in your organization to Lightrun basic or manager roles.</li> </ul> <p>For more information, see SCIM provisioning overview.</p>"},{"location":"scim-provisioning-azure-ad/#prerequisites","title":"Prerequisites","text":"<p>To implement the Lightrun SCIM protocol, you need to be aligned with the following prerequisites.</p> <ul> <li>Lightrun supports Cross-domain Identity Management (SCIM 2.0).</li> <li>The Lightrun SCIM feature is only available to users on our Enterprise plan; please contact our Support team for more information.</li> <li>Enable SSO in the Identity Configuration page located under the Identity and Access Management tab. For more information, see SSO.</li> <li>Generate a dedicated API Key for your integration with SCIM. For more information, see Lightrun System API Keys.</li> </ul>"},{"location":"scim-provisioning-azure-ad/#set-up-scim-in-lightrun","title":"Set up SCIM in Lightrun","text":"<ol> <li>Log in to your Lightrun account.</li> <li> <p>Navigate to the Identity and Access Management section &gt; Identity Configuration &gt; Provisioning section &gt; SCIM.</p> <p></p> </li> <li> <p>To enable SCIM, click the SCIM toggle.</p> </li> <li> <p>In the SCIM page, copy and save the following URLs:</p> <ul> <li>In the API Key field, click API KEY to be routed to the API key page. You will need to generate an API Key and copy it to Azure\u2019s SCIM settings. The API Key is used for authentication and authorization between the SCIM server with and the connected Lightrun Management portal.</li> <li>In the URL from the SCIM API endpoint field, click Copy and save the URL.</li> </ul> </li> <li> <p>(Optional) Click Allow Sync Password to match the user\u2019s Active Directory (AD) password and their Azure password. </p> </li> </ol> <p>Proceed to configure Azure AD as your identity provider.</p>"},{"location":"scim-provisioning-azure-ad/#configure-scim-in-azure-ad","title":"Configure SCIM in AZURE AD","text":"<ol> <li> <p>Sign in to the Azure Portal, and click Enterprise applications in the sidebar.</p> <p></p> </li> <li> <p>Click +New Application in the top bar.</p> <p></p> </li> <li> <p>Click Create your own application.</p> </li> <li> <p>Provide a name for your <code>&lt;App-Lightrun&gt;</code> and click integrate any other application you don\u2019t find in the gallery, and click Create.</p> <p></p> <p>The newly created Lightrun App dialog opens.</p> </li> <li> <p>Click Provisioning.</p> <p></p> </li> <li> <p>In the new dialog, click Get started.</p> <p>The Provisioning page opens.</p> <p> </p> </li> <li> <p>Set  Provisioning mode to Automatic.</p> </li> <li>In the Admin Credentials section, paste the fields that you saved in the SCIM page in the Lightrun Management Portal.</li> <li>In the Tenant URL field, paste the URL you copied from Redirect URI in the SCIM page in the Lightrun Management Portal.</li> <li>In the Secret Token field, paste the SCIM token you copied from the OAuth Bearer Token in the SCIM page in your Lightrun Management Portal. </li> <li>To verify the configuration, click Test Connection.</li> <li> <p>In the Mappings section, set: </p> <ul> <li>Provision Azure Active Directory Group to No.</li> <li>Provision Azure Active Directory to Yes.  </li> </ul> </li> <li> <p>Click Provision Azure Active Directory Users, scroll down and select the Show advanced options checkbox, then click Edit attribute list for customappsso.</p> <p></p> </li> <li> <p>In the table, add the following attribute:</p> <ul> <li>Add new attribute <code>emails[type eq \"home\"].primary</code> with type boolean.</li> </ul> <p></p> </li> <li> <p>Click Save.</p> </li> <li> <p>Go back to the User mappings page and click Add New Mapping.</p> <p></p> <p>The Edit Attribute dialog opens.</p> <p></p> </li> <li> <p>Click on <code>emails[type eq \u201cwork\u201d].value</code> and change the Source attribute to userPrincipalName.</p> <p></p> </li> <li> <p>Click Ok.</p> </li> <li>Click Save.</li> <li> <p>Return to Application Overview and toggle the Provisioning Status to On.</p> <p></p> <p>The provisioning process takes a while. Wait for the process to complete.</p> </li> </ol>"},{"location":"scim-provisioning-okta/","title":"SCIM provisioning using Okta","text":"<p>Lightrun supports using the open standard System for Cross-domain Identity Management (SCIM) to:</p> <ul> <li>Grant users in your company seamless access to the Lightrun Application using their Okta credentials.</li> <li>Add, remove, and assign your users in your organization.</li> <li>Note that as of version 1.22, our support is limited to pushing new users and profile updates. We do not currently offer support for importing data (from Lightrun to Okta) or managing groups (push or import). </li> </ul> <p>For more information, see SCIM provisioning Overview.</p>"},{"location":"scim-provisioning-okta/#prerequisites","title":"Prerequisites","text":"<ul> <li>The Lightrun SCIM feature is only available to users on our Enterprise plan; please contact our Support team for more information.</li> <li>Supported from Lightrun version 1.22 and higher.</li> <li>Lightrun supports Cross-domain Identity Management (SCIM 2.0)</li> <li>Enable SSO in the Identity Configuration page located under the Identity and Access Management tab. For more information, see SSO.</li> <li>Generate a dedicated API Key for your integration with SCIM. For more information, see Lightrun System API Keys.</li> </ul>"},{"location":"scim-provisioning-okta/#set-up-scim-in-lightrun","title":"Set up SCIM in Lightrun","text":"<ol> <li>Log in to your Lightrun account.</li> <li> <p>In the Identity and Access Management tab &gt; Identity Configuration &gt; Provisioning section &gt; SCIM.</p> <p> </p> </li> <li> <p>To enable SCIM, click the SCIM toggle.</p> </li> <li> <p>In the SCIM page, copy and save the following URLs:</p> <ul> <li>In the API key field, click API KEY to be routed to the API key page. You will need to generate an API Key and copy it to Okta\u2019s SCIM settings. The API Key is used for authentication and authorization between the SCIM server with and the connected Lightrun Management portal.</li> </ul> <ul> <li>In the URL from the SCIM API endpoint field, click Copy and save the URL.</li> </ul> </li> </ol> <p>Proceed to configure SCIM in Okta.</p>"},{"location":"scim-provisioning-okta/#configure-scim-in-okta","title":"Configure SCIM in Okta","text":""},{"location":"scim-provisioning-okta/#to-configure-lightrun-scim-integration-in-okta","title":"TO CONFIGURE LIGHTRUN-SCIM INTEGRATION IN OKTA","text":"<ol> <li>In Okta, go to the Lightrun custom app in Okta located under Okta &gt; Application &gt; select lightrun's app,  and open the General tab.</li> <li>in App Settings section, click Edit in App Settings section, and then set Enable SCIM provisioning to true, and click Save.</li> <li>Go to Provisioning tab, click Edit in the SCIM Connection section, and enter the following fields:<ul> <li>For the SCIM connector base URL, paste the URL you copied from the URL from the SCIM API endpoint field in the SCIM page in your Lightrun Management Portal. </li> <li>Unique identifier field for users:  Enter userName</li> <li>Push New Users: Select the checkbox </li> <li>Push Profile Updates: Select the checkbox </li> <li>Authentication Mode: Select HTTP Header from the list</li> <li>Under HTTP Header section, in the Authorization field, paste the SCIM token you copied from OAuth Bearer Token in the SCIM page in your Lightrun Management Portal</li> </ul> </li> <li>To verify the configuration, select Test Connector Configuration.</li> <li> <p>Click Save.</p> <p>If everything was set up correctly, the success modal should appear.</p> </li> <li> <p>Click Save.</p> <p>Proceed to provision Lightrun users in Okta.</p> </li> <li> <p>Select Provisioning to App Settings.</p> </li> <li>Click Enable for these fields: <ul> <li>Create Users</li> <li>Update User Attributes</li> <li>Deactivate Users </li> </ul> </li> <li>Scroll down to the Attribute Mappings section.</li> <li> <p>Click Go to Profile Editor.</p> <p>The Profile Editor page opens.</p> </li> <li> <p>In the Lightrun to Okta User tab, change the email mapping from appuser.email to appuser.userName.</p> </li> <li> <p>In the Assignments tab, proceed to assign the Lightrun App to users.</p> <p>As the users are assigned to the Lightrun app, they will automatically be added and displayed as Read-Only in the Users Management tab under the Settings section of the Lightrun Management Portal.</p> </li> </ol>"},{"location":"scim/","title":"SCIM provisioning overview","text":"<p>Lightrun user provisioning using the System for Cross-Domain Identity Management (SCIM) protocol allows you to automatically manage and communicate user data and permissions between identity providers (IdP) like Okta or Azure AD and a service provider like Lightrun. Lightrun supports Cross-domain Identity Management (SCIM 2.0) SCIM provisioning allows Admins to manage users directly from an IdP, removing the need to manage users in both locations in parallel.</p>"},{"location":"scim/#guidelines-for-managing-users-using-scim-provisioning","title":"Guidelines for managing users using SCIM provisioning","text":"<p>The following rules and guidelines apply for managing users using SCIM:</p> <ul> <li>Only one IdM should be integrated with our SCIM.</li> <li>When you create users in SCIM, the users are displayed as read-only in the User Management tab in the Lightrun Portal.</li> <li>You cannot remove SCIM managed users from the Management Portal.</li> <li>By default, the SCIM users are added to the default Agent Pool and receive user-role permissions. </li> <li>You can assign users to different agent pools and they will inherit the roles assigned to the assigned agent pool.</li> <li>Existing Lightrun users can be migrated to SCIM by selecting the  Provision existing users with SCIM toggle in the SCIM page.</li> </ul>"},{"location":"scim/#provisioning-existing-lightrun-users-with-scim","title":"Provisioning existing Lightrun users with SCIM","text":"<p>Lightrun supports provisioning existing users through SCIM. This means you can shift the responsibility of managing your current Lightrun users to a chosen identity provider. However, it's important to ensure that these Lightrun users have been premanaged through SCIM before initiating the migration process.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Identity and Access Management tab &gt; Identity Configuration.</li> <li>The Login methods page opens.</li> <li>To enable, click SSO toggle and configure SSO as described in SSO. </li> <li>To enable, click SCIM toggle.</li> <li>Click Provision existing users with SCIM toggle.</li> <li>Click Save.    The Lightrun users are now managed from your SCIM and disabled in the Lightrun Management Portal.</li> </ol>"},{"location":"scim/#set-up-provisioning","title":"Set up provisioning","text":"<p>Your SCIM provisioning setup will vary depending on the identity provider you use.</p>"},{"location":"scim/#prerequisite","title":"Prerequisite","text":"<p>Enable SSO in the Identity Configuration page located under the Identity and Access Management tab. For more information, see SSO.</p> <p>We support setting up SCIM with the following IdPs:</p> <ul> <li>SCIM Provisiong using Okta</li> <li>SCIM Provisioning using Azure AD</li> </ul>"},{"location":"service-configuration/","title":"Manage services","text":"<p>You can manage certain service configurations for your developers directly from the Management Portal.</p> <p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Tip</p> <p>You can also manage many of these properties and others directly from the agent.config file or from the terminal.</p>"},{"location":"service-configuration/#to-manage-your-service-configurations","title":"To manage your service configurations","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li>Select Service configuration under Compliance in the Settings dashboard sidebar.</li> </ol> <p>The following table describes the services and actions you can perform from this page: </p> Option Type/unit Default Description Clear Agent History Button Clears all agent activity from the cache. Agents Detached (applies on save) Toggle Shuts all agents down when enabled. Agent Expiration [sec] Seconds 30 This is the time it takes for the server to delete inactive agents Log Data Expiration [sec] Seconds 10000 Log data older than this is deleted Snapshot Expiration [sec] Seconds 60 Snapshot data older than this is deleted TicToc Data Expiration [sec] Seconds 300 TicToc data older than this is deleted Counter Data Expiration [sec] Seconds 300 Counter data older than this is deleted Min Action TTL [sec] Seconds 60 Minimum time you can set for action TTL Max Snapshot Count Hits 50 Maximum hit count value you can set for snapshots Min Snapshot Count Hits 1 Minimum hit count value you can set for snapshots. Custom Metric Data Expiration [sec] Seconds 300 Recommended agent key rotation age [days] Days 90 Set a time frame after which an indication signifying the need for key rotation is added to an agent key.  The text color of an agent key age changes to red after the key age passes the Recommended agent key rotation age period. Source Version Warnings Enabled Toogle Enabled Disable source version warnings. Plugin Send Source Full Path Toggle Enabled Send filename full path to Lightrun plugin. Expose action output to Lightrun Toggle Enabled Display action results via your application's standard output only or Display action results in Lightrun Plugins and integrations.  Note - disabling this feature will limit your available action types to Logs and Metrics only."},{"location":"slack-alerts-overview-configuration/","title":"Lightrun Alerts with Slack Overview","text":"<p>There is a large amount of application-level information that can be hard to acquire in real-time. Lightrun logs, snapshots and metrics are - by design - pieces of real-time, code-level information that can shed a light on what's happening inside your production machines, without the need to redeploy a version with more or better logging.</p> <p>While receiving the information immediately might be desirable for some cases, there are many occasions where you don't know when a specific code path will be reached. In those cases, it might be useful to place the Lightrun Action, and then get an alert when it is \"hit\" (i.e. when the information is available).</p> <p>To answer this need, Lightrun Management Servers (including the Lightrun SaaS) offer a built-in Slack integration.</p>"},{"location":"slack-alerts-overview-configuration/#configuration","title":"Configuration","text":"<p>The Lightrun Managemnet Server (including the SaaS version) comes with the Slack integration disabled by default. In order to enable it, visit the System Integrations page (available under the Manager menu for users with the role of Manager and above), and click \"connect\":</p> <p></p> <p>In the menu that opens, follow the instructions to add an incoming webhook for your Slack workspace:</p> <p></p> <p>And you should be good to go!</p>"},{"location":"slack-alerts-overview-configuration/#a-note-about-slack-channels","title":"A note about Slack channels","text":"<p>There is no restriction on the type of channel you use to receive Lightrun Slack alerts in:</p> <ul> <li>It can be a channel you created specifically Lightrun alerts</li> <li>It can be an existing channel with existing conversations and/or other bots</li> <li>It can be a public channel</li> <li>Or it can be a private channel</li> </ul> <p>The only requirement is that it exists when you set up the integration.</p>"},{"location":"slack-alerts-use-cases/","title":"Lightrun Alerts with Slack use cases","text":"<p>The following use cases for Lightrun alerts are not intended to be exhaustive. However, they should serve as a convenient starting point when investigating whether Lightrun alerts are right for you. If you have more ideas for use cases, feel free to contact Lightrun Support at email.</p>"},{"location":"slack-alerts-use-cases/#edge-cases-and-rarely-occurring-bugs","title":"Edge cases and rarely occurring bugs","text":"<p>In many reasonably large applications, there are specific, hidden corners where things can fail in extraordinary ways. For instance, calls to external APIs that are unreliable, underlying infrastructure problems that your tests don't account for, and various delays and timeouts resulting from running your application in the wild and not on your local machine or staging environment.</p> <p>By placing conditional Lightrun Logs and Snapshots at strategic locations in the code, then connecting the Lightrun Slack integration to a dedicated channel, you can \"catch\" bugs in real time and observe the situation with full contextual information - including the structure and contents of every object across all the relevant frames.</p>"},{"location":"slack-alerts-use-cases/#developer-friendly-investigation","title":"Developer-friendly investigation","text":"<p>When setting an alert, based on some sort of metric, it is common practice to define a threshold - an upper limit above which the alert is triggered. In most cases this is sufficient - you want to know when something bad happens and fix it then and there.</p> <p>However, in most cases there isn't a straightforward way to code business logic into the alerts, which means the only way to get a clear picture of what's happening inside the application is to look at the application logs. If the logs aren't telling the full story when the alert is triggered, developers are forced to deploy hotfixes, with more logs, to better understand what's going on inside the system.</p> <p>With Lightrun, you can define highly granular and informative alerts, providing details about the global state of the application, the values of different variables, and, allowing you to define the exact data objects you want to extract from the application. This is a familiar and comfortable way for developers to conduct investigations, resulting in a more streamlined and intuitive approach to incident resolution.</p>"},{"location":"slack-alerts-use-cases/#following-long-running-jobs","title":"Following long-running jobs","text":"<p>Some code paths take a long time to complete. These include batch jobs, data workers, and various intensive computation tasks that starve system resources, while you wait for their completion.</p> <p>In such cases, it is useful to be able to track the code path as the application executes. With Lightrun, you can place logs at various places in the running code and get alerted in real time when log points are reached. This allows you to follow the code path, without adding new logs or configuring alerts inside your APM.</p>"},{"location":"snapshots-plugin/","title":"Snapshots","text":""},{"location":"snapshots-plugin/#overview","title":"Overview","text":"<p>A snapshot is a one-time \"breakpoint\" that doesn't block your code from running. As opposed to a traditional breakpoint, snapshots collect the stack trace and variables without interrupting the application at all.</p> <p>From your JetBrains IDE, you can:</p> <ul> <li>To add a snapshot</li> <li>To view snapshot data</li> <li>To edit and delete a snapshot</li> <li>To copy and paste a Lightrun snapshot</li> </ul> <p>Prerequisites</p> <p>To use the plugin, make sure you have:</p> <ol> <li>Installed the plugin in your local IntelliJ instance.</li> <li>Authenticated IntelliJ with your Lightrun account.</li> <li>Attached at least one agent to your app.</li> <li>Opened the source code file for the running application from the IDE.    </li> </ol>"},{"location":"snapshots-plugin/#add","title":"To add a snapshot","text":"<ol> <li> <p>Go to the line of your source code at which you'd like to insert the snapshot.</p> </li> <li> <p>Right-click to open the context menu:  </p> <p></p> </li> <li> <p>Select Snapshot:</p> <p>The Create Snapshot dialog should appear similar to the following image. </p> <p></p> <p>The following table describes the present fields.</p> Field Description Source From the available options in the dropdown list, bind the action to a specific agent, tag, or custom source. Click Create Custom Source to create a new custom source. Filename &amp; Line The source code file and line of code into which you're inserting the snapshot. The default path is to the source code file from which you're currently working. Expression Variables or method results to be displayed in the snapshot stack trace. Click + to enter additional expressions. Condition The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. Max Hit Count the maximum number of times the snapshot should be taken during the lifetime of the action; default == 1. </li> <li> <p>Click Advanced to configure the following additional fields:</p> Field Description Ignore quotas The maximum number of times the snapshot should be taken during the lifetime of the action; default == 1. Expiry The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. </li> <li> <p>Click Save to add the snapshot.</p> <p>A snapshot marker  should appear next to the selected code line in your Jetbrains code editor.</p> </li> </ol> <p>Once a snapshot hit has been captured, you will be notified directly in your IDE. </p> <p></p>"},{"location":"snapshots-plugin/#view","title":"To view snapshot data","text":"<p>Once a snapshot hit has been captured, you can view the snapshot data directly in your IDE or in the Lightrun management portal in your browser. Click here for more information on how to view your snapshot data in the Lightrun management portal.</p> <p>To view snapshot data in your IDE, click on the snapshot marker  to open the Lightrun Snapshot window or click on Lightrun Snapshots in the bottom part of your IDE.</p> <p>The Lightrun Snapshot tool window should appear similar to the following image.</p> <p></p> <p>Click on a snapshot to populate the Captured Hits, Frames, and Variables section with its data. </p> <p></p> <p>See JetBrains plugin quick tour to learn more about the Lightrun Snapshot tool window.</p>"},{"location":"snapshots-plugin/#edit","title":"To edit and delete a snapshot","text":"<ol> <li>Right-click on the snapshot marker  on the snapshot code line.</li> <li>Click Delete to delete the snapshot.</li> <li>Click Edit to edit the snapshot configuration.</li> </ol>"},{"location":"snapshots-plugin/#copy","title":"To copy and paste a Lightrun snapshot","text":"<p>This procedure allows you to easily reuse existing snapshots in multiple locations within your code.  Note that the snapshot is saved in the clipboard and can be pasted multiple times.</p> <ol> <li>Right-click on the snapshot marker  on the snapshot code line that you would like to copy.</li> <li> <p>Click Copy to copy the snapshot settings.</p> <p></p> <p>The Insert a Counter window opens with the copied metrics.</p> </li> <li> <p>Update with a new counter name and click OK.</p> </li> <li> <p>Go to the line of your target source code at which you'd like to insert the copied snapshot, right-click and click Paste Snapshot.</p> <p></p> </li> </ol>"},{"location":"snapshots/","title":"Snapshot data","text":"<p>As your team works with Lightrun, they can dynamically insert snapshots to track information based on a variety of conditions.</p> <p>Once a snapshot is inserted into the application, the stacktrace can be viewed from the IDE and from the Lightrun app in your browser. You can learn more about Lightrun Snapshots here.</p>"},{"location":"snapshots/#to-view-snapshot-data-in-your-management-portal","title":"To view snapshot data in your Management Portal","text":"<ol> <li>Log in to your Lightrun account</li> <li>Navigate to Data explorer</li> <li>Select Snapshots</li> </ol> <p>The Snapshot screen loads and appears similar to the following:  The screen is divided into two tables as follows:</p> <ul> <li>A list of snapshots and their creation details appears at the top</li> <li>Stacktrace details</li> </ul> <p>The following table describes the data available in the first table: </p> Column Description No The unique identifier assigned to the snapshot by the system CREATE TIME The time at which the snapshot was created CAPTURE TIME The time at which the snapshot was actually taken. AGENT The agent or tag to which the snapshot was attached. USER The user who inserted the snapshot. ENTRY POINT The line of code at which the snapshot was inserted. CONDITION If relevant, displays the condition that was used for the snapshot. <p>Click on a snapshot to view the stacktrace data in the Stacktrace details table. </p> <p></p> <p>The following table describes the data present in the Stacktrace details table:</p> Column Description FRAMES Each frame represents a single snapshot. VARIABLES Displays all related details for the selection in the Frame column."},{"location":"sso-login/","title":"Log in to Lightrun using Single Sign-On (SSO)","text":"<p>Lightrun allows organizations to manage their employees' access to Lightrun with an external Identity Provider (IDP) like Okta, Azure AD, using the Single Sign-On (SSO) feature. For more information on configuring SSO, supported SSO protocols, accepted IDP providers, and what to expect after configuring SSO for your organization, see SSO Overview.</p>"},{"location":"sso-login/#to-log-in-to-your-lightrun-account-with-sso","title":"TO LOG IN TO YOUR LIGHTRUN ACCOUNT WITH SSO","text":"<ol> <li>Navigate to the Lightrun Management Portal login page.     </li> <li>Click the Single Sign-On button to open the Single Sign-On page.</li> <li>Enter your email address and click Log in.        A login link will be sent to your email address.</li> <li>Click the link to redirect to your organization's configured IDP provider to authenticate your Lightrun account.</li> </ol>"},{"location":"sso-saml/","title":"Configure SAML SSO using Okta for your Organization","text":""},{"location":"sso-saml/#overview","title":"Overview","text":"<p>Lightrun offers support for Single Sign-On (SSO) using Okta as the identity provider (IdP) by integrating Lightrun with the SAML 2.0 integration in Okta.</p> <p>Using SAML, Lightrun functions as a service provider, receiving user authentication information from Okta, which serves as the external identity provider. When SSO is enabled, Lightrun is no longer responsible for user authentication, but still manages the redirection of login requests to the identity provider and verifies the integrity of the response from the identity provider.</p>"},{"location":"sso-saml/#terminology","title":"Terminology","text":"<ul> <li>Identity Provider (IdP): A service that manages user accounts, providing authentication services to applications. Lightrun supports Okta for this purpose.</li> <li>Service Provider: The website that hosts apps. In our case, it is Lightrun.</li> <li>Service Provider Entity UID: The URL is used to uniquely identify your service provider and is generated in the SSO page in the Lightrun Management Portal.</li> <li>Single Sign on URL: This endpoint URL is generated in the SSO page in the Lightrun Management Portal.</li> <li>Single Sign on Service URL: The URL is used for sending authentication requests (<code>SAMLAuthnRequest</code>) and is generated in Okta.</li> </ul> <p>The process of setting up SSO involves these main stages:</p> <ol> <li>Setting up the Lightrun-SAML integration in Okta. </li> <li>Configuring and enabling SSO in the Lightrun Management Portal.</li> </ol>"},{"location":"sso-saml/#set-up-lightrun-saml-integration-in-okta","title":"Set up Lightrun SAML integration in Okta","text":"<p>Setting up the Lightrun integration in Okta includes these main steps.</p>"},{"location":"sso-saml/#step-1-copy-urls-in-lightrun-management-portal","title":"STEP 1: COPY URLS in lightrun management portal","text":"<ol> <li>Log in to your Lightrun account.</li> <li>In the Identity and Access Management tab &gt; Identity Configuration &gt; Provisioning.</li> <li>To enable SSO, click the SSO toggle.</li> <li>Click Okta as your Identity Provider.</li> <li> <p>From the Single sign on URL field, click Copy. </p> <p>This field will serve as the redirect URL used when configuring the identity provider.</p> </li> <li> <p>From the Service Provider entity ID field, click Copy. This field will serve as the unique identification of the SAML Service provider.</p> </li> </ol>"},{"location":"sso-saml/#step-2-set-up-lightrun-saml-integration-in-okta","title":"STEP 2: SET UP LIGHTRUN SAML INTEGRATION IN OKTA","text":"<ol> <li>Sign in to Okta.</li> <li>In the Administration console, click the Application tab.</li> <li> <p>Click Create App Integration, and select SAML 2.0, and click Next.</p> <p>The Create Lightrun-SAML Integration page opens.</p> </li> <li> <p>Click on the General Settings tab.</p> </li> <li>In the App name field, provide a name for the integration. For example, <code>&lt;lightrun-app&gt;</code> and click Next.</li> <li> <p>Proceed to the Configure SAML tab.</p> <p>The SAML Setting window opens.</p> </li> <li> <p>In the Single sign-on URL field, paste the URL you copied from the Single sign on URL field within the SSO page in the Lightrun Management Portal.</p> </li> <li>In the Audience URI (SP Entity ID) field, paste the URL you copied from the Service provider entity ID field.</li> <li>In the Name ID format field, select EmailAddress from the list.</li> <li>In the Application username field, select Email from the list.</li> <li>Click Next.</li> <li>Fill in the feedback form, and click Finish.</li> </ol>"},{"location":"sso-saml/#set-up-sso-in-lightrun","title":"Set up SSO in Lightrun","text":""},{"location":"sso-saml/#step-1-copy-urls-in-okta","title":"STEP 1: COPY URLS in OKTA","text":"<ol> <li>In Okta, access your <code>&lt;lightrun app&gt;</code> that you configured in the previous stage. </li> <li>Access the SSO tab, and copy the Sign-On URL. This URL will need to be pasted in the SSO page in the Lightrun Management Portal.</li> </ol>"},{"location":"sso-saml/#step-2-configure-and-enable-sso-in-the-lightrun","title":"Step 2: CONFIGURE and Enable SSO IN THE LIGHTRUN","text":"<p>Setting up the SSO in the Lightrun Management Portal includes these main steps.</p> <ol> <li>Log in to your Lightrun account.</li> <li> <p>Click Settings on the top right-hand side of your screen to navigate to the Identity and Access Management tab &gt; Identity Configuration &gt; Login methods &gt; Provisioning section.</p> <p></p> </li> <li> <p>To enable SSO, click the SSO toggle.</p> </li> <li>Ensure that your external Identity Provider (IdP) is set to Okta. </li> <li>In the Single Sign On Service URL field, paste the Sign-On URL you copied in the Copy URLs in Okta step, which is used to send authentication requests (<code>SAMLAuthnRequest</code>).</li> <li>Click Save.</li> </ol>"},{"location":"sso-saml/#further-reading","title":"Further Reading","text":"<ul> <li>Single Sign-On Overview</li> <li>Log in to the Lightrun Management Portal using SSO</li> </ul>"},{"location":"sso/","title":"Lightrun Single Sign-On (SSO)","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Lightrun supports Single Sign-On (SSO) with SAML, enabling members of your organization to log in to Lightrun using their credentials stored in your organization\u2019s Okta or Azure AD Identity Providers (IdPs).</p> <p>Enabling Single Sign-On (SSO) in Lightrun streamlines the login process and minimizes the administrative burden of handling numerous user accounts and passwords across various applications. SSO enhances security by consolidating access through a unified interface with a single set of credentials.</p>"},{"location":"sso/#how-does-sso-work-in-lightrun","title":"How does SSO work in Lightrun?","text":"<p>The authentication between Lightrun (the Service Provider) and Okta or Azure AD (the Identity Providers) is as follows:</p> <ol> <li>The user browses to the Lightrun Management Portal URL.</li> <li>Lightrun transmits a token that includes specific user information, such as their email address, to Okta or Azure AD, the IdPs, as part of a request to authenticate the user.</li> <li>The IdP parses the SAML request and authenticates the user.</li> <li>The IdP then generates a SAML response, which it sends back to Lightrun.</li> <li>Lightrun, in turn, parses the SAML response, extracting the details to establish the user\u2019s access appropriately.</li> </ol>"},{"location":"sso/#lightrun-sso-supported-deployments","title":"Lightrun SSO supported deployments","text":"<p>Lightrun supports the following SSO deployment types:</p> <ul> <li>SSO using Okta: This option is solely for authentication purposes. It allows users within the organization to securely access Lightrun using a single set of credentials.</li> </ul> <ul> <li>SSO with SCIM Provisioning: This option allows administrators to efficiently manage users from within Okta or Azure AD, eliminating the need to handle user management in both locations simultaneously.</li> </ul>"},{"location":"sso/#get-started-with-sso","title":"Get Started with SSO","text":"<p>To begin working with SSO in Lightrun, read the following:</p> <ul> <li>Set up SSO with SAML in Okta</li> <li>Log in to the Lightrun Management Portal using SSO</li> </ul>"},{"location":"team-actions/","title":"Manage team actions","text":"<p>Every time a user inserts an action (Logs, Snapshot, Metric, Counter, Duration) directly from their IDE plugin or the CLI, that action is stored and can be managed from the Management Portal by all users on the account.</p>"},{"location":"team-actions/#to-view-your-action-details-from-the-management-portal","title":"To view your action details from the Management Portal","text":"<ol> <li>Log in to your Lightrun account</li> <li>Navigate to Entities</li> <li>Select Actions</li> </ol> <p>The Actions screen loads and appears similar to the following:</p> <p></p> <p>The following table describes the present data: </p> Column Description ID The unique ID assigned to this action by the system. CREATE TIME The timestamp for when the action was added to the code. UPDATE TIME The timestamp for the last time changes were made to this action. ACTION TYPE The type of action. Can be: CAPTURE (snapshot), TICTOC, LOG, COUNTER, SET_VALUE, CUSTOM_METRIC. CONDITION The condition configured for this action. FILE NAME The name of the file where this action was inserted. LINE # The line number in the file where this action was inserted. ERROR MESSAGES All error messages on the action whenever there is an error preventing the action from running or from running correctly. AGENT ID The ID of the agent or the name of the tag to which the action is attached. OWNER USER The name of the user who added this action. <p>Click Delete on the last column of an action row to delete the action.</p>"},{"location":"usage-dashboard/","title":"Gain insights with the Lightrun Usage dashboard","text":"<p>Permissmions</p> <p>This feature is available for USER_MANAGER users only.</p> <p>Note</p> <p>The Usage Dashboard is under limited availability.  Please contact us to inquire about access.</p> <p>The Usage Dashboard in the Lightrun Management Portal offers valuable insights into your Lightrun agent usage within your organization. This information keeps you informed about your agent consumption, allowing you to optimize usage and plan accordingly for future rollouts.</p> <p>As you can see in the following dashboard example, the current Lightrun agent count is 27 out of 1000 available agents in your organization. The stats are updated every 5 minutes. In the Agents Over Time graph, there are two peaks of usage on June 19 and around June 23. You can change the date range or select a predefined period: Daily, Weekly, or Monthly.</p> <p></p> <p>The different areas of the dashboard are described in the following sections.</p>"},{"location":"usage-dashboard/#view-agent-related-data","title":"View Agent-related data","text":"<p>To view the Usage Dashboard, log in to the Lightrun Management Portal and from Organization Settings, click Usage Dashboard.</p> <p>From Lightrun version 1.36, the following insights are available:</p> <ul> <li>Latest Agent Count</li> <li>Agents Over Time view: Track agent usage over time.</li> </ul>"},{"location":"usage-dashboard/#track-latest-agent-count","title":"Track Latest Agent Count","text":"<p>The Track Latest Agent count bar provides information regarding the number of active agents in your organization.</p>"},{"location":"usage-dashboard/#view-agents-over-time-trend","title":"View Agents Over Time trend","text":"<p>The Agents Over Time trend provides a graph representing the top 95th percentile of active agents in the organization over a period of time. You can apply these filters to gain different insights:</p> <ul> <li>Date Range: Select a to-and-from date range.</li> <li>Predefined Date Range: Select a time date interval: Daily, Weekly, or Monthly.</li> </ul>"},{"location":"usage-dashboard/#download-agents-over-time-report-as-csv","title":"Download Agents Over Time report as CSV","text":"<ol> <li>Log in to the Lightrun Management Portal and from Organization Settings, click Usage Dashboard.</li> <li>In the Agent Over Time section, set the time range and click Download as CSV.     The file is downloaded to your local drive in a CSV format as displayed in the following example. </li> </ol>"},{"location":"useradmin/","title":"Lightrun Manager Overview","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Lightrun administrators are assigned the Manager role. When logged in as a manager, you can:</p> <ul> <li>Manage users</li> </ul> <ul> <li>Audit use of Lightrun</li> </ul> <ul> <li>Invite new users</li> </ul> <ul> <li>Manage integrations</li> </ul> <ul> <li>Entities - from which you can gain insights about actions, currently connected agents, dynamic logs and tags (described in Data Management)</li> </ul> <ul> <li>Manage agents and services</li> </ul> <ul> <li>Collect Lightrun agent logs for troubleshooting</li> </ul>"},{"location":"view-agents/","title":"Agents","text":"<p>Whenever a Lightrun agent is active, you can view its details directly from the Management Portal.</p>"},{"location":"view-agents/#to-view-agents-from-the-management-portal","title":"To view agents from the Management Portal","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Navigate to Entities.</li> <li>Select Agents.</li> </ol> <p>The Agents screen loads and appears similar to the following: </p> <p></p> <p>The following table describes the present data: </p> Column Description NAME The name of the server on which the agent is running. TAGS Tags attached to this agent. ENVIRONMENT The application environment. START TIME The time at which the agent was started. UPDATE TIME The last time the agent fetched actions from the server. ID The unique agent ID. API VERSION The Lightrun API version currently implemented. AGENT VERSION The Lightrun Aagent version currently implemented. ROUTING The current configuration for log piping."},{"location":"view-logs/","title":"Dynamic logs","text":"<p>Lightrun makes it possible to insert dynamic logs into your application during runtime and view the Log output immediately without stopping the running code. The inserted log outputs are printed to the agent\u2019s standard output, for example, java.util.logging logger for Java outputs.</p> <p>All relevant information from any logs that are added to your applications appears directly in the developers' consoles, in the Management Portal, or both. These logs are very useful for troubleshooting and resolving issues in live code. You can learn more about Lightrun dynamic logs here.</p> <p>Important</p> <p>To view logs from the Management Portal, first ensure you've configured piping from your plugin. Only data that has been configured to pipe to the Management Portal or to the Management Portal and IDE appear in the Portal.</p> <ul> <li>Visit here for information on how to configure piping for the Jetbrains plugin. </li> <li>Visit here for information on how to configure piping for the VScode plugin.</li> </ul> <p>Note</p> <p>Logs are sent from the agent to the plugin via the Lightrun management server. As this process is batched, logs may appear with a slight delay.</p>"},{"location":"view-logs/#to-view-log-data-in-your-management-portal","title":"To view log data in your Management Portal","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Navigate to Data explorer.</li> <li>Select Logs.</li> </ol> <p>The Log screen loads and appears similar to the following: </p> <p></p> <p>The following table describes the present data:</p> Column Description AGENT ID The unique identifier assigned to the agent by the system TIMESTAMP The time at which the log was created LEVEL The severity level of the log; this is configured per log when inserted in the code INFO The formatted text configured when the log is inserted and any relevant errors"},{"location":"webhooks/","title":"Webhooks","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Note</p> <p>The Runtime Reachability Assessment feature is under limited availablity. Please contact us to gain access to this feature.</p> <p>From version 1.36, Lightrun supports webhooks. A webhook is an automated notification system that sends event details to a specified URL when triggered by predefined events. The payload comprises of three key elements: the event trigger, the payload containing event information, and the URL to receive the event.</p> <p>Webhooks are configured within the Lightrun Management Portal to facilitate notifications when packages are loaded during runtime. By leveraging webhooks, you can seamlessly integrate Lightrun processes with third-party applications, such as Slack. For instance, if a package containing a potential (CVE) is detected within your runtime application, you'll promptly receive a notification.</p>"},{"location":"webhooks/#how-does-it-work","title":"How does it work?","text":"<p>Lightrun supports custom webhooks, allowing you to customize the HTTP request headers and payload. This customization enables seamless integration with various target services, including Datadog, Slack, and email. </p>"},{"location":"webhooks/#variables","title":"Webhook payloads and built-in variables","text":"<p>As part of setting up your webhook in Lightrun, you can set up a webhook payload. It refers to the data that is sent from Lightrun, the webhook provider, to the specified URL when a webhook event is triggered. This payload contains information relevant to the event that occurred, such as details about the event itself or any associated data. In the context of Lightrun, the webhook payload might include information about a loaded package event, CVE information or other relevant data related to the Lightrun feature being used.</p> <p>When you add a webhook, you can customize the default payload template using variables or you can use the default payload template that we provide in JSON format. The following example shows the default template as a text file that will be sent.</p> <pre><code>{\n\"id\": \"${ID}\",\n\"date\": \"${DATE}\",\n\"type\": \"${TYPE}\",\n\"title\": \"${TITLE}\",\n\"event_msg\": \"${EVENT_MSG}\"\n}\n</code></pre> <p>For the Lightrun Reachability feature, we provide this dedicated payload example that you can customize for your needs directly in the UI.</p>"},{"location":"webhooks/#example-setting-a-slack-payload-for-a-webhook","title":"Example: Setting a Slack payload for a webhook","text":"<p>For the Runtime Reachability feature, we provide this dedicated payload example that is set for a Slack webhook. The provided JSON payload illustrates how to format data for various parameters such as ID, date, type, title, and event message.</p> <pre><code>{\n\"text\": \"{\\n \\\"id\\\": \\\"${ID}\\\",\\n \\\"date\\\": \\\"${DATE}\\\",\\n \\\"type\\\": \\\"${TYPE}\\\",\n\\n \\\"title\\\": \\\"${TITLE}\\\",\\n \\\"event_msg\\\": \\\"${EVENT_MSG}\\\"\\n}\"\n}\n</code></pre>"},{"location":"webhooks/#create-a-webhook","title":"Create a webhook","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Under the Runtime Reachability section, select Webhooks.</p> <p>The Webhooks page opens.</p> <p></p> </li> <li> <p>Click the Create new webhook button.</p> <p>The Create a webhook page opens.</p> <p></p> </li> <li> <p>Enter a unique Name for your webhook.</p> </li> <li>Enter the Webhook URL where you would like to receive payloads.    Lightrun sends an HTTP Post to this URL.    The HTTP header is preset to <code>content-type-application/json</code>, specifying the way the payloads will be delivered via HTTP requests is in JSON format. </li> <li> <p>Click the Payload Properties tab.    In the text input area, you have the variables to set for the payloads. The payloads variables are delivered in a JSON format (<code>application/json</code>). </p> <p>To learn more about setting the Payload properties, see Webhooks payloads and variables.</p> <p>To use your webhook, insert the following code snippet into the text of the alert you wish to trigger along with your customized description: <code>\"event_msg\": \"$[EVENT_MSG]\"</code>.   When this alert is triggered, it will initiate a POST request to the designated URL with the provided content in JSON format. </p> </li> <li> <p>Click Create to save the webhook.</p> </li> </ol>"},{"location":"webhooks/#delete-a-webhook","title":"Delete a webhook","text":"<p>Important</p> <p>Deleting a webhook will also remove all the notifications that are associated with it.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li>Under the Runtime Reachability section, select Webhooks.</li> <li> <p>In the Webhooks list, click on the webhook.</p> <p>The webhooks details dialog opens.</p> <p></p> </li> <li> <p>Click Delete Webhook and Done.</p> <p>The webhook will be removed from the list.</p> </li> </ol>"},{"location":"webhooks/#next-steps","title":"Next steps","text":"<p>Set up notifications for loaded packages.</p>"},{"location":"actions/custom-sources/","title":"Lightrun Custom Sources","text":"<p>A Custom Source is a dynamic group of agents and tags defined by a set of conditions, like a shared hostname or tag. Using Custom sources, you can simultaneously apply an action to multiple agents and tags without editing your agent configuration or restarting your server. </p>"},{"location":"actions/custom-sources/#differences-between-agents-tags-and-custom-sources","title":"Differences between Agents, Tags, and Custom Sources.","text":"Agents Tags Custom Sources Agents are the core of the Lightrun platform.  Lightrun agents run alongside your application and insert Lightrun actions(Logs, Metrics, and Snapshot) added through Lightrun IDE plugins into the application at runtime. Tagging allows you to group agents using a meaningful name, typically based on a common functionality. Custom Source is a dynamic group of agents and tags defined by a chosen set of conditions, like a shared property (tag or hostname). When you insert a Lightrun action (dynamic log, snapshot, and metrics) into an agent, the action is tied to the agent's lifetime. Once the agent stops running, the action is deleted. When you add an action to a tag, the action outlives any individual agent.  The action is tied to the tag, and as agents come and go, they pick up the actions assigned to the tag. Depending on the custom source conditions, a dynamic list of agents and tags is created when you create a custom source. Lightrun actions added to a custom source are simultaneously applied to every agent and tag in the list."},{"location":"actions/custom-sources/#custom-source-conditions","title":"Custom Source conditions","text":"<p>Custom Source conditions dynamically add the relevant agents and/or tags to a Custom Source.  You can create a set of conditions based on two properties.</p> <ul> <li>Tag</li> <li>Agent Name</li> </ul> <p>You can also set the conditions to Match any or Match all. </p> Match any Match all An agent or tag will be added to a Custom Source if it meets any of the conditions specified in the custom source. An agent or tag will only be added to a Custom Source if it meets every condition specified in the custom source. <p>For example, the following conditions will only add agents in the <code>Production</code> tag that have <code>Air</code> in their naming to the Custom Source.</p> <p></p> <p>And the following conditions will add every agent with the <code>Production</code> tag or <code>Air</code> in their naming to the Custom Source.</p> <p></p>"},{"location":"actions/custom-sources/#get-started-with-custom-sources","title":"Get Started with Custom Sources","text":"<ul> <li>Learn how to create and manage Custom Sources in your Lightrun Management Portal.</li> </ul>"},{"location":"actions/dynamic-logs/","title":"Dynamic Logs","text":"<p>When adding Lightrun dynamic logs, it is not required to relaunch the application or release a separate version for debugging. Lightrun logs are added dynamically during runtime, and the log output is visible immediately following insertion in the running code.</p> <p>Once a Lightrun dynamic log has been inserted into an application, its output is printed to the agent\u2019s standard output, for example, in Java the output is printed to the standard logging framework by the java.util.logging logger. This enables you to view Lightrun logs in the context of pre-existing log statements, which might provide further clues towards investigating and solving issues.</p>"},{"location":"actions/dynamic-logs/#typical-use-cases","title":"Typical use cases","text":"<p>With Lightrun dynamic logs, you can:</p> <ul> <li>Troubleshoot live applications by dynamically adding logs anywhere in the application code.</li> <li>Add as many logs as you want until you resolve an issue, using simple or complex conditional statement.</li> <li>Add as many logs as you need until you identify the problem.</li> <li>Add logs to multiple instances of a running production service (microservices, big data workers) using tags.</li> <li>Explore and inspect your logs in your log analysis tool of choice: DataDog, Splunk, Elastic, etc. under the context of existing logs.</li> <li>Print the log data straight in your IDE and analyze your code behavior locally.</li> </ul>"},{"location":"actions/dynamic-logs/#more-on-dynamic-logs","title":"More on Dynamic Logs","text":"<ul> <li>Learn how to create and manage logs in the Jetbrains plugin</li> <li>Learn how to create and manage logs in the VSCode plugin</li> <li>Learn how to manage your logs in the Lightrun Management Portal</li> <li>Customize Dynamic Logs format for integration into your app's logger</li> </ul>"},{"location":"actions/metrics/","title":"Metrics","text":"<p>Lightrun lets you acquire, in real-time, a broad range of performance metrics for timing, synchronization, and business logic. These metrics provide immediate answers for identifying bottlenecks, with minimal impact on performance.</p> <p>Lightrun Metrics come in four types:</p> <ul> <li>Counter</li> <li>Method Duration</li> <li>Tic &amp; Toc (Block Duration)</li> <li>Custom Metric</li> </ul> <p>Support</p> <p>Metrics currently are supported only for Java/JVM applications.</p>"},{"location":"actions/metrics/#typical-use-cases","title":"Typical use cases","text":"<p>With Lightrun Metrics, you can:</p> <ul> <li>Add metrics, on demand, to your running application code, until you identify the problem</li> <li>Count line execution occurrences</li> <li>Swiftly identify performance and synchronization issues in the same version you released</li> <li>Use timers, Tic &amp; Toc function durations, and custom metrics, to investigate code behavior and measure performance</li> <li>Collect system statistics on latency, throughput, and other variables</li> </ul>"},{"location":"actions/metrics/#counter","title":"Counter","text":"<p>A Lightrun Counter is added to a single line of code. It counts the number of times the code line is reached. You can add a counter to any and as a many lines of code you need. From the Lightrun IDE plugin, you can specify the conditions (as Boolean expressions) when to record the line execution.</p>"},{"location":"actions/metrics/#method","title":"Method Duration","text":"<p>The Method Duration metric measures the elapsed time for executing a given method.</p>"},{"location":"actions/metrics/#tic-toc","title":"Tic &amp; Toc (Block Duration)","text":"<p>The Lightrun Tic &amp; Toc metric measures the elapsed time for executing a specified block of code, within the same function.</p>"},{"location":"actions/metrics/#custom-metric","title":"Custom Metric","text":"<p>Lightrun enables you to design your own custom metric, using conditional expressions that evaluate to an integer result. Custom metrics can be created using the configuration form in the Lightrun IDE plugin or from the Lightrun CLI.</p>"},{"location":"actions/metrics/#more-on-lightrun-metrics","title":"More on Lightrun Metrics","text":"<ul> <li>Learn how to create and manage metrics in the Jetbrains plugin</li> <li>Learn how to create and manage metrics in the VS Code plugin</li> </ul>"},{"location":"actions/output-routing/","title":"Action Output Target","text":"<p>You can configure where you would like to view your Logs and Metrics output by specifying the preferred target in the action configuration. </p> <p>There are two main action targets.</p> Target Description Stdout The default option. Logs and Metrics are routed only to the application's standard output. Plugin Logs and Metrics appear in the Lightrun Console, Management Portal, and any other configured logging tool( see integrations). <p>Lightrun Snapshot stack traces are displayed under the Snapshots tab within the Lightrun plugin and also sent to the Lightrun Management Portal, where they can be retrieved by any authorized user for offline analysis.</p> <p>Quota configuration</p> <p>Lightrun limits its usage of CPU, memory, I/O (the amount of outputted logs) and other system resources to protect the app performance. Users with <code>IGNORE_QUOTA</code> role can choose to ignore the agent quota limitations. The quota limits can be changed per agent by passing different Lightrun configuration, one way to change the configurations is using the <code>agent.config</code> file.</p> <p>See each runtime's advanced configuration section for particular details:  </p> <ul> <li>Java/JVM</li> <li>Node.js</li> <li>Python</li> </ul>"},{"location":"actions/snapshots/","title":"Snapshots","text":"<p>Unlike traditional breakpoints, Lightrun Snapshots are virtual breakpoints that don't pause, block or otherwise affect the functioning of your target application code from running. Lightrun Snapshots extract all of the information you need (stack traces and variables) for investigating bugs and display the output directly in the Lightrun plugin for your IDE and your Lightrun Management Portal.</p>"},{"location":"actions/snapshots/#typical-use-cases","title":"Typical use cases","text":"<p>With Lightrun Snapshots, you can:</p> <ul> <li>Explore variable values and function arguments at runtime, at any line of code in your application.</li> <li>Add watch expressions and explore the stack trace and the variables in every frame.</li> <li>Add as many snapshots as you need, without pausing the process.</li> <li>Add tags to enable multi-instance support (such as microservices, and big data workers).</li> </ul>"},{"location":"actions/snapshots/#more-on-snapshots","title":"More on Snapshots","text":"<ul> <li>Learn how to create and manage snapshots in the Jetbrains plugin</li> <li>Learn how to create and manage snapshots in the VS Code plugin</li> <li>Learn how to manage your snapshots in the Lightrun Management Portal</li> </ul>"},{"location":"actions/tags/","title":"Tags","text":"<p>Tagging allows you to group agents using a meaningful name, typically based on a common functionality.  For example, you can use tags to identify the location and purpose of each agent: Database servers, Staging, and so forth. Additionally, you can apply to each agent multiple tags in any combination.</p> <p>Using tags, you can bind actions to an agent before the agent has been launched and apply actions to applications across different sectors. Once an action is attached to a tag, it is implicitly added to all agents possessing that tag.</p>"},{"location":"actions/tags/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/tags/#debug-serverless-functions","title":"Debug Serverless Functions","text":"<p>Serverless functions are stateless programmatical functions written for a single purpose. They are hosted on managed infrastructure by cloud computing companies who maintain the infrastructure and code base of the serverless function.</p> <p>Serverless functions are short-running functions. Suppose a Lightrun action is added directly to an agent created when the serverless function is started. In that case, the action will be deleted when the serverless function disconnects, and you will have to insert the action again when the serverless function restarts. </p> <p>You can solve this problem by attaching the Lightrun actions to tags instead. Lightrun actions attached to a tag outlive any individual agent. The action is implicitly attached to every agent created whenever the serverless function is started and persists even after the short-running function disconnects. </p>"},{"location":"actions/tags/#debug-multiple-deployment-environments","title":"Debug Multiple Deployment Environments","text":"<p>Nowadays, most software companies have multiple deployment environments to enable teams to build and test software in isolation and ultimately deliver a high-quality product to production. Lightrun makes it easy to debug each deployment environment with tags. </p> <p>Imagine a scenario with three deployment environments in your system.</p> <ul> <li>Development</li> <li>Staging</li> <li>Production environments</li> </ul> <p>You can add configuration for each environment as a tag in your agent config and apply Lightrun actions to each section by adding to the tag.</p> <pre><code>\"registration\": {\n\"DisplayName\" : \"&lt;display-name&gt;\"\n\"tags\": [\n{\n\"name\": \"Development\"\n},\n{\n\"name\": \"Staging\"\n},\n{\n\"name\": \"Production\" }\n]\n}\n</code></pre> <p>Suppose you are experiencing a problem in the Production environment but not in any other environment. In that case, you can target that environment with Lightrun actions by applying the actions to the Production tag. A good tagging system can help you target just the set of agents relevant to your investigation.</p>"},{"location":"actions/tags/#more-on-tagging","title":"More on Tagging","text":"<p>To get started, pick your programming language.</p> <p>Programming Languages</p> <ul> <li>Node.js</li> <li>Java</li> <li>Python</li> </ul>"},{"location":"cli/authentication/","title":"Authenticating the Lightrun CLI","text":"<p>Before you can start debugging with Lightrun from your CLI, you must first authenticate with your Lightrun account.</p>"},{"location":"cli/authentication/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>Installed the Lightrun CLI on your local machine.</li> </ul>"},{"location":"cli/authentication/#authenticate-in-your-cli","title":"Authenticate in your CLI","text":"<ol> <li>Navigate to the folder where your downloaded CLI <code>lightrunc.jar</code> file stored in your terminal.</li> <li> <p>Run the following command. <code>java -jar lightrunc.jar login</code>.</p> <p>You will be redirected to your browser for authentication.</p> <pre><code>$ java -jar lightrunc.jar login\nRedirecting to your login URL: \nhttps://app.lightrun.com/auth/realms/lightrun/protocol/openid-connect/auth?client_id=web_app&amp;response_mode=fragment&amp;response_type=code&amp;redirect_uri=https://app.lightrun.com/device/&lt;&gt;\nPress Enter to open URL in browser\n\nLogged in successfully!\n</code></pre> </li> <li> <p>Alternatively, you can chose authenticate the Lightrun CLI directly in your terminal.</p> <pre><code>java -jar lightrunc.jar login -email &lt;jane.doe@example.com&gt; -password &lt;secretpassword&gt;\n</code></pre> <p>Change <code>jane.doe@example.com</code> to your account username/email and change <code>&lt;secretpassword&gt;</code> to your password. </p> </li> </ol>"},{"location":"cli/cli_reference/","title":"Lightrun CLI Commands","text":"<p>This reference describe the Lightrun CLI commands, options, and parameters.</p>"},{"location":"cli/cli_reference/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>Installed the Lightrun CLI on your local machine.</li> <li>Authenticated the Lightrun CLI</li> </ul>"},{"location":"cli/cli_reference/#synopsis","title":"Synopsis","text":"<pre><code>java -jar lightrunc.jar &lt;command&gt; &lt;options&gt;\n</code></pre> <p>Add the <code>-v</code> command when running any command to enable the verbose mode. For exammple, </p> <pre><code>java -jar lightrunc.jar &lt;command&gt; &lt;options&gt; -v\n</code></pre> <p>Use <code>java -jar lightrunc.jar help</code> to view a list of all available commands and options in your terminal.</p> <p>Example</p> <pre><code>$ java -jar lightrunc.jar help\nUsage: LightrunC [OPTIONS]\nCommand line interface to Lightrun\n     list-agents                 List the agents\n     list-tags                   List the tags\n     list-agents-by-tag &lt;Tag&gt;    List the agents by given tag\n     list-actions &lt;AgentId&gt;      List the actions for the given agent id\n     log &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; [-ignoreQuota] [-pipe enable/disable/client]\nInsert a log to the given agent at the given\n                                   file/line with the format (text of the log)\nclog &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota] [-pipe enable/disable/client]\nInsert a conditional log to the given agent\n                                   at the given file/line with the format\n                                   (text of the log)\nsnapshot &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; [-condition &lt;Condition&gt;] [-watch &lt;Expression&gt;] [-expireSec &lt;ExpireSec&gt;] [-maxHitCount &lt;MaxHitCount&gt;] [-ignoreQuota] [-pipe enable/disable/client]\nInsert a snapshot to the given agent at the\n                                   given file/line\n     counter &lt;AgentId&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;CounterName&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-aggregateBy &lt;Aggregate By Prefix&gt;] [ignoreQuota] [-pipe enable/disable/client]\nCount the number of times each thread hits\n                                   the requested line.\n                              This option is currently supported only for\nJava agents.\n     customMetric &lt;AgentId&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;MetricName&gt; &lt;MetricExpression&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota] [-pipe enable/disable/client]\nGet metrics for the value given by the\n                                   expression.\n                              This option is currently supported only for\nJava agents.\n     snapshot-data &lt;AgentId&gt; &lt;SnapshotId&gt; [&lt;output-file&gt;]\nPrints the accumulated data for a snapshot or\n                                   saves it to &lt;output-file&gt;\n     rm &lt;AgentId&gt; &lt;ActionId&gt;     Removes an action from the given agent\n     rm-tag &lt;tagName&gt;            Removes a tag from the server\n     status                      Prints the current status of the backend\n     detach &lt;on|off&gt;             Disconnects all agents and disables lightrun\n                                   instantly (when on) until it's turned off\n                                   again\n     print-logs &lt;AgentId&gt; [&lt;ActionId&gt;] [-range &lt;StartTimestamp-EndTimestamp \n     (milliseconds)&gt;]\n                              Print all logs for the given agent. Limited\n                                   to 1000 most recent results. Optionally,\n                                   you can specify the range via the 'range'\n                                   argument\n     print-all-logs              Print all logs for all agents. Limited to\n                                   1000 most recent results. Optionally, you\n                                   can specify the range via the 'range'\n                                   argument\n     enable-piping &lt;AgentId&gt;     Logs/Counters/TicTocs for this agent id will\n                                   be piped to Lightrun's backend and printed\n                                   on the server! Logs are available with the\n                                   print-logs command.\n     client-piping &lt;AgentId&gt;     Logs/Counters/TicTocs for this agent id will\n                                   be piped to Lightrun's backend and hidden\n                                   in the server! Logs are available with the\n                                   print-logs command\n     disable-piping &lt;AgentId&gt;    Logs/Counters/TicTocs for this agent id will\n                                   only be printed on the server! (this\n                                   doesn't stop the action)\nserver-url &lt;ServerURL&gt;      Sets the server URL for the command line\n     login                       Log in the server. The login will supply a\n                                   URL for further authentication. Optionally,\n                                   you can specify the user name and password\n                                   via the 'email' and 'password' arguments.\n     logout                      Logs out the currently logged in user on this\n                                   machine\n     version                     Prints the version of Lightrun CLI and the\n                                   backend server\n     listen                      Listens to agent/log registration events and\n                                   prints them out\n     -v, verbose                 Verbose mode\n     user                        Prints the details on the server for the\n                                   currently logged in user\n     help                        Print help details\n     toggle-action [AgentId] &lt;ActionId&gt;\n                              Enable/Disable an action\n     add-certificate &lt;Certificate&gt;\n                              Add a server certificate\n     show-certificates           Show all the server certificates\n     rm-certificate &lt;Certificate&gt;\n                              Remove a server certificate\n     enable-pinning-status       Enable certificate pinning\n     disable-pinning-status      Disable certificate pinning\n     get-pinning-status          Get certificate pinning\n     clear-exceptions            Clear all exceptions from history by Admin /\n                                   Manager\n     ignoreQuota, -ignoreQuota   Add this argument when submitting a new\n                                   action in order to disable the quota limits\n                                   on that action. This operation can\n                                   seriously impact your performance and is\n                                   only available for users with the ignore\n                                   quota permission\n     -pipe enable/disable/client Set Piping for action.\n                              enable - enables piping in the backend.\n                              disable - Stops tracking action in the\n                                   backend/client\n                              client - Action will be piped to the backend\n                                   and hidden in the server\n</code></pre>"},{"location":"cli/cli_reference/#listen","title":"<code>listen</code>","text":"<p>The <code>listen</code> command prints out events (agent/actions events) from the server as they occur.</p>"},{"location":"cli/cli_reference/#synopsis_1","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar listen</code></p>"},{"location":"cli/cli_reference/#example","title":"Example","text":"<p>Note</p> <p>Use Ctrl+C to exit listen mode.</p> <p>Example</p> <p>run <code>java -jar lightrunc.jar listen</code></p> <pre><code>$ java -jar lightrunc.jar listen\nConnecting to server\nListening for events\n{\"eventType\":\"CONNECTED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"eventType\":\"SESSION_DETAILS\",\"metadata\":{\"sessionId\":\"ecf32a4b-43da-ea93-bce0-18ef235e962a\"},\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"agentDisplayName\":\"\",\"eventType\":\"AUTHENTICATED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n{\"actionType\":\"LOG\",\"agentDisplayName\":\"erezk-Latitude-7400 (pid 30554)\",\"agentId\":\"f4b0d260-ec00-4459-a9ed-b8ef7d4ffcf7\",\"eventType\":\"LOG_DATA_ADDED\",\"status\":{\"status\":\"OK\",\"statusCode\":\"STATUS_OK\"}}\n</code></pre>"},{"location":"cli/cli_reference/#version","title":"<code>version</code>","text":"<p>The <code>version</code> command outputs information about your current CLI version and Lightrun server version.</p>"},{"location":"cli/cli_reference/#synopsis_2","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar version</code></p>"},{"location":"cli/cli_reference/#example_1","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar version</code></p> <pre><code>$ java -jar lightrunc.jar version\nCLI Client Version: 1.4\nServer Version: 1.6\n</code></pre>"},{"location":"cli/cli_reference/#user","title":"<code>user</code>","text":"<p>The <code>user</code> command outputs all relevant information about the current logged-in user.</p>"},{"location":"cli/cli_reference/#synopsis_3","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar user</code></p>"},{"location":"cli/cli_reference/#example_2","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar user</code></p> <pre><code>$ java -jar lightrunc.jar user\nclass UserDTO {\nactivated: true\nauthorities: &lt;permissions&gt;\n    company: class CompanyDTO {\nagentAPIKey: &lt;agent-api-key&gt;\n        agentsEnabled: true\ncertificatePinningEnabled: false\ndisplayName: null\n        dontStorePluginToken: false\nid: &lt;id&gt;\n        inviteKey: &lt;invite-key&gt;\n        licenseExpiry: &lt;liscense-expiry&gt;\n        licensedAgents: 1000\nlicensedUsers: 1000\nmanagerId: null\n        managerLogin: null\n        name: &lt;name&gt;\n        subscriptionStatus: STANDARD\n        uniquifier: &lt;uniquifier&gt;\n        users: []\n}\ncompanyName: &lt;company-name&gt;\n    createdBy: &lt;accout-created-by&gt;\n    createdDate: &lt;created-date&gt;\n    email: &lt;email&gt;\n    firstName: &lt;first-name&gt;\n    id: &lt;id&gt;\n    imageUrl: null\n    langKey: en\n    lastModifiedBy: &lt;account-last-modified-by&gt;\n    lastModifiedDate: &lt;last-modified-date&gt;\n    lastName: &lt;last-name&gt;\n    password: null\n    passwordHash: null\n    passwordSet: false\nregisterMethod: &lt;register-method&gt;\n    subscriptionStatus: &lt;subscription-status&gt;\n}\n</code></pre>"},{"location":"cli/cli_reference/#status","title":"<code>status</code>","text":"<p>The <code>status</code> command outputs the current status of the Lightrun Management server, including licensing information about the agent and other relevant details.</p>"},{"location":"cli/cli_reference/#synopsis_4","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar status</code></p>"},{"location":"cli/cli_reference/#example_3","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar status</code></p> <pre><code>$ java -jar lightrunc.jar status\nLightrun CLI Client\n----------\nServer URL: https://app.lightrun.com\nCompany Name: &lt;company-name\nVersion: 1.4\nBackend Version: 1.6\nUser: &lt;user-email&gt;\nLicenced Agents: 1000\nLicence Expiry: &lt;liscence-expiry&gt;\nException Daily Limit: Not Reached\n</code></pre>"},{"location":"cli/cli_reference/#detach","title":"<code>detach</code>","text":"<p>When experiencing any issues on the server, you might want to disable Lightrun in order to rule it out when troubleshooting.</p> <p>The <code>detach</code> command allows you to disable all Lightrun agents on the specified server and re-enable the agents at will.</p>"},{"location":"cli/cli_reference/#synopsis_5","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar detach on/off</code></p>"},{"location":"cli/cli_reference/#options","title":"Options","text":"Option Description <code>on</code> Disable all Lightrun agents on your server. <code>off</code> Enable detached agents."},{"location":"cli/cli_reference/#examples","title":"Examples","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar detach on</code> to disable all Lightrun agents</p> <pre><code>$ java -jar lightrunc.jar detach on\nAgents are now detached\n</code></pre> <p>run <code>java -jar lightrunc.jar detach off</code> to enable all Lightrun agents</p> <pre><code>$ java -jar lightrunc.jar detach off\nAgents are now re-enabled\n</code></pre>"},{"location":"cli/cli_reference/#logout","title":"<code>logout</code>","text":"<p>The <code>logout</code> logs out the currently logged in user from the Lightrun CLI.</p>"},{"location":"cli/cli_reference/#synopsis_6","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar logout</code></p>"},{"location":"cli/cli_reference/#example_4","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar logout</code></p> <pre><code>Logged out successfully!\n</code></pre>"},{"location":"cli/cli_reference/#agents-tags-and-custom-sources","title":"<code>agents</code>, <code>tags</code>, <code>and</code> <code>custom sources</code>","text":""},{"location":"cli/cli_reference/#list-agents","title":"<code>list-agents</code>","text":"<p>The <code>list-agents</code> command outputs all agents and their associated actions.</p>"},{"location":"cli/cli_reference/#synopsis_7","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-agents</code></p>"},{"location":"cli/cli_reference/#example_5","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar list-agents</code></p> <pre><code>$ java -jar lightrunc.jar list-agents\n0 : ID e93fccd1-9f76-46ae-b703-056e25b8092e HOST ip-172-31-50-47 PID 14507 UPDATE 1/21/21, 9:16 AM\n   ACTION 4261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC\n   ACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world {java expression}gg\n   ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC\n   ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER\n   ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT\n1 : ID f93fccd1-9f75-46ae-b703-456e25b8092e HOST ip-172-31-50-47 PID 14508 UPDATE 1/21/21, 9:16 AM\n   ACTION 5261257f-fbc0-4fc5-8fe7-e8dbf3944eb7 FILE PrimeMainMR.java LINE 10 TYPE TICTOC\n   ACTION 49e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world {java expression}gg\n   ACTION g383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC\n   ACTION a3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE BREAKPOINT\n   ACTION l5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT\n</code></pre>"},{"location":"cli/cli_reference/#list-agents-by-tag","title":"<code>list-agents-by-tag</code>","text":"<p>The <code>list-agents-by-tag</code> command outputs all agents and actions related to the specified tag.</p>"},{"location":"cli/cli_reference/#synopsis_8","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-agents-by-tag Production</code></p>"},{"location":"cli/cli_reference/#options_1","title":"Options","text":"Option Description Tag The name of the relevant tag. For example, Production."},{"location":"cli/cli_reference/#example_6","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar list-agents-by-tag Production</code> to list all agents associated to the Production tag.</p> <pre><code>$ java -jar lightrunc.jar list-agents-by-tag Production\n0 : ID &lt;user-id&gt; HOST &lt;host&gt; PID 10 UPDATE 7/26/22, 8:08 PM TAGS [Production]\ndownloads % java -jar lightrunc.jar list-agents-by-tag Production\n0 : ID &lt;user-id&gt; HOST &lt;host&gt; PID 10 UPDATE 7/26/22, 8:13 PM TAGS [Production]\nACTION 1ecff847-db90-46f8-9493-bdac3518809b FILE PrimeMainMR.java LINE 30 TYPE LOG Hello world {expression}\nACTION 275cae4c-ece9-4f6c-8950-594cd3ccc7fd FILE PrimeMainMR.java LINE 59 TYPE COUNTER ACTION 5eaeeca1-4861-473b-8d55-b39b29af26ad FILE PrimeMainMR.java LINE 20 TYPE TICTOC ERROR Collision in breakpoint location on the same tree\n ACTION 758a36b8-50be-472c-8a6e-891eb3d31747 FILE PrimeMainMR.java LINE 78 TYPE BREAKPOINT ACTION a214a929-6bc8-44ff-92f1-5c0140084038 FILE PrimeMainMR.java LINE 33 TYPE LOG Hello world {expression}\n</code></pre>"},{"location":"cli/cli_reference/#list-tags","title":"<code>list-tags</code>","text":"<p>The <code>list-tags</code> command lists all tags and their actions.</p>"},{"location":"cli/cli_reference/#synopsis_9","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-tags</code></p>"},{"location":"cli/cli_reference/#example_7","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar list-tags</code></p> <pre><code>$ java -jar lightrunc.jar list-tags\nTag: Production\n   ACTION 4f6f8e67-2252-4093-bcf2-9a5254f074ef FILE PrimeMainMR.java LINE 50 TYPE LOG Hello world {java expression}\nACTION 99e8e7b0-9248-4d89-8f6f-2d3c5fa9aebc FILE PrimeMainMR.java LINE 15 TYPE LOG Hello world {java expression}gg\n   ACTION e5790c99-f763-4d26-8d3f-2714c89c0fad FILE PrimeMainMR.java LINE 10 TYPE BREAKPOINT\nTag: Staging\n   ACTION b383e31b-8749-419f-a492-85a919cc0da8 FILE PrimeMainMR.java LINE 22 TYPE TICTOC\n   ACTION c3f863e6-ba7d-4480-83c0-ef4a278ecddb FILE PrimeMainMR.java LINE 15 TYPE COUNTER\n</code></pre>"},{"location":"cli/cli_reference/#list-custom-sources","title":"<code>list-custom-sources</code>","text":"<p>The <code>list-custom-sources</code> command outputs all available custom sources.</p>"},{"location":"cli/cli_reference/#synopsis_10","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-custom-sources</code></p>"},{"location":"cli/cli_reference/#example_8","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar list-custom-sources</code> <pre><code>$ java -jar lightrunc.jar list-custom-sources\nCustom Source: Production (86ba64eb-89a7-445d-a3f3-e273645594b6)\n</code></pre></p>"},{"location":"cli/cli_reference/#list-agents-by-custom-source-name","title":"<code>list-agents-by-custom-source-name</code>","text":"<p>The <code>list-agents-by-custom-source-name</code> command lists all agents associated with a custom source.</p>"},{"location":"cli/cli_reference/#synopsis_11","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-agents-by-custom-source-name &lt;CustomSource&gt;</code></p>"},{"location":"cli/cli_reference/#options_2","title":"Options","text":"Option Description Custom Source Custom source name."},{"location":"cli/cli_reference/#examples_1","title":"Examples","text":"<p>Example</p> <p>run  <code>java -jar lightrunc.jar list-agents-by-custom-source-name &lt;CustomSource&gt;</code> <pre><code>$ java -jar lightrunc.jar list-agents-by-custom-source-name Staging   0 : ID a7324611-3ab0-4ea1-8cad-bbc9fcfe3e4a HOST 6f4d43f85e53 PID 14 UPDATE 2/1/23, 7:37 AM TAGS [Production]\n</code></pre></p>"},{"location":"cli/cli_reference/#list-actions","title":"<code>list-actions</code>","text":"<p>The <code>list-actions</code> command lists all actions associated with a specified agent or tag.</p>"},{"location":"cli/cli_reference/#synopsis_12","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-actions &lt;AgentId&gt;</code></p>"},{"location":"cli/cli_reference/#options_3","title":"Options","text":"Option Description Agent-ID Enter the ID of the relevant agent. Tag Enter the relevant tag instead of an agent ID."},{"location":"cli/cli_reference/#examples_2","title":"Examples","text":"<p>Example</p> <p>run  <code>java -jar lightrunc.jar list-actions &lt;AgentId&gt;</code> to list all actions associated with the specified agent.  <pre><code>$ java -jar lightrunc.jar list-actions 7b5a1f54216b  \nThere are no actions to agent 7b5a1f54216b\n</code></pre></p> <p>run <code>java -jar lightrunc.jar list-actions tag:&lt;tagName&gt;</code> to list all actions associated with the specified tag.</p> <pre><code>$  java -jar lightrunc.jar list-actions tag:Production\nThere are no actions to agent tag:Production\n</code></pre>"},{"location":"cli/cli_reference/#client-piping","title":"<code>client-piping</code>","text":"<p>The <code>client-piping</code> command pipes Log, Metrics, Counters, and Tic Toc data to the Lightrun Console, Management Portal, and any other configured logging tool.</p>"},{"location":"cli/cli_reference/#synopsis_13","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar client-piping &lt;Agent-ID&gt;</code></p>"},{"location":"cli/cli_reference/#options_4","title":"Options","text":"Option Description Agent-ID Enter the ID of the relevant agent."},{"location":"cli/cli_reference/#example_9","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar client-piping &lt;Agent-ID&gt;</code></p> <pre><code>$ java -jar lightrunc.jar client-piping da0c440b-ae8e-4011-9f61-93a07405baa2\nLog tracking in progress, use print-logs to view the output\n</code></pre>"},{"location":"cli/cli_reference/#enable-piping","title":"<code>enable-piping</code>","text":"<p>The <code>enable-piping</code> command pipes Log, Metrics, Counters, and Tic Toc data to the Lightrun Console, Management Portal, and any other configured logging tool.</p>"},{"location":"cli/cli_reference/#synopsis_14","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar enable-piping &lt;Agent-ID&gt;</code></p>"},{"location":"cli/cli_reference/#options_5","title":"Options","text":"Option Description Agent-ID Enter the ID of the relevant agent."},{"location":"cli/cli_reference/#example_10","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar enable-piping &lt;Agent-ID&gt;</code></p> <pre><code>$ java -jar lightrunc.jar enable-piping da0c440b-ae8e-4011-9f61-93a07405baa2\nLog tracking in progress, use print-logs to view the output\n</code></pre>"},{"location":"cli/cli_reference/#disable-piping","title":"<code>disable-piping</code>","text":"<p>The <code>disable-piping</code> command disables all output piping for the specified agent.</p>"},{"location":"cli/cli_reference/#synopsis_15","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar disable-piping &lt;Agent-ID&gt;</code></p>"},{"location":"cli/cli_reference/#options_6","title":"Options","text":"Option Description Agent-ID Enter the ID of the relevant agent."},{"location":"cli/cli_reference/#example_11","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar disable-piping &lt;Agent-ID&gt;</code></p> <pre><code>$ java -jar lightrunc.jar disable-piping da0c440b-ae8e-4011-9f61-93a07405baa2 \nLog tracking is disabled\n</code></pre>"},{"location":"cli/cli_reference/#actions","title":"<code>actions</code>","text":""},{"location":"cli/cli_reference/#toggle-action","title":"<code>toggle-action</code>","text":"<p>The <code>toggle-action</code> command enables or disables an action.</p>"},{"location":"cli/cli_reference/#synopsis_16","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar toggle-action &lt;Agent-ID&gt; &lt;ActionId&gt;</code></p>"},{"location":"cli/cli_reference/#options_7","title":"Options","text":"Option Description Agent-ID Enter the ID of the relevant agent. Action-ID Enter the ID of the relevant action."},{"location":"cli/cli_reference/#examples_3","title":"Examples","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar toggle-action &lt;Agent-ID&gt; &lt;ActionId&gt;</code> on an active action to disable the action.</p> <pre><code>$ java -jar lightrunc.jar toggle-action da0c440b-ae8e-4011-9f61-93a07405baa2  b5f20e04-5ab1-4c14-887b-1386ee96ce1b\nAction b5f20e04-5ab1-4c14-887b-1386ee96ce1b was successfully disabled\n</code></pre> <p>run <code>java -jar lightrunc.jar toggle-action &lt;Agent-ID&gt; &lt;ActionId&gt;</code> on a disabled action to enable the action.</p> <pre><code>$ java -jar lightrunc.jar toggle-action da0c440b-ae8e-4011-9f61-93a07405baa2  b5f20e04-5ab1-4c14-887b-1386ee96ce1b\nAction b5f20e04-5ab1-4c14-887b-1386ee96ce1b was successfully enabled\n</code></pre>"},{"location":"cli/cli_reference/#log","title":"<code>log</code>","text":"<p>The <code>log</code> command inserts a log to the given agent at the given file/line with the format (text of the log).</p>"},{"location":"cli/cli_reference/#synopsis_17","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar log &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; -expireSec &lt;ExpireSec&gt; [-ignoreQuota]</code></p> <p>Important</p> <p>If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. </p>"},{"location":"cli/cli_reference/#options_8","title":"Options","text":"Option Description Agent-ID The ID of the relevant agent. Change <code>AgentID</code> to tag:<code>tagName</code> to insert the action into a tag. Filename The name of the file, including the suffix LineNumber The number of the line of code in the referenced file. Format The text to appear in your logs. expireSec The amount of time for which this log should run. Dynamic logs timeout after 1 hour by default if you don't insert an expiry time. ignoreQuota When set, the quota limit configured for running Lightrun actions is overridden and this log will continue to run even if it reaches the quota. Only users with the Ignore Quota role can use this option."},{"location":"cli/cli_reference/#example_12","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar log &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; -expireSec &lt;ExpireSec&gt; [-ignoreQuota]</code> to add a log to an agent.    <pre><code>$ java -jar lightrunc.jar log 00e5ab81-2d63-404f-9c27-2f7ee9a0bfb8 request.js:11 Hello-world  -expireSec 360 \nThe log was submitted\n</code></pre></li> <li>run <code>java -jar lightrunc.jar log tag:&lt;tagName&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; -expireSec &lt;ExpireSec&gt; [-ignoreQuota]</code> to add a log to a set of agents identified by a tag.    <pre><code>$ java -jar lightrunc.jar log tag:Production request.js:11 Hello-world  -expireSec 360 \nThe log was submitted\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#print-logs","title":"<code>print-logs</code>","text":"<p>The <code>print-logs</code> command outputs all logs for the given agent.</p>"},{"location":"cli/cli_reference/#synopsis_18","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar print-logs &lt;AgentId&gt; [&lt;ActionId&gt;] [-range &lt;StartTimestamp-EndTimestamp (milliseconds)&gt;]</code></p> <p>Note</p> <ul> <li>Piping must be enabled (<code>enable-piping</code> command) for the <code>print-logs</code> to be able to output.</li> <li>The <code>print-logs</code> output is limited to 1000 most recent results.</li> </ul>"},{"location":"cli/cli_reference/#options_9","title":"Options","text":"Option Description AgentId The ID of the relevant agent. ActionId The ID of the action for which you want to view all logs. You can run 'list-actions' to view a list of action IDs. range Specify a time range to view dynamic logs for only that period of time. Use 13 digit epoch time when specifying a range."},{"location":"cli/cli_reference/#example_13","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar print-logs &lt;AgentId&gt; [&lt;ActionId&gt;] [-range &lt;StartTimestamp-EndTimestamp (milliseconds)&gt;]</code></p> <pre><code>$ java -jar lightrunc.jar print-logs 0 0 -range 1615391135824-1615391135924\nINFO: LOGPOINT: 197581639 is a prime number\nINFO: LOGPOINT: 197581649 is a prime number\nINFO: LOGPOINT: 197581651 is a prime number\nINFO: LOGPOINT: 197581673 is a prime number\nINFO: LOGPOINT: 197581687 is a prime number\nINFO: LOGPOINT: 197581697 is a prime number\nINFO: LOGPOINT: 197581717 is a prime number\nINFO: LOGPOINT: breakpointId: [f188655e-7dab-42a1-acad-ce53a16a85dc]: Logpoint is paused due to high call rate until log quota is restored\n</code></pre>"},{"location":"cli/cli_reference/#print-all-logs","title":"<code>print-all-logs</code>","text":"<p>The <code>print-all-logs</code> command prints all logs for all agents.</p>"},{"location":"cli/cli_reference/#synopsis_19","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar print-all-logs</code></p> <p>Note</p> <ul> <li>Piping must be enabled (<code>enable-piping</code> command) for the <code>print-all-logs</code> to be able to output.</li> <li>The <code>print-all-logs</code> output is limited to 1000 most recent results.</li> </ul>"},{"location":"cli/cli_reference/#example_14","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar print-all-logs</code></p> <pre><code>$ java -jar lightrunc.jar print-all-logs\nINFO: LOGPOINT: breakpointId: [786e3a7e-a60b-4e48-884e-2c126c4da8e3]: Logpoint is paused due to high call rate until log quota is restored\nINFO: LOGPOINT: Hello world 24373299\nINFO: LOGPOINT: Hello world 24373300\nINFO: LOGPOINT: Hello world 24373301\nINFO: LOGPOINT: Hello world 24373298\nINFO: LOGPOINT: Hello world 24373307\nINFO: LOGPOINT: Hello world 24373308\nINFO: LOGPOINT: Hello world 24373309\nINFO: LOGPOINT: Hello world 24373310\nINFO: LOGPOINT: Hello world 24373312\n</code></pre>"},{"location":"cli/cli_reference/#clog","title":"<code>clog</code>","text":"<p>The <code>clog</code> command inserts a conditional log for the given agent in the given file and line.</p>"},{"location":"cli/cli_reference/#synopsis_20","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar clog &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota]</code></p> <p>Important</p> <p>If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. </p>"},{"location":"cli/cli_reference/#options_10","title":"Options","text":"Option Description Agent-ID The ID of the relevant agent. Change <code>AgentID</code> to tag:<code>tagName</code> to insert the action into a tag. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. Format The text to appear in your dynamic logs for this metric. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this log should run. ignoreQuota When set, the quota limit configured for running Lightrun actions is overridden and this log will continue to run even if it reaches the quota. Only users with the Ignore Quota role can use this option."},{"location":"cli/cli_reference/#example_15","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar clog &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota]</code> to add the clog to an agent.    <pre><code>java -jar lightrunc.jar clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"Array size {arr.length}\" -condition \"i % 10 == 0\"\"\n</code></pre>    The log will be printed when the expression <code>i % 10 == 0</code> evaluates to true.</li> <li>run <code>java -jar lightrunc.jar clog tag:&lt;tagName&gt; &lt;Filename&gt;:&lt;LineNumber&gt; &lt;Format&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota]</code> to add a clog to a set of agents identified by a tag.    <pre><code>java -jar lightrunc.jar clog tag:Production Main.java:10 \"Array size {arr.length}\" -condition \"i % 10 == 0\"\"\n</code></pre>    The log will be printed when the expression <code>i % 10 == 0</code> evaluates to true.</li> </ul>"},{"location":"cli/cli_reference/#snapshot","title":"<code>snapshot</code>","text":"<p>The <code>snapshot</code> command inserts a snapshot to the specified agent at the given file/line.</p>"},{"location":"cli/cli_reference/#synopsis_21","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar snapshot &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-maxHitCount &lt;MaxHitCount&gt;] [-ignoreQuota]</code></p> <p>Important</p> <p>If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. </p>"},{"location":"cli/cli_reference/#options_11","title":"Options","text":"Option Description Agent-ID The ID of the relevant agent. Change <code>AgentID</code> to tag:<code>tagName</code> to insert the action into a tag. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this action should run. MaxHitCount The maximum number of times to take this snapshot during the valid period of this action; default = 1 ignoreQuota When set, the quota limit configured for running Lightrun actions is overridden and this action will continue to run even if it reaches the quota. Only users with the Ignore Quota role can use this option."},{"location":"cli/cli_reference/#example_16","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar snapshot &lt;AgentId&gt; &lt;Filename&gt;:&lt;LineNumber&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-maxHitCount &lt;MaxHitCount&gt;] [-ignoreQuota]</code> to add a snapshot to an agent.    <pre><code>$ java -jar lightrunc.jar snapshot da0c440b-ae8e-4011-9f61-93a07405baa2 PrimeMainMR.java:42 \nThe breakpoint was submitted\n</code></pre></li> <li>run <code>java -jar lightrunc.jar snapshot tag:&lt;tagName&gt; &lt;Filename&gt;:&lt;LineNumber&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-maxHitCount &lt;MaxHitCount&gt;] [-ignoreQuota]</code> to add a snapshot to a set of agents identified by a tag.    <pre><code>$ java -jar lightrunc.jar snapshot tag:Production PrimeMainMR.java:42 \nThe breakpoint was submitted\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#snapshot-data","title":"<code>snapshot-data</code>","text":"<p>The <code>snapshot-data</code> command prints out the accumulated data for a snapshot, or save the data into a specified output file.</p>"},{"location":"cli/cli_reference/#synopsis_22","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar snapshot-data &lt;AgentId&gt; &lt;SnapshotId&gt;[&lt;output-file&gt;]</code></p>"},{"location":"cli/cli_reference/#options_12","title":"Options","text":"Option Description Agent-ID The ID of the relevant agent. SnapshotId The ID of the snapshot for which to print the existing data."},{"location":"cli/cli_reference/#example_17","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar snapshot-data &lt;AgentId&gt; &lt;SnapshotId&gt;[&lt;output-file&gt;]</code></p> <pre><code>$ java -jar lightrunc snapshot-data e178578f-14da-476f-a084-bc460d6ec2b0 eb5abb0a-4677-4bed-9999-ea0b76c4efd2\n\n[class BreakpointDataDTO {\nactionId: eb5abb0a-4677-4bed-9999-ea0b76c4efd2\n agentId: e178578f-14da-476f-a084-bc460d6ec2b0\n createTime: class TimeDTO {\nnanos: 696685698\nseconds: 1611590801\n}\ndataId: 72f81a80-c415-4f00-a43d-83523a735230\n evaluatedExpressions: null\n stackFrames: [class AgentStackFrameDTO {\narguments: [class WatchEntryDTO {\nmembers: null\n         name: args\n         status: null\n         type: null\n         value: null\n         varTableIndex: 1\n}]\nfunction: PrimeMain.main\n     locals: [class WatchEntryDTO {\nmembers: null\n         name: i\n         status: null\n         type: int\n         value: 30514481\nvarTableIndex: null\n     }]\nlocation: class LocationDTO {\ncolumn: 0\nendOfLine: false\nline: 20\npath: PrimeMain.java\n     }\n}]\nvariableTable: [class WatchEntryDTO {\nmembers: null\n     name: null\n     status: class BreakpointStatusDTO {\ndescription: class BreakpointStatusDescriptionDTO {\nformat: Buffer full. Use an expression to see more data\n             parameters: null\n         }\nisAccepted: false\nisError: true\nrefersTo: VARIABLE_VALUE\n     }\ntype: null\n     value: null\n     varTableIndex: null\n }, class WatchEntryDTO {\nmembers: [class WatchEntryDTO {\nmembers: null\n         name: length\n         status: null\n         type: int\n         value: 0\nvarTableIndex: null\n     }]\nname: null\n     status: null\n     type: java.lang.String[]\nvalue: null\n     varTableIndex: null\n     }]\n}]\n</code></pre> <p>Tip</p> <p>You may use agent/action indexes instead of an ID. For example:</p> <pre><code>java -jar lightrunc.jar snapshot-data 0 0 will output the first snapshot of the first agent\n</code></pre> <p>Tip</p> <p>The output file is saved in JSON format, and can be manipulated by other tools.</p>"},{"location":"cli/cli_reference/#custommetric","title":"<code>customMetric</code>","text":"<p>The <code>customMetric</code> command creates a custom metric based on specified expressions and values </p> <p>Note</p> <ul> <li>This command is currently supported only for Java agents.</li> </ul> <ul> <li>Always use quotes when setting a condition (\"num&gt;3\") in order to avoid shell output redirection to file descriptor 3.</li> </ul>"},{"location":"cli/cli_reference/#synopsis_23","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar customMetric &lt;AgentId&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;MetricName&gt; &lt;MetricExpression&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota]</code></p> <p>Important</p> <p>If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. </p>"},{"location":"cli/cli_reference/#options_13","title":"Options","text":"Option Description ignoreQuota When set, the quota limit configured for running Lightrun actions is overridden and this custom metric will continue to run even if it reaches the quota. The quota controls use of CPU, Networking, Memory, excessively long strings, too many instructions printing out, protection from infinite loops and the like.  Only administrators with the Ignore Quota role can use this option. Agent-ID The ID of the relevant agent. Change <code>AgentID</code> to tag:<code>tagName</code> to insert the action into a tag. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. MetricName Assign a unique name to this metric. MetricExpression Configure any valid Java expression that does not change the state of the code. Condition Any valid Java expression that does not change the state of the code. ExpireSec Configure the duration that this metric should run in seconds."},{"location":"cli/cli_reference/#example_18","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar customMetric &lt;AgentId&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;MetricName&gt; &lt;MetricExpression&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota]</code> to add a customMetric to an agent.         <pre><code>$ java -jar lightrunc.jar customMetric 0 PrimeMain.java:14 MyPrimeMetric num -condition \"num&gt;3\"\nINFO: 10 Mar 2021, 11:59:26 CustomMetric Stats:\n{\n\"MyPrimeMetric\" :\n    {\"count\" : 55106,\"max\" : 675526339,\"mean\" : 6.731275234790297E8,\"min\" : 629652109,\"p50\" : 6.73885867E8,\"p75\" : 6.74822641E8,\"p95\" : 6.75395141E8,\"p98\" : 6.75455779E8,\"p99\" : 6.75491381E8,\"p999\" : 6.75526339E8,\"stddev\" : 2424070.6627122667  }\n}\n</code></pre></li> <li>run <code>java -jar lightrunc.jar customMetric tag:&lt;tagName&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;MetricName&gt; &lt;MetricExpression&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-ignoreQuota]</code> to add a customMetric to a set of agents identified by a tag.         <pre><code>$ java -jar lightrunc.jar customMetric tag:Production PrimeMain.java:14 MyPrimeMetric num -condition \"num&gt;3\"\nINFO: 10 Mar 2021, 11:59:26 CustomMetric Stats:\n{\n\"MyPrimeMetric\" :\n    {\"count\" : 55106,\"max\" : 675526339,\"mean\" : 6.731275234790297E8,\"min\" : 629652109,\"p50\" : 6.73885867E8,\"p75\" : 6.74822641E8,\"p95\" : 6.75395141E8,\"p98\" : 6.75455779E8,\"p99\" : 6.75491381E8,\"p999\" : 6.75526339E8,\"stddev\" : 2424070.6627122667  }\n}\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#counter","title":"<code>counter</code>","text":"<p>The <code>counter</code> command returns the number of times each thread hit a specified code line.</p> <p>Note</p> <ul> <li>This command is currently supported only for Java agents.</li> </ul>"},{"location":"cli/cli_reference/#synopsis_24","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar counter &lt;AgentId&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;CounterName&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-aggregateBy &lt;Aggregate By Prefix&gt;] [ignoreQuota]</code></p> <p>Important</p> <p>If the file name and line number don't match the bytecode version of the app, Lightrun will behave inconsistently and will most likely fail. </p>"},{"location":"cli/cli_reference/#options_14","title":"Options","text":"Option Description Agent-ID The ID of the relevant agent.  Change <code>AgentID</code> to tag:<code>tagName</code> to insert the action into a tag. FileName The name of the file containing the code in which to add the metric, including the extension. For example: MyJavaFile.java LineNumber The line number within the code file. CounterName The name of the counter - the text to appear in your dynamic logs for this metric. Condition Any valid Java expression that does not change the state of the code. ExpireSec The amount of time for which this counter should run. aggregateBy Collect and aggregate data for the specified string only. ignoreQuota Only users with the Ignore Quota role can use this option. When set, the quota limit configured for running Lightrun actions is overridden and this counter will continue to run even if it reaches the quota."},{"location":"cli/cli_reference/#example_19","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar counter &lt;AgentId&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;CounterName&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-aggregateBy &lt;Aggregate By Prefix&gt;] [ignoreQuota]</code> to add a counter to an agent.         <pre><code>$ java -jar lightrunc counter e178578f-14da-476f-a084-bc460d6ec2b0 PrimeMain.java:20 myCounter\nThe counter was submitted\n</code></pre></li> <li>run <code>java -jar lightrunc.jar counter tag:&lt;tagName&gt; &lt;FileName&gt;:&lt;LineNumber&gt; &lt;CounterName&gt; [-condition &lt;Condition&gt;] [-expireSec &lt;ExpireSec&gt;] [-aggregateBy &lt;Aggregate By Prefix&gt;] [ignoreQuota]</code> to add a counter to a set of agents identified by a tag.         <pre><code>$ java -jar lightrunc counter tag:Production PrimeMain.java:20 myCounter\nThe counter was submitted\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#pii-redaction","title":"<code>pii redaction</code>","text":""},{"location":"cli/cli_reference/#create-pii-redaction-template","title":"<code>create-pii-redaction-template</code>","text":"<p>The <code>create-pii-redaction-template</code> command adds a new PII Redaction template to the Lightrun server.</p>"},{"location":"cli/cli_reference/#synopsis_25","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar create-pii-redaction-template &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_15","title":"Options","text":"Option Description Name Enter the name of the relevant PII Redaction template."},{"location":"cli/cli_reference/#example_20","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar create-pii-redaction-template</code></p> <pre><code>$ java -jar lightrunc.jar create-pii-redaction-template piiAP15 pii-redaction-agentpool-15\nPII redaction template 'piiAP15' successfully created\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#update-pii-redaction-template","title":"<code>update-pii-redaction-template</code>","text":"<p>The <code>update-pii-redaction-template</code> command modifies and updates an existing template.</p>"},{"location":"cli/cli_reference/#synopsis_26","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar update-pii-redaction-template &lt;Name&gt; -name TEMPLATE_NEW_NAME -description</code></p>"},{"location":"cli/cli_reference/#options_16","title":"Options","text":"Option Description Name Enter the name of the relevant PII redaction template. Description Enter a description for the template."},{"location":"cli/cli_reference/#example_21","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar update-pii-redaction-template &lt;Name&gt; -name TEMPLATE_NEW_NAME -description</code> <pre><code>java -jar lightrunc.jar update-pii-redaction-template piiAP15 -name demo\n PII redaction template 'demo' successfully updated\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#list-pii-redaction-templates","title":"<code>list-pii-redaction-templates</code>","text":"<p>The <code>list-pii-redaction-templates</code> command lists all available PII Redaction templates.</p>"},{"location":"cli/cli_reference/#synopsis_27","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-pii-redaction-templates</code></p>"},{"location":"cli/cli_reference/#example_22","title":"Example","text":"<p>Example<ul> <li> <p>run <code>java -jar lightrunc.jar list-pii-redaction-templates</code></p> <pre><code>java -jar lightrunc.jar list-pii-redaction-templates\nID 1 NAME Default DESCRIPTION This PII Redaction template will be applied to all agent pools by default\nID 134 NAME demo DESCRIPTION pii-redaction-agentpool-15\nID 135 NAME demo - 2023-09-06T08-18-06_529147516Z DESCRIPTION pii-redaction-agentpool-15\n</code></pre> </li> </ul> </p>"},{"location":"cli/cli_reference/#delete-pii-redaction-template","title":"<code>delete-pii-redaction-template</code>","text":"<p>The <code>delete-pii-redaction-template</code> command deletes an existing PII Redaction template.</p>"},{"location":"cli/cli_reference/#synopsis_28","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar delete-pii-redaction-template &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_17","title":"Options","text":"Option Description Name Enter the name of the relevant PII Redaction template."},{"location":"cli/cli_reference/#example_23","title":"Example","text":"<p>Example<ul> <li> <p>run <code>java -jar lightrunc.jar delete-pii-redaction-template &lt;Name&gt;</code></p> <pre><code>$ java -jar lightrunc.jar delete-pii-redaction-template demo\nPII redaction template 'demo' successfully deleted\n</code></pre> </li> </ul> </p>"},{"location":"cli/cli_reference/#clone-pii-redaction-template","title":"<code>clone-pii-redaction-template</code>","text":"<p>The <code>clone-pii-redaction-template</code> command duplicates the PII Redaction template and provides a new name.</p>"},{"location":"cli/cli_reference/#synopsis_29","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar clone-pii-redaction-template &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_18","title":"Options","text":"Option Description Name Enter the name of the source PII Redaction template you want to clone."},{"location":"cli/cli_reference/#example_24","title":"Example","text":"<p>Example<ul> <li>run <code>java -jar lightrunc.jar clone-pii-redaction-template &lt;Name&gt;</code> <pre><code>$java -jar lightrunc.jar clone-pii-redaction-template demo\nPII redaction template 'demo - 2023-09-06T08-18-06_527147516Z' successfully created\n</code></pre></li> </ul> </p>"},{"location":"cli/cli_reference/#add-pii-redaction-pattern","title":"<code>add-pii-redaction-pattern</code>","text":"<p>The <code>add-pii-redaction-pattern</code> command adds new patterns to an existing PII Redaction template.</p>"},{"location":"cli/cli_reference/#synopsis_30","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-pii-redaction-pattern &lt;TemplateName&gt; &lt;PatternName&gt; &lt;Pattern&gt; [BY_NAME|BY_VALUE]</code></p>"},{"location":"cli/cli_reference/#options_19","title":"Options","text":"Option Description TemplateName Enter the name of the relevant PII redaction template. PatternName Enter the name of the relevant pattern. PATTERN Enter the pattern. PATTERN is a regex, and indicates the data matching the regex to be redacted. BY_NAME Indicate that data will be redacted based on the variable name. BY_VALUE Indicate that the data will be redacted based on the variable value."},{"location":"cli/cli_reference/#example_25","title":"Example","text":"<p>Example<p>run <code>java -jar lightrunc.jar clone-pii-redaction-template &lt;Name&gt;</code> <pre><code>$java java -jar lightrunc.jar add-pii-redaction-pattern demo Tickets com.sales.tickets BY_VALUE\nSuccessfully added pattern to template 'demo'\n</code></pre></p> </p>"},{"location":"cli/cli_reference/#list-pii-redaction-pattern","title":"<code>list-pii-redaction-pattern</code>","text":"<p>The <code>list-pii-redaction-patterns</code> command lists all the patterns configured on the specific PII Redaction template.</p>"},{"location":"cli/cli_reference/#synopsis_31","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-pii-redaction-patterns &lt;TemplateName&gt;</code></p>"},{"location":"cli/cli_reference/#options_20","title":"Options","text":"Option Description TemplateName Enter the name of the relevant PII Redaction template."},{"location":"cli/cli_reference/#example_26","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-pii-redaction-patterns    &lt;TemplateName&gt;</code></li> </ul> <pre><code>java -jar lightrunc.jar list-pii-redaction-patterns demo\nNAME: Tickets TYPE: BY_VALUE PATTERN: com.sales.tickets CASE-INSENSITIVE: false\n</code></pre>"},{"location":"cli/cli_reference/#delete-pii-redaction-pattern","title":"<code>delete-pii-redaction-pattern</code>","text":"<p>The <code>delete-pii-redaction-pattern</code> command deletes an existing pattern set on a specific PII Redaction template.</p>"},{"location":"cli/cli_reference/#synopsis_32","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar delete-pii-redaction-pattern &lt;TemplateName&gt; &lt;PatternName&gt;</code></p>"},{"location":"cli/cli_reference/#options_21","title":"Options","text":"Option Description TemplateName Enter the name of the relevant PII Redaction template. PatternName Enter the name of the relevant pattern."},{"location":"cli/cli_reference/#example_27","title":"Example","text":"<p>Example<ul> <li>run <code>java -jar lightrunc.jar delete-pii-redaction-pattern &lt;TemplateName&gt; &lt;PatternName&gt;</code></li> </ul> <pre><code>$ java -jar lightrunc.jar delete-pii-redaction-pattern demo Tickets\nPII redaction pattern 'Tickets' successfully deleted\n</code></pre> </p>"},{"location":"cli/cli_reference/#certificates","title":"<code>certificates</code>","text":""},{"location":"cli/cli_reference/#show-certificates","title":"<code>show-certificates</code>","text":"<p>The <code>show-certificates</code> command outputs all certificates present in your Lightrun server.</p>"},{"location":"cli/cli_reference/#synopsis_33","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar show-certificates</code></p>"},{"location":"cli/cli_reference/#example_28","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar show-certificates</code></p> <pre><code>$ java -jar lightrunc.jar show-certificates\nee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12 (PRECONFIGURED)\n</code></pre>"},{"location":"cli/cli_reference/#add-certificate","title":"<code>add-certificate</code>","text":"<p>The <code>add-certificate</code> command adds a new certificate to the Lightrun server.</p>"},{"location":"cli/cli_reference/#synopsis_34","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-certificate &lt;certificate-sha256-public-key&gt;</code></p>"},{"location":"cli/cli_reference/#options_22","title":"Options","text":"Option Description <code>&lt;certificate-sha256-public-key&gt;</code> sha256 of the public key of the certificate"},{"location":"cli/cli_reference/#example_29","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar add-certificate &lt;certificate-sha256-public-key&gt;</code> to add a new certificate.</p> <pre><code>$ java -jar lightrunc.jar add-certificate &lt;certificate-sha256-public-key&gt;\nSuccessfully added certificate.\n</code></pre>"},{"location":"cli/cli_reference/#rm-certificate","title":"<code>rm-certificate</code>","text":"<p>The <code>rm-certificate</code> command removes a certificate from the Lightrun server.</p>"},{"location":"cli/cli_reference/#synopsis_35","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar rm-certificate &lt;certificate-sha256-public-key&gt;</code></p>"},{"location":"cli/cli_reference/#options_23","title":"Options","text":"Option Description <code>&lt;certificate-sha256-public-key&gt;</code> sha256 of the public key of the certificate"},{"location":"cli/cli_reference/#example_30","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar rm-certificate &lt;certificate-sha256-public-key&gt;</code> to remove a cerficate from the Lightrun server.</p> <pre><code>$ lightrunc.jar rm-certificate &lt;certificate-sha256-public-key&gt;\nSuccessfully removed certificate &lt;certificate-sha256-public-key&gt;\n</code></pre>"},{"location":"cli/cli_reference/#get-pinning-status","title":"<code>get-pinning-status</code>","text":"<p>The <code>get-pinning-status</code> command returns the Lightrun server certificate pinning status.</p>"},{"location":"cli/cli_reference/#synopsis_36","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar get-pinning-status</code></p>"},{"location":"cli/cli_reference/#example_31","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar get-pinning-status</code>.</p> <pre><code>$ java -jar lightrunc.jar get-pinning-status\nPinning status is disabled\n</code></pre>"},{"location":"cli/cli_reference/#enable-pinning-status","title":"<code>enable-pinning-status</code>","text":"<p>The <code>enable-pinning-status</code> command enables certificate pinning.</p>"},{"location":"cli/cli_reference/#synopsis_37","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar enable-pinning-status</code></p>"},{"location":"cli/cli_reference/#example_32","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar enable-pinning-status</code></p> <pre><code>$ java -jar lightrunc.jar enable-pinning-status\nCertificate pinning is now enabled\n</code></pre>"},{"location":"cli/cli_reference/#disable-pinning-status","title":"<code>disable-pinning-status</code>","text":"<p>The <code>disable-pinning-status</code> command disables certificate pinning.</p>"},{"location":"cli/cli_reference/#synopsis_38","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar disable-pinning-status</code></p>"},{"location":"cli/cli_reference/#example_33","title":"Example","text":"<p>Example</p> <p>run <code>java -jar lightrunc.jar disable-pinning-status</code></p> <pre><code>$ java -jar lightrunc.jar disable-pinning-status\nCertificate pinning is now disabled\n</code></pre>"},{"location":"cli/cli_reference/#groups-access","title":"<code>groups &amp; access</code>","text":"<ul> <li>The commands in this section are for managing users with the Lightrun Role-based access control (RBAC) feature.</li> <li>The Lightrun Role-based access control feature is only available to users on our Enterprise plan; please contact our support team  for more information.</li> </ul>"},{"location":"cli/cli_reference/#create-group","title":"<code>create-group</code>","text":"<p>The <code>create-group</code> command creates a group of users.</p>"},{"location":"cli/cli_reference/#synopsis_39","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar create-group &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_24","title":"Options","text":"Option Description Name The name of the group."},{"location":"cli/cli_reference/#example_34","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar create-group sysadmins</code> to create a new group named <code>sysadmins</code>.       <pre><code>$ java -jar lightrunc create-group sysadmins                       \nGroup 'sysadmins' (id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b) successfully created\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#update-group-name","title":"<code>update-group-name</code>","text":"<p>The <code>update-group-name</code> command updates the name of a group.</p>"},{"location":"cli/cli_reference/#synopsis_40","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar update-group-name &lt;GroupId&gt; &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_25","title":"Options","text":"Option Description Group ID The ID of the relevant group. Name The group\u2019s new name."},{"location":"cli/cli_reference/#example_35","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar update-group-name &lt;group id&gt; &lt;new_name&gt;</code> to update the name of a group.       <pre><code>$ java -jar lightrunc update-group-name  5f8881b7-3e04-48ab-9bba-b2d1b9870a8b sys-managers\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#list-groups","title":"<code>list-groups</code>","text":"<p>The <code>list-groups</code> command returns a list of all groups available to the current user.</p> <p>Note</p> <p>The <code>list-groups</code> command will return all groups in the Lightrun organization if the user is a System Administrator.</p>"},{"location":"cli/cli_reference/#synopsis_41","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-groups</code></p>"},{"location":"cli/cli_reference/#example_36","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-groups</code>.       <pre><code>$ java -jar lightrunc list-groups          \nID 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b NAME sysadmins USERS COUNT 0 GROUP ADMINS N/A\nID b1603a77-661c-44c6-89de-dfd1d126f0c9 NAME 664379ed-7b49-472b-9d08-19d2ab3b0c84 USERS COUNT 1 GROUP ADMINS N/A\nPage 1 of 1\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#list-accesses","title":"<code>list-accesses</code>","text":"<p>The <code>list-accesses</code> command returns the role, elevated users, and agent pools associated with a group.</p>"},{"location":"cli/cli_reference/#synopsis_42","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-accesses &lt;GroupId&gt;</code></p>"},{"location":"cli/cli_reference/#options_26","title":"Options","text":"Option Description Group ID The ID of the relevant group."},{"location":"cli/cli_reference/#example_37","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-accesses &lt;GroupId&gt;</code>.       <pre><code>$ java -jar lightrunc list-accesses  5f8881b7-3e04-48ab-9bba-b2d1b9870a8b\nGroup \"5f8881b7-3e04-48ab-9bba-b2d1b9870a8b\" has access to agent-pools [Default Agent Pool] with role \"Standard\"\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#update-group-role","title":"<code>update-group-role</code>","text":"<p>The <code>update-group-role</code> command updates the role assigned to a group. </p>"},{"location":"cli/cli_reference/#synopsis_43","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar update-group-role &lt;GroupId&gt; &lt;RoleName&gt;</code></p>"},{"location":"cli/cli_reference/#options_27","title":"Options","text":"Option Description Group ID The ID of the relevant group. Role Name The role that should be assigned to the group. A group can be assigned one of the following roles.- Standard- Privileged"},{"location":"cli/cli_reference/#example_38","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar update-group-role &lt;GroupId&gt; &lt;RoleName&gt;</code>.       <pre><code>$ java -jar lightrunc update-group-role  5f8881b7-3e04-48ab-9bba-b2d1b9870a8b privileged\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#add-group-members","title":"<code>add-group-members</code>","text":"<p>The <code>add-group-members</code> adds users to a group.</p>"},{"location":"cli/cli_reference/#synopsis_44","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-group-members &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/cli_reference/#options_28","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/cli_reference/#example_39","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar add-group-members &lt;GroupId&gt; &lt;email&gt;</code> to add a user to a group.</p> <pre><code>$ java -jar lightrunc add-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar add-group-members &lt;GroupId&gt; email1 email2</code> to add multiple users to a group.</p> <pre><code>$ java -jar lightrunc add-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#remove-group-members","title":"<code>remove-group-members</code>","text":"<p>The <code>remove-group-members</code> removes users from a group.</p>"},{"location":"cli/cli_reference/#synopsis_45","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar remove-group-members &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/cli_reference/#options_29","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/cli_reference/#example_40","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-group-members &lt;GroupId&gt; &lt;email&gt;</code> to add a user to a group.</p> <pre><code>$ java -jar lightrunc remove-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-group-members &lt;GroupId&gt; email1 email2</code> to add multiple users to a group.</p> <pre><code>$ java -jar lightrunc remove-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#promote-to-group-admins","title":"<code>promote-to-group-admins</code>","text":"<p>The <code>promote-to-group-admins</code> command promotes a user to a group admin role.</p>"},{"location":"cli/cli_reference/#synopsis_46","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar promote-to-group-admins &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/cli_reference/#options_30","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/cli_reference/#example_41","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar promote-to-group-admins &lt;GroupId&gt; &lt;email&gt;</code> to promote a user to a group admin.</p> <pre><code>$ java -jar lightrunc promote-to-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar promote-to-group-admins &lt;GroupId&gt; email1 email2</code> to promote multiple users to group admin.</p> <pre><code>$ java -jar lightrunc promote-to-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#demote-from-group-admins","title":"<code>demote-from-group-admins</code>","text":"<p>The <code>demote-from-group-admins</code> command removes a user as a group admin.</p>"},{"location":"cli/cli_reference/#synopsis_47","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar demote-from-group-admins &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/cli_reference/#options_31","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/cli_reference/#example_42","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar demote-from-group-admins &lt;GroupId&gt; &lt;email&gt;</code> to remove a user as a group admin.</p> <pre><code>$ java -jar lightrunc demote-from-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar demote-from-group-admins &lt;GroupId&gt; email1 email2</code> to remove multiple users as group admins.</p> <pre><code>$ java -jar lightrunc demote-from-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#duplicate-group","title":"<code>duplicate-group</code>","text":"<p>The <code>duplicate-group</code> command duplicates a group of users.</p>"},{"location":"cli/cli_reference/#synopsis_48","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar duplicate-group &lt;GroupId&gt; &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_32","title":"Options","text":"Option Description Group ID The ID of the group to be duplicated. Name The name of the duplicate group."},{"location":"cli/cli_reference/#example_43","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar duplicate-group &lt;GroupId&gt; &lt;Name&gt;</code> <pre><code>$ java -jar lightrunc duplicate-group 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b newgroupname\nGroup 'newgroupname' (id: 2d71546a-6f5f-47d4-9754-73ee9ccfc959) successfully created  </code></pre></li> </ul>"},{"location":"cli/cli_reference/#add-access-to-pools","title":"<code>add-access-to-pools</code>","text":"<p>The <code>add-access-to-pools</code> command grants a group access to an agent pool.</p>"},{"location":"cli/cli_reference/#synopsis_49","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; [PoolName1...]</code></p>"},{"location":"cli/cli_reference/#options_33","title":"Options","text":"Option Description Group ID The ID of the relevant group. PoolName Agent pool names."},{"location":"cli/cli_reference/#example_44","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar add-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt;</code> to grant access to an agent pool.</p> <pre><code>$ java -jar lightrunc add-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated   </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar add-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; &lt;PoolName2</code> to grant access to multiple agent pools.</p> <pre><code>$ java -jar lightrunc add-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 agentPool2\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#remove-access-to-pools","title":"<code>remove-access-to-pools</code>","text":"<p>The <code>remove-access-to-pools</code> command removes the access that a group has to an agent pool.</p>"},{"location":"cli/cli_reference/#synopsis_50","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar remove-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; [PoolName2...]</code></p>"},{"location":"cli/cli_reference/#options_34","title":"Options","text":"Option Description Group ID The ID of the relevant group. PoolName Agent pool names."},{"location":"cli/cli_reference/#example_45","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt;</code> to remove access to an agent pool.</p> <pre><code>$ java -jar lightrunc remove-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated   </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; &lt;PoolName2</code> remove access to multiple agent pools.</p> <pre><code>$ java -jar lightrunc remove-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 agentPool2\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#delete-group","title":"<code>delete-group</code>","text":"<p>The <code>delete-group</code> command deletes a group.</p> <p>Warning</p> <p>A group cannot be restored once deleted.</p>"},{"location":"cli/cli_reference/#synopsis_51","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar delete-group &lt;Name&gt;</code></p>"},{"location":"cli/cli_reference/#options_35","title":"Options","text":"Option Description Name The name of the group."},{"location":"cli/cli_reference/#example_46","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar delete-group &lt;Name&gt;</code> <pre><code>$ java -jar lightrunc delete-group  8986ca74-7044-438b-840e-2e3a1ae8898f\nGroup (id: 8986ca74-7044-438b-840e-2e3a1ae8898f) successfully deleted\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#agent-pool","title":"<code>agent-pool</code>","text":"<ul> <li>The commands in this section are for managing users with the Lightrun Role-based access control (RBAC) feature.</li> <li>The Lightrun Role-based access control feature is only available to users on our Enterprise plan; please contact our support team for more information.</li> </ul>"},{"location":"cli/cli_reference/#create-agent-pool","title":"<code>create-agent-pool</code>","text":"<p>The <code>create-agent-pool</code> command creates a new agent pool.</p>"},{"location":"cli/cli_reference/#synopsis_52","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar create-agent-pool &lt;Name&gt; [Description]</code></p>"},{"location":"cli/cli_reference/#options_36","title":"Options","text":"Option Description Name The name of the new agent pool. email Agent pool description."},{"location":"cli/cli_reference/#example_47","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar create-agent-pool &lt;Name&gt; [Description]</code>.         <pre><code>$ java -jar lightrunc create-agent-pool agentPool1 new-agent-pool         Agent pool 'agentPool1' (id: 77eb44fc-e2e7-4358-b43d-ad1942b0b7f6) successfully created\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#agent-pool_1","title":"<code>agent-pool</code>","text":"<p>The <code>agent-pool</code> command specifies the agent pool to be used by the command line. </p>"},{"location":"cli/cli_reference/#synopsis_53","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar agent-pool &lt;AgentPoolId&gt;</code></p> <p>Note</p> <p>After setting an agent pool with the <code>agent-pool</code> command, all results returned by the command line will only be relevant to that agent pool. To run a command for another agent pool, add the <code>--agent-pool</code> flag to the command.</p> <pre><code>`java -jar lightrunc.jar &lt;current_command&gt; --agent-pool &lt;AgentPoolId&gt;`\n</code></pre>"},{"location":"cli/cli_reference/#options_37","title":"Options","text":"Option Description Agent Pool ID The ID of the relevant agent pool."},{"location":"cli/cli_reference/#example_48","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar agent-pool &lt;AgentPoolId&gt;</code> <pre><code>$ java -jar lightrunc agent-pool 77eb44fc-e2e7-4358-b43d-ad1942b0b7f6\n   Agent pool set to (id: 77eb44fc-e2e7-4358-b43d-ad1942b0b7f6) successfully. All following commands will use this agent pool.\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#update-agent-pool","title":"<code>update-agent-pool</code>","text":"<p>The  <code>update-agent-pool</code>  command updates the name or description of the agent pool.</p>"},{"location":"cli/cli_reference/#synopsis_54","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar update-agent-pool &lt;AgentPoolId&gt; [Name] [Description]</code></p>"},{"location":"cli/cli_reference/#options_38","title":"Options","text":"Option Description AgentPoolId The ID of the relevant agent pool. Name Enter the new name for the relevant agent pool. Description Enter the new description."},{"location":"cli/cli_reference/#example_49","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar update-agent-pool 385ee7e7-c526-41e6-9e70-ec4aee16abe3 Demo \"New description\"</code></p> <pre><code>   $ java -jar lightrunc.jar update-agent-pool &lt;AgentPoolId&gt; [Name] [Description]\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#delete-agent-pool","title":"<code>delete-agent-pool</code>","text":"<p>The <code>delete-agent-pool</code> command deletes an agent pool.</p> <p>Warning</p> <p>An agent pool cannot be restored once deleted.</p>"},{"location":"cli/cli_reference/#synopsis_55","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar delete-agent-pool &lt;AgentPoolId&gt;</code></p>"},{"location":"cli/cli_reference/#options_39","title":"Options","text":"Option Description Agent Pool ID The ID of the relevant agent pool."},{"location":"cli/cli_reference/#example_50","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar delete-agent-pool &lt;AgentPoolId&gt;</code></p> <pre><code>$ java -jar lightrunc delete-agent-pool 2f60469f-787b-41a0-8f39-5b4ae01c8495\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#assign-pii-redaction-to-agent-pool","title":"<code>assign-pii-redaction-to-agent-pool</code>","text":"<p>The  <code>assign-pii-redaction-to-agent-pool</code> assigns an PII redaction template to an agent pool.</p>"},{"location":"cli/cli_reference/#synopsis_56","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar assign-pii-redaction-to-agent-pool &lt;AgentPoolId&gt; &lt;PIIRedactionName&gt;</code></p>"},{"location":"cli/cli_reference/#options_40","title":"Options","text":"Option Description AgentPoolId The ID of the relevant agent pool. PIIRedactionName Enter the name of the PII redaction template."},{"location":"cli/cli_reference/#example_51","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar assign-pii-redaction-to-agent-pool &lt;AgentPoolId&gt; &lt;PIIRedactionName&gt;</code> <pre><code>java -jar lightrunc.jar assign-pii-redaction-to-agent-pool 6245f7aa-3132-4799-98a0-020bc9b606ab demo\nAgent pool (id: 6245f7cc-3132-4799-98a0-030bc9b606ab) successfully updated\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#get-agent-pool-key","title":"<code>get-agent-pool-key</code>","text":"<p>This <code>get-agent-pool-key</code> command gets the agent API key associated with the given agent pool. By default, it prints asterisks and copies the key to clipboard. To print the key to stdout, use <code>-o text</code>.</p>"},{"location":"cli/cli_reference/#synopsis_57","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar get-agent-pool-key &lt;PoolId&gt;</code></p>"},{"location":"cli/cli_reference/#options_41","title":"Options","text":"Option Description PoolId The ID of the relevant agent pool."},{"location":"cli/cli_reference/#example_52","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar get-agent-pool-key &lt;PoolId&gt;</code></p> <pre><code>         ```bash\n         $ java -jar lightrunc.jar get-agent-pool-key 823007b4-8782-11ed-8e17-0a666cdc13c9\n                      *********************************72b (Copied to clipboard)\n         ```\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#roles","title":"<code>roles</code>","text":"<ul> <li>The commands in this section are for managing users with the Lightrun Role-based access control (RBAC) feature.</li> <li>The Lightrun Role-based access control feature is only available to users on our Enterprise plan; please contact our support team for more information.</li> </ul>"},{"location":"cli/cli_reference/#list-roles","title":"<code>list-roles</code>","text":"<p>The <code>list-roles</code> command outputs all roles and their permissions.</p>"},{"location":"cli/cli_reference/#synopsis_58","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-roles</code></p>"},{"location":"cli/cli_reference/#example_53","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-roles</code> <pre><code>$ java -jar lightrunc list-roles                            \nID 5ad5a113-05d1-4033-9dba-20346dee2477 NAME Standard PERMISSIONS [STANDARD]\nID d5e25064-7321-4f37-824d-369430a205b3 NAME Privileged PERMISSIONS [STANDARD, IGNORE_QUOTA]\n</code></pre></li> </ul>"},{"location":"cli/cli_reference/#add-elevated-roles","title":"<code>add-elevated-roles</code>","text":"<p>The <code>add-elevated-roles</code> command grants a user an elevated role.</p>"},{"location":"cli/cli_reference/#synopsis_59","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-elevated-roles &lt;GroupId&gt; &lt;Email&gt;:&lt;RoleName&gt; [Email:RoleName...]</code></p>"},{"location":"cli/cli_reference/#options_42","title":"Options","text":"Option Description Group ID The ID of the relevant group. Email The email of the relevant user. RoleName The new role to be assigned to the user"},{"location":"cli/cli_reference/#example_54","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar add-elevated-roles &lt;GroupId&gt; &lt;Email&gt;:&lt;RoleName&gt;</code> to grant a user an elevated role.</p> <pre><code>$ java -jar lightrunc add-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com:Privileged \nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated  </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar add-elevated-roles &lt;GroupId&gt; &lt;Email&gt;:&lt;RoleName&gt; [Email:RoleName...]</code> to grant multiple users in a group elevated roles.</p> <pre><code>$ java -jar lightrunc add-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com:Privileged  user1@email:Privileged\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/cli_reference/#remove-elevated-roles","title":"<code>remove-elevated-roles</code>","text":"<p>The <code>remove-elevated-roles</code> command removes the elevated role assigned to a user.</p>"},{"location":"cli/cli_reference/#synopsis_60","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar remove-elevated-roles &lt;GroupId&gt; &lt;Email1&gt; [Email2...]</code></p>"},{"location":"cli/cli_reference/#options_43","title":"Options","text":"Option Description Group ID The ID of the relevant group. Email The email of the relevant user."},{"location":"cli/cli_reference/#example_55","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-elevated-roles &lt;GroupId&gt; &lt;Email&gt;</code> to remove the elevated role granted to a user.</p> <pre><code>$ java -jar lightrunc remove-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated  </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-elevated-roles &lt;GroupId&gt; &lt;Email&gt; [Email..]</code> to remove the elevated role granted to multiple users.</p> <pre><code>$ java -jar lightrunc remove-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email user1@email\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/installation/","title":"Installing the Lightrun CLI","text":""},{"location":"cli/installation/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>Java installed on your local machine.</li> </ul>"},{"location":"cli/installation/#install-the-lightrun-cli","title":"Install the Lightrun CLI","text":"<ol> <li> <p>Download the Lightrun Download CLI JAR from the Start using Lightrun section of the Lightrun Management Portal.</p> <p></p> </li> <li> <p>Open your terminal and navigate to the folder where the downloaded <code>lightrunc.jar</code> is stored.</p> </li> <li>Set the sever URL for the CLI <code>java -jar lightrunc.jar server-url app.lightrun.com</code>.     <pre><code>$ java -jar lightrunc.jar server-url app.lightrun.com\n</code></pre></li> </ol> <p>After the Lightrun CLI has been installed, the next step is to authenticate the Lightrun CLI.</p>"},{"location":"cli/manager_cli_reference/","title":"Lightrun Manager CLI Commands","text":"<p>This reference describe the Lightrun CLI commands, options, and parameters available to Lightrun Administrators.</p> <p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p>"},{"location":"cli/manager_cli_reference/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>Installed the Lightrun CLI on your local machine.</li> <li>Authenticated the Lightrun CLI</li> </ul>"},{"location":"cli/manager_cli_reference/#user","title":"<code>user</code>","text":""},{"location":"cli/manager_cli_reference/#create-user","title":"<code>create-user</code>","text":"<p>The <code>create-user</code> command creates a new user based on the specified details.</p>"},{"location":"cli/manager_cli_reference/#synopsis","title":"Synopsis","text":"<pre><code>java -jar lightrunc.jar create-user &lt;FirstName&gt; &lt;LastName&gt; &lt;Email&gt; &lt;Role1&gt; &lt;Role2&gt;...-companyName &lt;YOUR_COMPANY_NAME&gt;\n</code></pre>"},{"location":"cli/manager_cli_reference/#options","title":"Options","text":"Option Description <code>Username</code> A unique name for the user <code>Email</code> A valid and unique email address <code>Role</code> Valid values: <code>ROLE_ADMIN</code> <code>ROLE_MANAGER</code> <code>ROLE_USER</code> ela na <code>ROLE_IGNORE_QUOTA</code>"},{"location":"cli/manager_cli_reference/#example","title":"Example","text":"<p>Example</p> <p>The following creates a new user with the User role for Dr. Dolittle with the user name dolittle when a Manager from the company DoctorCom runs the command.</p> <pre><code>java -jar lightrunc.jar create-user dolittle Dr. Dolittle dolittle@doctor.com ROLE_USER\n</code></pre> <p>When you press Enter, the terminal requests a password for the new user. </p> <p>Enter a password, press Enter and the terminal prints: </p> <p><code>User successfully created in company DoctorCom</code></p>"},{"location":"cli/manager_cli_reference/#delete-user","title":"<code>delete-user</code>","text":"<p>The <code>delete-user</code> command deletes a specified user.</p> <p>Warning</p> <p>A user cannot be restored once deleted.</p> <p>Note</p> <p>The user must first be deactivated before they can be deleted. Deactivate directly from the Management Portal by navigating to Manager-&gt;User management.</p>"},{"location":"cli/manager_cli_reference/#synopsis_1","title":"Synopsis","text":"<pre><code>java -jar lightrunc.jar delete-user &lt;username&gt;\n</code></pre>"},{"location":"cli/manager_cli_reference/#options_1","title":"Options","text":"Option Description <code>Username</code> the email address associated with the user that is to be deleted"},{"location":"cli/manager_cli_reference/#example_1","title":"Example","text":"<p>Example</p> <pre><code>$ java -jar lightrunc.jar delete-user SMITHJ@acme.com\nUser Deleted\n</code></pre>"},{"location":"cli/rbac/","title":"Lightrun RBAC CLI Commands","text":"<p>This reference describe the Lightrun CLI commands, options, and parameters available to Lightrun Administrators.</p>"},{"location":"cli/rbac/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>Created your Lightrun account.</li> <li>Installed the Lightrun CLI on your local machine.</li> <li>Authenticated the Lightrun CLI</li> </ul>"},{"location":"cli/rbac/#before-your-begin","title":"Before your begin","text":"<ul> <li>The commands in this reference are for managing users with the Lightrun Role-based access control (RBAC) feature.</li> <li>The Lightrun Role-based access control feature is only available to users on our Enterprise plan; please contact our support team  for more information.</li> <li>Make sure to read the User management concepts guide before starting this tutorial to have a basic understanding of how user management works in Lightrun.</li> </ul>"},{"location":"cli/rbac/#groups-access","title":"<code>groups &amp; access</code>","text":""},{"location":"cli/rbac/#create-group","title":"<code>create-group</code>","text":"<p>The <code>create-group</code> command creates a group of users.</p>"},{"location":"cli/rbac/#synopsis","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar create-group &lt;Name&gt;</code></p>"},{"location":"cli/rbac/#options","title":"Options","text":"Option Description Name The name of the group."},{"location":"cli/rbac/#example","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar create-group sysadmins</code> to create a new group named <code>sysadmins</code>.       <pre><code>$ java -jar lightrunc create-group sysadmins                       \nGroup 'sysadmins' (id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b) successfully created\n</code></pre></li> </ul>"},{"location":"cli/rbac/#update-group-name","title":"<code>update-group-name</code>","text":"<p>The <code>update-group-name</code> command updates the name of a group.</p>"},{"location":"cli/rbac/#synopsis_1","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar update-group-name &lt;GroupId&gt; &lt;Name&gt;</code></p>"},{"location":"cli/rbac/#options_1","title":"Options","text":"Option Description Group ID The ID of the relevant group. Name The group\u2019s new name."},{"location":"cli/rbac/#example_1","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar update-group-name &lt;group id&gt; &lt;new_name&gt;</code> to update the name of a group.       <pre><code>$ java -jar lightrunc update-group-name  5f8881b7-3e04-48ab-9bba-b2d1b9870a8b sys-managers\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre></li> </ul>"},{"location":"cli/rbac/#list-groups","title":"<code>list-groups</code>","text":"<p>The <code>list-groups</code> command returns a list of all groups available to the current user.</p> <p>Note</p> <p>The <code>list-groups</code> command will return all groups in the Lightrun organization if the user is a System Administrator.</p>"},{"location":"cli/rbac/#synopsis_2","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-groups</code></p>"},{"location":"cli/rbac/#example_2","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-groups</code>.       <pre><code>$ java -jar lightrunc list-groups          \nID 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b NAME sysadmins USERS COUNT 0 GROUP ADMINS N/A\nID b1603a77-661c-44c6-89de-dfd1d126f0c9 NAME 664379ed-7b49-472b-9d08-19d2ab3b0c84 USERS COUNT 1 GROUP ADMINS N/A\nPage 1 of 1\n</code></pre></li> </ul>"},{"location":"cli/rbac/#list-accesses","title":"<code>list-accesses</code>","text":"<p>The <code>list-accesses</code> command returns the role, elevated users, and agent pools associated with a group.</p>"},{"location":"cli/rbac/#synopsis_3","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-accesses &lt;GroupId&gt;</code></p>"},{"location":"cli/rbac/#options_2","title":"Options","text":"Option Description Group ID The ID of the relevant group."},{"location":"cli/rbac/#example_3","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-accesses &lt;GroupId&gt;</code>.       <pre><code>$ java -jar lightrunc list-accesses  5f8881b7-3e04-48ab-9bba-b2d1b9870a8b\nGroup \"5f8881b7-3e04-48ab-9bba-b2d1b9870a8b\" has access to agent-pools [Default Agent Pool] with role \"Standard\"\n</code></pre></li> </ul>"},{"location":"cli/rbac/#update-group-role","title":"<code>update-group-role</code>","text":"<p>The <code>update-group-role</code> command updates the role assigned to a group. </p>"},{"location":"cli/rbac/#synopsis_4","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar update-group-role &lt;GroupId&gt; &lt;RoleName&gt;</code></p>"},{"location":"cli/rbac/#options_3","title":"Options","text":"Option Description Group ID The ID of the relevant group. Role Name The role that should be assigned to the group. A group can be assigned one of the following roles.- Standard- Privileged"},{"location":"cli/rbac/#example_4","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar update-group-role &lt;GroupId&gt; &lt;RoleName&gt;</code>.       <pre><code>$ java -jar lightrunc update-group-role  5f8881b7-3e04-48ab-9bba-b2d1b9870a8b privileged\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre></li> </ul>"},{"location":"cli/rbac/#add-group-members","title":"<code>add-group-members</code>","text":"<p>The <code>add-group-members</code> adds users to a group.</p>"},{"location":"cli/rbac/#synopsis_5","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-group-members &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/rbac/#options_4","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/rbac/#example_5","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar add-group-members &lt;GroupId&gt; &lt;email&gt;</code> to add a user to a group.</p> <pre><code>$ java -jar lightrunc add-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar add-group-members &lt;GroupId&gt; email1, email2</code> to add multiple users to a group.</p> <pre><code>$ java -jar lightrunc add-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#remove-group-members","title":"<code>remove-group-members</code>","text":"<p>The <code>remove-group-members</code> removes users from a group.</p>"},{"location":"cli/rbac/#synopsis_6","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar remove-group-members &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/rbac/#options_5","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/rbac/#example_6","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-group-members &lt;GroupId&gt; &lt;email&gt;</code> to add a user to a group.</p> <pre><code>$ java -jar lightrunc remove-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-group-members &lt;GroupId&gt; email1, email2</code> to add multiple users to a group.</p> <pre><code>$ java -jar lightrunc remove-group-members 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#promote-to-group-admins","title":"<code>promote-to-group-admins</code>","text":"<p>The <code>promote-to-group-admins</code> command promotes a user to a group admin role.</p>"},{"location":"cli/rbac/#synopsis_7","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar promote-to-group-admins &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/rbac/#options_6","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/rbac/#example_7","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar promote-to-group-admins &lt;GroupId&gt; &lt;email&gt;</code> to promote a user to a group admin.</p> <pre><code>$ java -jar lightrunc promote-to-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar promote-to-group-admins &lt;GroupId&gt; email1, email2</code> to promote multiple users to group admin.</p> <pre><code>$ java -jar lightrunc promote-to-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#demote-from-group-admins","title":"<code>demote-from-group-admins</code>","text":"<p>The <code>demote-from-group-admins</code> command removes a user as a group admin.</p>"},{"location":"cli/rbac/#synopsis_8","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar demote-from-group-admins &lt;GroupId&gt; [email...]</code></p>"},{"location":"cli/rbac/#options_7","title":"Options","text":"Option Description Group ID The ID of the relevant group. email The email address of the relevant user."},{"location":"cli/rbac/#example_8","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar demote-from-group-admins &lt;GroupId&gt; &lt;email&gt;</code> to remove a user as a group admin.</p> <pre><code>$ java -jar lightrunc demote-from-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar demote-from-group-admins &lt;GroupId&gt; email1, email2</code> to remove multiple users as group admins.</p> <pre><code>$ java -jar lightrunc demote-from-group-admins 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user1@email.com user2@email.com \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#duplicate-group","title":"<code>duplicate-group</code>","text":"<p>The <code>duplicate-group</code> command duplicates a group of users.</p>"},{"location":"cli/rbac/#synopsis_9","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar duplicate-group &lt;GroupId&gt; &lt;Name&gt;</code></p>"},{"location":"cli/rbac/#options_8","title":"Options","text":"Option Description Group ID The ID of the group to be duplicated. Name The name of the duplicate group."},{"location":"cli/rbac/#example_9","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar duplicate-group &lt;GroupId&gt; &lt;Name&gt;</code> <pre><code>$ java -jar lightrunc duplicate-group 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b newgroupname\nGroup 'newgroupname' (id: 2d71546a-6f5f-47d4-9754-73ee9ccfc959) successfully created  </code></pre></li> </ul>"},{"location":"cli/rbac/#add-access-to-pools","title":"<code>add-access-to-pools</code>","text":"<p>The <code>add-access-to-pools</code> command grants a group access to an agent pool.</p>"},{"location":"cli/rbac/#synopsis_10","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; [PoolName1...]</code></p>"},{"location":"cli/rbac/#options_9","title":"Options","text":"Option Description Group ID The ID of the relevant group. PoolName Agent pool names."},{"location":"cli/rbac/#example_10","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar add-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt;</code> to grant access to an agent pool.</p> <pre><code>$ java -jar lightrunc add-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated   </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar add-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; &lt;PoolName2</code> to grant access to multiple agent pools.</p> <pre><code>$ java -jar lightrunc add-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 agentPool2\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#remove-access-to-pools","title":"<code>remove-access-to-pools</code>","text":"<p>The <code>remove-access-to-pools</code> command removes the access that a group has to an agent pool.</p>"},{"location":"cli/rbac/#synopsis_11","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar remove-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; [PoolName2...]</code></p>"},{"location":"cli/rbac/#options_10","title":"Options","text":"Option Description Group ID The ID of the relevant group. PoolName Agent pool names."},{"location":"cli/rbac/#example_11","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt;</code> to remove access to an agent pool.</p> <pre><code>$ java -jar lightrunc remove-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 \nGroup with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated   </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-access-to-pools &lt;GroupId&gt; &lt;PoolName1&gt; &lt;PoolName2</code> remove access to multiple agent pools.</p> <pre><code>$ java -jar lightrunc remove-access-to-pools 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b agentPool1 agentPool2\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#delete-group","title":"<code>delete-group</code>","text":"<p>The <code>delete-group</code> command deletes a group.</p> <p>Warning</p> <p>A group cannot be restored once deleted.</p>"},{"location":"cli/rbac/#synopsis_12","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar delete-group &lt;Name&gt;</code></p>"},{"location":"cli/rbac/#options_11","title":"Options","text":"Option Description Name The name of the group."},{"location":"cli/rbac/#example_12","title":"Example","text":"<p>Example</p> <p>- run <code>java -jar lightrunc.jar delete-group &lt;Name&gt;</code> <pre><code>$ java -jar lightrunc delete-group  8986ca74-7044-438b-840e-2e3a1ae8898f\nGroup (id: 8986ca74-7044-438b-840e-2e3a1ae8898f) successfully deleted\n</code></pre></p>"},{"location":"cli/rbac/#agent-pool","title":"<code>agent-pool</code>","text":""},{"location":"cli/rbac/#create-agent-pool","title":"<code>create-agent-pool</code>","text":"<p>The <code>create-agent-pool</code> command creates a new agent pool.</p>"},{"location":"cli/rbac/#synopsis_13","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar create-agent-pool &lt;Name&gt; [Description]</code></p>"},{"location":"cli/rbac/#options_12","title":"Options","text":"Option Description Name The name of the new agent pool. email Agent pool description."},{"location":"cli/rbac/#example_13","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar create-agent-pool &lt;Name&gt; [Description]</code>.         <pre><code>$ java -jar lightrunc create-agent-pool agentPool1 new-agent-pool         Agent pool 'agentPool1' (id: 77eb44fc-e2e7-4358-b43d-ad1942b0b7f6) successfully created\n</code></pre></li> </ul>"},{"location":"cli/rbac/#agent-pool_1","title":"<code>agent-pool</code>","text":"<p>The <code>agent-pool</code> command specifies the agent pool to be used by the command line. </p>"},{"location":"cli/rbac/#synopsis_14","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar agent-pool &lt;AgentPoolId&gt;</code></p> <p>Note</p> <p>After setting an agent pool with the <code>agent-pool</code> command, all results returned by the command line will only be relevant to that agent pool. To run a command for another agent pool, add the <code>--agent-pool</code> flag to the command.</p> <pre><code>`java -jar lightrunc.jar &lt;current_command&gt; --agent-pool &lt;AgentPoolId&gt;`\n</code></pre>"},{"location":"cli/rbac/#options_13","title":"Options","text":"Option Description Agent Pool ID The ID of the relevant agent pool."},{"location":"cli/rbac/#example_14","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar agent-pool &lt;AgentPoolId&gt;</code> <pre><code>$ java -jar lightrunc agent-pool 77eb44fc-e2e7-4358-b43d-ad1942b0b7f6\n   Agent pool set to (id: 77eb44fc-e2e7-4358-b43d-ad1942b0b7f6) successfully. All following commands will use this agent pool.\n</code></pre></li> </ul>"},{"location":"cli/rbac/#delete-agent-pool","title":"<code>delete-agent-pool</code>","text":"<p>The <code>delete-agent-pool</code> command deletes an agent pool.</p> <p>Warning</p> <p>An agent pool cannot be restored once deleted.</p>"},{"location":"cli/rbac/#synopsis_15","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar delete-agent-pool &lt;AgentPoolId&gt;</code></p>"},{"location":"cli/rbac/#options_14","title":"Options","text":"Option Description Agent Pool ID The ID of the relevant agent pool."},{"location":"cli/rbac/#example_15","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar delete-agent-pool &lt;AgentPoolId&gt;</code> <pre><code>$ java -jar lightrunc delete-agent-pool 2f60469f-787b-41a0-8f39-5b4ae01c8495\n</code></pre></li> </ul>"},{"location":"cli/rbac/#roles","title":"<code>roles</code>","text":""},{"location":"cli/rbac/#list-roles","title":"<code>list-roles</code>","text":"<p>The <code>list-roles</code> command outputs all roles and their permissions.</p>"},{"location":"cli/rbac/#synopsis_16","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar list-roles</code></p>"},{"location":"cli/rbac/#example_16","title":"Example","text":"<p>Example</p> <ul> <li>run <code>java -jar lightrunc.jar list-roles</code> <pre><code>$ java -jar lightrunc list-roles                            \nID 5ad5a113-05d1-4033-9dba-20346dee2477 NAME Standard PERMISSIONS [STANDARD]\nID d5e25064-7321-4f37-824d-369430a205b3 NAME Privileged PERMISSIONS [STANDARD, IGNORE_QUOTA]\n</code></pre></li> </ul>"},{"location":"cli/rbac/#add-elevated-roles","title":"<code>add-elevated-roles</code>","text":"<p>The <code>add-elevated-roles</code> command grants a user an elevated role.</p>"},{"location":"cli/rbac/#synopsis_17","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar add-elevated-roles &lt;GroupId&gt; &lt;Email&gt;:&lt;RoleName&gt; [Email:RoleName...]</code></p>"},{"location":"cli/rbac/#options_15","title":"Options","text":"Option Description Group ID The ID of the relevant group. Email The email of the relevant user. RoleName The new role to be assigned to the user"},{"location":"cli/rbac/#example_17","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar add-elevated-roles &lt;GroupId&gt; &lt;Email&gt;:&lt;RoleName&gt;</code> to grant a user an elevated role.</p> <pre><code>$ java -jar lightrunc add-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com:Privileged \nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated  </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar add-elevated-roles &lt;GroupId&gt; &lt;Email&gt;:&lt;RoleName&gt; [Email:RoleName...]</code> to grant multiple users in a group elevated roles.</p> <pre><code>$ java -jar lightrunc add-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com:Privileged  user1@email:Privileged\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"cli/rbac/#remove-elevated-roles","title":"<code>remove-elevated-roles</code>","text":"<p>The <code>remove-elevated-roles</code> command removes the elevated role assigned to a user.</p>"},{"location":"cli/rbac/#synopsis_18","title":"Synopsis","text":"<p><code>java -jar lightrunc.jar remove-elevated-roles &lt;GroupId&gt; &lt;Email1&gt; [Email2...]</code></p>"},{"location":"cli/rbac/#options_16","title":"Options","text":"Option Description Group ID The ID of the relevant group. Email The email of the relevant user."},{"location":"cli/rbac/#example_18","title":"Example","text":"<p>Example</p> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-elevated-roles &lt;GroupId&gt; &lt;Email&gt;</code> to remove the elevated role granted to a user.</p> <pre><code>$ java -jar lightrunc remove-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email.com\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated  </code></pre> </li> </ul> <ul> <li> <p>run <code>java -jar lightrunc.jar remove-elevated-roles &lt;GroupId&gt; &lt;Email&gt; [Email..]</code> to remove the elevated role granted to multiple users.</p> <pre><code>$ java -jar lightrunc remove-elevated-roles 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b user@email user1@email\nAccess to group with id: 5f8881b7-3e04-48ab-9bba-b2d1b9870a8b successfully updated\n</code></pre> </li> </ul>"},{"location":"datasecurity/overview/","title":"Data security in Lightrun","text":"<p>Permissions</p> <p>Security management requires administrative permissions.</p> <p>Lightrun places a strong emphasis on data security, considering it a fundamental aspect of software development. The platform demonstrates its commitment by implementing stringent security measures and adhering to the highest security standards. </p> <p>As part of Lightrun's commitment to protecting your data, our platform adheres to enterprise-grade certifications, including ISO-27001, SOC-2, GDPR, and HIPAA certifications. Additionally, the platform employs certificate pinning on both the client and agent sides. This proactive approach enhances security by ensuring that only authorized certificates are accepted during the communication process. </p> <p>Lightrun ensures secure data transmission by employing encrypted communication channels and supporting TLS 1.2 for all services. Additionally, customer data hosted in AWS is safeguarded using Amazon's AES-256 encryption algorithm on Elastic Block Store (EBS) and Relational Database Service (RDS) databases.</p>"},{"location":"datasecurity/overview/#lightrun-data-security-features","title":"Lightrun data security features","text":"<p>Lightrun offers the following features for ensuring that sensitive data is not exposed to unauthorized individuals:</p>"},{"location":"datasecurity/overview/#pii-redaction","title":"PII redaction","text":"<p>The Lightrun PII (Personal Identifiable Information) redaction feature protects user privacy and improves data security within Production environments. By preventing the exposure of sensitive data in snapshots and dynamic logs this feature not only supports individual\u2019s privacy but also ensures compliance with data protection regulations. Organizations applying PII redaction demonstrate a commitment to data privacy, thereby enhancing trust and reputation. For more information, see Lightrun PII Redaction Overview.</p>"},{"location":"datasecurity/overview/#blocklists","title":"Blocklists","text":"<p>Blocklists can be used to prevent Lightrun actions from being inserted in classes that might expose sensitive data. Files and packages that include the patterns you've specified in the Blocklist table are protected and your team won't be able to add actions into those code areas. You can configure blocklists to include package and class names, file names, and directory paths. You can also add blocklist exceptions for any relevant subclasses in which you want to allow action insertion. Each time your application is started, the agent's blocklist configuration is downloaded and applied to all future actions. For more information, see Blocklists.</p>"},{"location":"datasecurity/overview/#audit-lightrun-system-usage","title":"Audit Lightrun system usage","text":"<p>Lightrun maintains a record of your organization's Lightrun system usage, including actions, and changes that are logged and can be audited, which is crucial for observing continuous compliance, performing system audits, and maintaining security. The stored audit logs include data about activities related to the Management Portal, Lightrun plugins, and agents. For more information, see Audit System Usage.</p>"},{"location":"datasecurity/overview/#data-protection-by-lightrun-deployment-types","title":"Data protection by Lightrun deployment types","text":"Deployment type Description Data transmission strategies Encryption as REST SaaS Lightrun hosts the server components in the highly-secure and available AWS environment, based on hardened virtual servers and services and supports these SaaS deployment types:  \u2022 Multi-tenant: Infrastructure is shared with other customers.  \u2022 Single tenant: Isolated from other customers  \u2022 Action data is sent from agents to Lightrun   as a gateway to transmission to developers. \u2022 All the communication is encrypted in  transit via TLS 1.2.  \u2022 Data stored in the Lightrun server is configurable and can be redacted by customers to just the bare minimum required to transfer the data to the developers who requested it.  All customers\u2019 data hosted in AWS is encrypted using Amazon\u2019s AES-256 encryption algorithm and stored on Elastic Block Store (EBS) storage and Relational Database Service (RDS) databases On Premise Lightrun is installed within your organizational network or through a private cloud, via Docker or Kubernetes. No customer data leaves the customer premises or is sent to Lightrun. All customers' data is stored in a self managed Database. We strongly recommend encrypting the database using industry standards."},{"location":"datasecurity/overview/#strategies-for-securing-your-data","title":"Strategies for securing your data","text":"<p>We recommend using the following measures for keeping data privacy and safeguarding your customers\u2019 sensitive information:</p> <ul> <li>Manage developers\u2019 access to runtime environments, such as production, using Lightrun role based access control.</li> <li>Ensure that only authorized individuals can access environments which contains sensitive user data.</li> <li>Create separate agent pools for environments which contain sensitive users data and use them when applying access controls.</li> <li>Connect Lightrun with your identity management system and leverage the SAML and SCIM integrations to ensure that only authorized developers have access to Lightrun.</li> <li>Configure PII redaction rules for both variable names and values to make sure that sensitive data is not accessible to Lightrun actions.</li> <li>Use standard regular expression patterns for redacting sensitive information such credit card numbers, secrets such as tokens and API keys, email addresses and social security numbers.</li> <li>Add blocklist rules for preventing developers from adding Lightrun actions in sensitive code sections, for example one which deals with payment processing or user\u2019s personal details.</li> <li>Routinely review Lightrun audit logs to identify any instances where an attempt was made to log sensitive data.</li> <li>Consider forwarding the audit logs to you SIEM solution.</li> </ul>"},{"location":"dotnet/agent-configuration/","title":"Customize the Lightrun .NET agent","text":"<p>According to the Lightrun actions you specify, the agent dynamically inserts logs and snapshots in the target environment. The agent's behavior when performing these tasks is governed by a set of user-configurable properties.</p>"},{"location":"dotnet/agent-configuration/#agent-properties","title":"Agent properties","text":"<p>You can specify the agent properties within your code, by using environment variables, or using an <code>agent.config</code> file.</p>"},{"location":"dotnet/agent-configuration/#specifying-agent-properties-within-the-code","title":"Specifying agent properties within the code","text":"<p>You can specify your agent configuration parameters by entering the parameters in the <code>LightrunAgent.Start</code> command. </p> <p>For example, </p> <pre><code>LightrunAgent.Start(new AgentOptions {\n    Secret = \"&lt;LIGHTRUN_SECRET&gt;\",\n    PropertyName1 = \"value\" ,\n    PropertyName2 = \"value\",\n});\n</code></pre>"},{"location":"dotnet/agent-configuration/#specifying-agent-properties-using-environment-variables","title":"Specifying agent properties using environment variables","text":"<p>An alternative method for configuring agent properties is to enter them as environment variables. This can be done by adding a <code>LIGHTRUN_</code> prefix to the configuration parameter. For example, to set the Lightrun secret key and server url in a <code>.env</code> file, we would use something similar to the following:</p> <pre><code>//.env file\n\nLIGHTRUN_SECRET=&lt;lightrun_secret_key&gt;\nLIGHTRUN_SERVERURL=&lt;lightrun_server_url&gt;\n</code></pre>"},{"location":"dotnet/agent-configuration/#specifying-agent-properties-using-an-agentconfig-file","title":"Specifying agent properties using an <code>agent.config</code> file","text":"<p>You can also specify the agent properties using an <code>agent.config</code> file. Add the path to the <code>agent.config</code> file in your <code>LightrunAgent.Start</code> command using the <code>AgentConfigFile</code> parameter as shown in the example below.</p> <pre><code>LightrunAgent.Start(new AgentOptions {\n   AgentConfigFile: '&lt;PATH-TO-CONFIG&gt;'\n});\n</code></pre>"},{"location":"dotnet/agent-configuration/#order-of-precedence","title":"Order of precedence","text":"<p>When an application is run with a Lightrun agent, properties are defined in the following order of precedence:</p> <ol> <li>Start method parameter</li> <li>Environment variables</li> <li><code>agent.config</code> file</li> </ol> <p>Important</p> <p>Whenever changing agent configurations, save the changes and restart the application to apply the new configuration.</p>"},{"location":"dotnet/agent-configuration/#configuration-parameters","title":"Configuration parameters","text":"<p>The following table lists the configuration parameters that can be set in the <code>agent.config</code> file, environment variables, or the <code>LightrunAgent.Start</code> command.</p> Parameter name Description Type Default value <code>ServerUrl</code> Lightrun server URL URL app.lightrun.com <code>Secret</code> Your organization's Lightrun secret key String <code>Tags</code> An array of strings containing the tags to register the agent with. See metadata and tagging for more information. Array Production <code>DisplayName</code> A unique name to identify the agent. String <code>AgentConfigFile</code> The path to the config file with extra agent properties String agent.config <code>AgentLogTargetDir</code> The directory in which internal agent logs file are stored. String Temp Folder <code>LogToStandardError</code> Switch to logging to STDERR instead of logging to a file. Boolean false <code>AlsoLogToStandardError</code> Enable logging to STDERR additionally to logging to a file. Boolean false <code>AgentLogLevel</code> Minimum log level that is written to the log file (or to the Standard Error if such logging is enabled) AgentLogLevel <code>AgentLogLevel.Information</code> <code>StdErrThreshold</code> Minimum log level that is written to the Standard Error. AgentLogLevel <code>AgentLogLevel.Fatal</code> <code>AgentLogMaxFileSize</code> Maximum size in MB that a log file can reach before being rotated. Integer 10 <code>AgentLogMaxFileCount</code> Maximum number of rotated log files to keep, old files get deleted when this value is reached. Integer 5 <code>RegistrationMetadataFile</code> Path to a JSON file containing the agent's registration metadata (such as tags, and display name). String <code>CertificatePinningEnabled</code> Enable/disable certificate pinning. When set to false, the agent will not perform certificate pinning when communicating with the API endpoint. Boolean true <code>PinnedCerts</code> 64 character sha256 public key certificates hashes for certificate pinning. String <code>ee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12</code> <code>RedactionEnabled</code> Enable personally identifiable information (PII) redaction at the agent's side (may affect the application's performance) Boolean false <code>CustomDynamicLogger</code> Custom logger for dynamic logs. Follow the instructions here to configure the <code>CustomDynamicLogger</code>. IDynamicLogger <code>MaxStringLength</code> Truncates strings to the set size. Integer 1000 <code>MaxCollectionSize</code> Truncate collections to set size. Integer 100 <code>MaxFieldCount</code> Maximum number of fields to capture on an object. Integer 20 <code>MaxDepthToSerialize</code> Maximum object depth to serialize. Integer 3 <code>MaxTimeToSerializeMs</code> Maximum time in milliseconds for serializing an object. Integer 200 <code>MaxActionCost</code> Maximum cost in % of CPU consumption of breakpoint callback. Double 1 <code>IgnoreQuota</code> Disable CPU cost limitation. Boolean false <code>RequestTimeoutMs</code> Timeout (in ms) used for long-polling the server. Integer 20000 <code>UseSandbox</code> Enable/disable sandbox for evaluating expressions Boolean false <code>LogCollectionCooldownMs</code> How much time to wait (in milliseconds) between log collection requests from the server. Integer 0 <code>LogCollectionMaxBytes</code> The maximum volume of log data to send to the server upon log collection request. Integer 0"},{"location":"dotnet/agent/","title":"Install the Lightrun .NET agent","text":"<p>The Lightrun agent is at the core of the Lightrun platform. It's the component that communicates requests for runtime observability to your running code, and gathers and relays the requested data back to the Lightrun Server, and eventually the developer's IDE.</p> <p>Before running the agent, it must be installed on the system where your code to be monitored is running. In addition, you will need to provide credentials which will be used when the agent connects to the Lightrun server.</p> <p>System requirements</p> <p>Lightrun for .NET supports Windows and Linux. For more information, please check out the .NET agent system requirements here.</p>"},{"location":"dotnet/agent/#direct-installation","title":"Direct installation","text":"<ol> <li>Open a terminal and change to the working directory where your project is located.</li> <li> <p>Install the .NET agent with the NuGet package manager:     <pre><code>dotnet add package Lightrun\n</code></pre></p> </li> <li> <p>Add the Lightrun agent to the top of your application\u2019s main file. (i.e., <code>Program.cs</code> file):     <pre><code>using Lightrun;\n</code></pre></p> </li> <li> <p>Add the following lines of code to the entry point of your application.     <pre><code>LightrunAgent.Start(new AgentOptions {\n    Secret = \"&lt;LIGHTRUN_SECRET&gt;\",\n});\n</code></pre></p> <p>Getting Company Details</p> <p>You can get your <code>&lt;LIGHTRUN_SECRET&gt;</code> key by logging into the Management Portal and inspecting the Set up an agent section.</p> <p>Note</p> <p>Other configuration parameters can also be passed here. For example, add the <code>ServerUrl</code> parameter to the <code>LightrunAgent.Start</code> command when using Lightrun On premise.</p> <pre><code>  LightrunAgent.Start(new AgentOptions {\n      Secret = \"&lt;LIGHTRUN_SECRET&gt;\",\n      ServerUrl = \u201c&lt;server_url&gt;\u201d\n  });\n</code></pre> </li> <li> <p>Make sure your project file (<code>.csproj</code>) includes the following:       <pre><code> &lt;PropertyGroup&gt;\n      &lt;DebugType&gt;portable&lt;/DebugType&gt;\n &lt;/PropertyGroup&gt;\n</code></pre></p> </li> <li> <p>Set the required environment variables for automatic instrumentation to attach to your application. For a list of the variables, see the 'Required Environment Variables' section.</p> </li> <li>Run your application.</li> </ol>"},{"location":"dotnet/agent/#required-environment-variables","title":"Required Environment Variables","text":"<p>For the Lightrun agent to attach to the .NET runtime, set the following environment variables.</p>"},{"location":"dotnet/agent/#use-predefined-lightrunsh-recommended-for-linux","title":"Use predefined <code>lightrun.sh</code> (Recommended for Linux)","text":"<p>The Lightrun package provides a <code>lightrun.sh</code> script to simplify setting these environment variables on Linux. When you build your project, the script is copied to the output directory, and to locate it, we recommend a straightforward search for <code>lightrun.sh</code>. The script can be used as follows:</p> <pre><code>PUBLISH_DIRECTORY/lightrun.sh dotnet YOUR_APP_ASSEMBLY.dll\n</code></pre> <p><code>PUBLISH_DIRECTORY</code> should be changed to the actual directory where the web app is published.</p>"},{"location":"dotnet/agent/#set-the-variables-manually","title":"Set the variables manually","text":"<p>.NET Core on Linux</p> <pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={FC15CFC2-6CE8-45DF-A754-079254E0077B}\nCORECLR_PROFILER_PATH=PUBLISH_DIRECTORY/lightrun/linux-x64/Lightrun.ClrProfiler.Native.so\n</code></pre> <p>.NET Core on Alpine Linux</p> <pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={FC15CFC2-6CE8-45DF-A754-079254E0077B}\nCORECLR_PROFILER_PATH=PUBLISH_DIRECTORY/lightrun/linux-musl-x64/Lightrun.ClrProfiler.Native.so\n</code></pre> <p>.NET Core on Windows</p> <pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={FC15CFC2-6CE8-45DF-A754-079254E0077B}\nCORECLR_PROFILER_PATH_64=PUBLISH_DIRECTORY\\lightrun\\win-x64\\Lightrun.ClrProfiler.Native.dll\nCORECLR_PROFILER_PATH_32=PUBLISH_DIRECTORY\\lightrun\\win-x86\\Lightrun.ClrProfiler.Native.dll\n</code></pre> <p>.Net Framework</p> <pre><code>COR_ENABLE_PROFILING=1\nCOR_PROFILER={FC15CFC2-6CE8-45DF-A754-079254E0077B}\nCOR_PROFILER_PATH_64=PUBLISH_DIRECTORY\\lightrun\\win-x64\\Lightrun.ClrProfiler.Native.dll\nCOR_PROFILER_PATH_32=PUBLISH_DIRECTORY\\lightrun\\win-x86\\Lightrun.ClrProfiler.Native.dll\n</code></pre> <p>Note</p> <p><code>PUBLISH_DIRECTORY</code> should be changed to the actual directory where the web app is published.</p>"},{"location":"dotnet/csharp-expressions/","title":"C# expressions support in .NET agent","text":"<p>As C# developers, leveraging Lightrun's capabilities to integrate C# expressions within actions enhances your debugging efficiency. Proceed to review the supported expressions, Lightrun's processing methods, and considerations regarding limitations.</p> <p>Important</p> <p>During the evaluation of C# expressions, Lightrun does not modify or affect any application data.</p>"},{"location":"dotnet/csharp-expressions/#supported-c-expression-types-in-lightrun-actions","title":"Supported C# expression types in Lightrun actions","text":"<p>Lightrun facilitates various C# expressions within actions. Supported expressions include:</p> <ul> <li>Log format: Enclose expressions with curly braces to log variable values or method returns during runtime. For example, when adding a log, an expression can appear inside curly braces <code>({})</code> such as <code>My variable</code> value is <code>{myVar}</code> and my method returned <code>{myMethod()}</code>, resulting in the printed valiues of the corresponding variable or expression.</li> </ul> <ul> <li>Conditions: Utilize standard Boolean expressions within action expressions.</li> <li>Watch expressions: Query and monitor specific variables and method invocation results during runtime. </li> </ul>"},{"location":"dotnet/csharp-expressions/#c-expression-guidelines-and-limitations","title":"C# expression guidelines and limitations","text":""},{"location":"dotnet/csharp-expressions/#supported-c-syntax","title":"Supported C# syntax","text":"<p>The following C# language syntax is supported when setting expressions in actions:</p> Category Supported syntax Logical Operators <code>\\</code>,<code>\\</code>, <code>&amp;&amp;</code>, <code>\\</code>, <code>^</code>, <code>&amp;</code>, <code>==</code>, <code>!=</code> Comparison Operators <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> Shift Operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code> Arithmetic Operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> Unary Operators <code>+</code>, <code>-</code>, <code>!</code> Index Operators <code>Array[index]</code>, <code>List[index]</code>, <code>Dictionary[key]</code> Method Calls <code>Method(args)</code>, <code>this.Method(args)</code>, <code>object.Method(args)</code>, <code>delegate(args)</code> Field Access <code>Field</code>, <code>this.Field</code>, <code>object.Field</code> Property Access <code>Property</code>, <code>this.Property</code>, <code>object.Property</code> Literals <code>Integer</code>, <code>Double</code>, <code>Float</code>, <code>Character</code>, <code>String</code>, <code>true</code>/<code>false</code>/<code>null</code> literals"},{"location":"dotnet/csharp-expressions/#interface-duck-typing-support","title":"Interface Duck Typing support","text":"<p>Lightrun offers Interface Duck Typing support for setting C# expressions. This dynamic evaluation process enables expressions like <code>myVar.myField.myMethod()</code> to function seamlessly, even if the <code>myField</code> field is declared as an object. This flexibility enhances the versatility of the developer\u2019s debugging experience.</p> <p>As demonstrated in the following example, despite <code>myField</code> being declared as an  Object, Lightrun support for Interface Duck Typing allows the invocation of      <code>myMethod()</code>on <code>myField</code>. </p> <pre><code>object myField = new MyClass();\nvar myVar = new MyContainer(myField);\n\n// Interface Duck Typing supported by Lightrun\nvar result = myVar.myField.myMethod();\n</code></pre>"},{"location":"dotnet/csharp-expressions/#net-il-code-instruction-limitations","title":".NET IL Code Instruction limitations","text":"<p>From version 1.32, Lightrun supports a subset of .NET IL code instructions. Instructions involving native pointers are not supported due to their unsafe nature. To ensure safety, Lightrun implements essential operations internally or delegates them directly to the host VM when appropriate.</p> <p>The following IL code instructions are not supported:</p> <ul> <li> <p>Operations involving native Ints and pointers, primarily associated with unsafe code:</p> <ul> <li><code>Ldind_I</code></li> <li><code>Conv_Ovf_I_Un</code></li> <li><code>Conv_Ovf_U_Un</code></li> <li><code>Ldelem_I</code></li> <li><code>Stelem_I</code></li> <li><code>Conv_I</code></li> <li><code>Conv_Ovf_I</code></li> <li><code>Conv_Ovf_U</code></li> <li><code>Stind_I</code></li> <li><code>Arglist</code></li> <li><code>Ldvirtftn</code></li> <li><code>Localloc</code> </li> </ul> </li> </ul> <ul> <li> <p>Operations working with native memory, which cannot be controlled by the Lightrun VM:</p> <ul> <li><code>Cpblk</code> </li> <li><code>Initblk</code> </li> </ul> </li> </ul> <ul> <li>Long arrays, collections, or objects limitation<p>Due to performance constraints, Lightrun does not support long arrays, collections, or objects fully. If these data structures exceed certain thresholds, Lightrun may display partial information. To overcome this limitation, it's recommended to use more precise expressions for querying specific data. </p> </li> </ul>"},{"location":"dotnet/csharp-expressions/#type-representations-limitation","title":"Type representations limitation","text":"<p>Certain types, such as booleans and chars, lack special representations in IL code and are encoded as integers or unsigned integers. Consequently, in some cases, the type inference process may fail, leading to expressions like <code>a &gt; b</code> to be represented as integer <code>0 or 1</code> instead of their original types. </p>"},{"location":"dotnet/dynamic-logs-customization/","title":"Customize .NET agent dynamic logs for logger integration","text":"<p>Note</p> <p>This feature is available for the Lightrun .NET Agent.</p> <p>This guide describes how to customize Lightrun logs to align with your application's logger format. Lightrun supports the integration of dynamic logs into your application's existing logs, maintaining the application\u2019s log format and structure. If your application is configured to send logs to log management tools such as Kibana or New Relic, you can also include dynamic logs in real-time during runtime. These dynamic logs will be piped to those tools along with your application's static logs. For more information, see Dyanmic Logs Overview.</p>"},{"location":"dotnet/dynamic-logs-customization/#before-you-begin","title":"Before you begin","text":"<ul> <li>Keep in mind that later, when creating Lightrun logging actions, you will need to ensure that the Target for the Lightrun action(s) includes <code>Stdout</code>. </li> </ul>"},{"location":"dotnet/dynamic-logs-customization/#set-up-the-custom-dynamic-logger","title":"Set up the custom dynamic logger","text":"<p>To configure a custom dynamic logger, add the <code>CustomDynamicLogger</code> property, which is of type <code>IDynamicLogger</code>.</p> <pre><code>public interface IDynamicLogger\n{\nvoid Log(LogEntry entry);\n}\n</code></pre> <p>The <code>IDynamicLogger</code> interface consists of a single method, <code>Log</code>, which takes a LogEntry parameter containing the severity of the log entry and the corresponding message.</p> <p>By implementing this interface and passing the implementation object to the <code>CustomDynamicLogger</code> property, you can seamlessly integrate support for any logging library.</p> <p>Note</p> <p>While Lightrun offers a generic method for customizing dynamic logs, several popular logging frameworks are already supported without the need for implementing the <code>IDynamicLogger</code> interface. Instead, there exists a function specifically designed to convert the logger instance of a logging framework into an <code>IDynamicLogger</code>. It's important to note that the list of supported frameworks is continually expanding, reflecting our commitment to enhancing compatibility over time.</p>"},{"location":"dotnet/dynamic-logs-customization/#configure-the-dynamic-logger-with-log4net","title":"Configure the dynamic logger with Log4Net","text":"<p>You can set up a Log4Net instance as a custom dynamic logger for the Lightrun .NET agent. The <code>LogManager</code> is a class from Log4Net to request logger instances. <code>Log4NetLogger</code> is a function from the Lightrun agent that creates the <code>IDynamicLogger</code> instance from a Log4Net <code>ILog</code> instance.</p> <pre><code>// Get the logger instance.\n// It's assumed that the Log4Net logger is already configured by this time.\nvar lightrunLogger = LogManager.GetLogger(\"LIGHTRUN\");\n\nvar options = new AgentOptions\n{\n// ...\n// other options\n// ...\nCustomDynamicLogger = Log4NetLogger(lightrunLogger)\n};\n\nLightrunAgent.Start(options);\n</code></pre>"},{"location":"dotnet/metadata-and-tagging/","title":".NET: Metadata and Tags","text":""},{"location":"dotnet/metadata-and-tagging/#overview","title":"Overview","text":"<p>Running agents with .NET allow for two types of metadata to be specified: </p> <ul> <li><code>DisplayName</code> - identifies the application instance (for example, server name, company site)</li> <li><code>Tags</code> - groups the agents according to context (for example, staging, production, server, QA)</li> </ul> <p>The two properties can be specified either in your code with the <code>Lightrun.Start</code> command or in an <code>agent.metadata.json</code> file.</p>"},{"location":"dotnet/metadata-and-tagging/#specifying-agent-tags-within-the-code","title":"Specifying agent tags within the code","text":"<p>The metadata properties can be declared in the <code>Lightrun.Start</code> command, as follows: </p> <pre><code>LightrunAgent.Start(new AgentOptions {\n    Secret = \"&lt;LIGHTRUN_SECRET&gt;\",\n    DisplayName = \"&lt;agent_display_name&gt;\",\n    Tags = new[] {\"Production\", \"Main\", \"EastUS\"}\n});\n</code></pre>"},{"location":"dotnet/metadata-and-tagging/#specifying-agent-metadata-and-tags-within-a-json-file","title":"Specifying agent metadata and tags within a JSON file","text":"<ol> <li>Create an <code>agent.metadata.json</code> file in your project\u2019s repository.</li> <li>Insert your tag and display name into the <code>agent.metadata.json</code> file in the following format:     <pre><code>{\n\"registration\": {\n\"displayName\": \"&lt;DISPLAY_NAME&gt;\",\n\"tags\": [\n{\n\"name\": \"&lt;Tag1&gt;\"\n},\n{\n\"name\": \"&lt;Tag2&gt;\"\n},\n{\n\"name\": \"&lt;Tag3&gt;\"\n}\n]\n}\n}\n</code></pre></li> <li>Add the path to the <code>agent.metadata.json</code> file to your <code>Lightrun.Start</code> command.<pre><code>LightrunAgent.Start(new AgentOptions {\n    Secret = \"&lt;LIGHTRUN_SECRET&gt;\",\n    RegistrationMetadataFile = \"&lt;full-path-to-agent.metadata.json-file&gt;\"\n});\n</code></pre> </li> </ol>"},{"location":"dotnet/profiler-chaining/","title":"Profiler chaining for the Lightrun .NET agent","text":"<p>Starting from version 1.33, Lightrun introduces support for profiler chaining in the .NET agent allowing you to run multiple profiling tools simultaneously on the same application or system. This feature allows developers and operators to gather performance data and insights from different profiling tools concurrently without conflicts or interference.</p>"},{"location":"dotnet/profiler-chaining/#what-is-profiler-chaining-in-net","title":"What is profiler chaining in .NET?","text":"<p>In practical terms, profiler chaining enables the coexistence of multiple profiling agents or tools, such as Lightrun's .NET agent and other Application Performance Monitoring (APM) tools, such as Datadog on the same .NET application or environment. Each profiling tool can collect specific types of performance data or provide unique insights into the application's behavior.</p>"},{"location":"dotnet/profiler-chaining/#profiler-chaining-rules-and-limitations","title":"Profiler chaining rules and limitations","text":"<ul> <li>Lightrun can run with one additional profiler.</li> </ul> <ul> <li>Profiler chaining is supported in all environments where the .NET agent is supported, except for macOS.</li> </ul> <ul> <li>Chaining is generally supported for any tool that utilizes the .NET Profiling API. However, some tools may offer non-standard configuration flows that could lead to unsupported scenarios.   The following tools have been thoroughly tested and confirmed to function properly in a chained setup:     - Dynatrace     - Datadog     - OpenTelemetry (OTEL)</li> </ul> <ul> <li>Azure Application Insights is supported for monitoring and telemetry, but attaching an Azure Application Insights profiler isn't possible.</li> </ul>"},{"location":"dotnet/profiler-chaining/#handling-conflicts-on-actions-with-other-profilers","title":"Handling conflicts on actions with other profilers","text":"<p>The profiler chaining actively monitors all method-modifying operations requested by both profilers, in case of conflicts, they are resolved according to the precedence as follows:</p> <ul> <li>If a Lightrun user attempts to place an action on a method already modified by the other profiler, the instrumentation request will be blocked, and an error will be generated for the action.</li> <li>If the other profiler attempts to modify a method where a Lightrun action is present, the Lightrun action will be disabled with an error, allowing the other profiler\u2019s operation to take precedence.</li> </ul> <p>It's important to note that once the other profiler modifies a method, Lightrun actions will be prohibited on that method for the entire duration of the process.</p>"},{"location":"dotnet/profiler-chaining/#net-profiler-chaining-environment-variables","title":".NET profiler chaining environment variables","text":"<p>Configuring a .NET profiler involves setting up a series of environment variables. When employing profiler chaining, it's essential to configure variables for both Lightrun and any additional profiler that you intend to use. </p>"},{"location":"dotnet/profiler-chaining/#environment-variables-syntax-conventions","title":"Environment variables syntax conventions","text":"<p>Lightrun follows these conventions for it\u2019s environment variables:</p> <ul> <li>Prefixing for additional Profiling Tool Variables: Variables related to the additional profiling tool should be prefixed with <code>OTHER_</code>. </li> </ul> <ul> <li> <p>The Lightrun profiler chaining uses a unique set of values for its ID and path, distinct from those employed by the standard Lightrun profiler without chaining. </p> <p>For example, setting up a profile for Datadog will have the following GUID:</p> <p>The <code>OTHER_CORECLR_PROFILER=&lt;profiler id&gt;</code> environment variable is set as follows: </p> <p><code>OTHER_CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}</code></p> </li> </ul> Environment Variable Description Syntax <code>CORECLR_ENABLE_PROFILING</code> Determines whether profiling is active for the current process. By default, if you do not specify this setting, profiling is turned off, which is the same as assigning a value of 0. Integer <code>CORECLR_PROFILER</code> Indicates the GUID of the profiler to be loaded into the active process. String <code>CORECLR_PROFILER_PATH</code> Defines the path to the profiler DLL to be loaded into the current process, applicable to either 32-bit or 64-bit environments. When multiple variables are set, the bitness-specific variables override others, specifying the appropriate profiler version to use. String <code>OTHER_CORECLR_PROFILER</code> Identifies the <code>Other</code> alternative profile to run in parallel to Lightrun. String <code>OTHER_CORECLR_PROFILER_PATH</code> Specifies the path to the library of the Other profiler. String <p>For more information, see Runtime configuration options for debugging and profiling, </p>"},{"location":"dotnet/profiler-chaining/#example-run-lightrun-with-datadog-for-net-core-on-linux","title":"Example: Run Lightrun with Datadog for .NET Core on Linux","text":"<p>The following example illustrates how to configure the environment variables for running Lightrun and Datadog simultaneously on a Linux system with .NET Core.</p> <pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={C67C1FAC-843F-4C7A-9545-E09660CF10AB}\nCORECLR_PROFILER_PATH=PUBLISH_DIRECTORY/lightrun/linux-x64/ProfilerChain.so\nOTHER_CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}\nOTHER_CORECLR_PROFILER_PATH=/opt/datadog/linux-x64/Datadog.Trace.ClrProfiler.Native.so\n</code></pre>"},{"location":"dotnet/profiler-chaining/#configure-profiler-chaining-for-net-environments","title":"Configure profiler chaining for .NET environments","text":"<p>When configuring profiler chaining for .NET environments, consider the following setups.</p>"},{"location":"dotnet/profiler-chaining/#net-core-on-linux","title":".NET Core on Linux","text":"<pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={C67C1FAC-843F-4C7A-9545-E09660CF10AB}\nCORECLR_PROFILER_PATH=PUBLISH_DIRECTORY/lightrun/linux-x64/ProfilerChain.so\nOTHER_CORECLR_PROFILER=&lt;profiler id&gt;\nOTHER_CORECLR_PROFILER_PATH=&lt;profiler path&gt;\n</code></pre>"},{"location":"dotnet/profiler-chaining/#net-core-on-alpine-linux","title":".NET Core on Alpine Linux","text":"<pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={C67C1FAC-843F-4C7A-9545-E09660CF10AB}\nCORECLR_PROFILER_PATH=PUBLISH_DIRECTORY/lightrun/linux-musl-x64/ProfilerChain.so\nOTHER_CORECLR_PROFILER=&lt;profiler id&gt;\nOTHER_CORECLR_PROFILER_PATH=&lt;profiler path&gt;\n</code></pre>"},{"location":"dotnet/profiler-chaining/#net-core-on-windows","title":".NET Core on Windows","text":"<pre><code>CORECLR_ENABLE_PROFILING=1\nCORECLR_PROFILER={C67C1FAC-843F-4C7A-9545-E09660CF10AB}\nCORECLR_PROFILER_PATH_64=PUBLISH_DIRECTORY\\lightrun\\win-x64\\ProfilerChain.dll\nCORECLR_PROFILER_PATH_32=PUBLISH_DIRECTORY\\lightrun\\win-x86\\ProfilerChain.dll\nOTHER_CORECLR_PROFILER=&lt;profiler id&gt;\nOTHER_CORECLR_PROFILER_PATH_64=&lt;profiler path&gt;\nOTHER_CORECLR_PROFILER_PATH_32=&lt;profiler path&gt;\n</code></pre>"},{"location":"dotnet/profiler-chaining/#net-framework","title":".Net Framework","text":"<pre><code>COR_ENABLE_PROFILING=1\nCOR_PROFILER={C67C1FAC-843F-4C7A-9545-E09660CF10AB}\nCOR_PROFILER_PATH_64=PUBLISH_DIRECTORY\\lightrun\\win-x64\\ProfilerChain.dll\nCOR_PROFILER_PATH_32=PUBLISH_DIRECTORY\\lightrun\\win-x86\\ProfilerChain.dll\nOTHER_COR_PROFILER=&lt;profiler id&gt;\nOTHER_COR_PROFILER_PATH_64=&lt;profiler path&gt;\nOTHER_COR_PROFILER_PATH_32=&lt;profiler path&gt;\n</code></pre>"},{"location":"dotnet/system-requirements/","title":"Lightrun .NET agent system requirements","text":"<p>This page describes the IDE, operating system, and port requirements for running the Lightrun .NET agent.</p>"},{"location":"dotnet/system-requirements/#supported-operating-systems","title":"Supported Operating Systems","text":"OS Requirements Linux - Ubuntu : .NET and .NET Core versions (5.0, 6.0, 7.0, 8.0)  - Alpine Linux : Versions 3.16, 3.17, 3.18, and 3.19 Windows OS - .NET and .NET Core versions (5.0, 6.0, 7.0, 8.0) - .NET Framework v4.6.2 or later. - Windows Server 2016 (limited), 2019, and 2022 macOS - .NET and .NET Core versions (5.0, 6.0, 7.0, 8.0) -  macOS versions 12.0 and higher for Apple Chipset based Macs."},{"location":"dotnet/system-requirements/#lightrun-ide-plugins","title":"Lightrun IDE Plugins","text":"<ul> <li>VSCode (Version 1.72.0 or later)</li> <li>JetBrains Rider (Versions 2022.3.0 and later)</li> </ul>"},{"location":"dotnet/frameworks/iis-framework/","title":"Installing Lightrun .NET agent on IIS","text":"<p>You can install the Lightrun .NET agent on the IIS (Internet Information Services) framework, a flexible, secure, and manageable web server designed for hosting web apps.</p> <p>Follow the initial instructions for installing the agent using the Lightrun NuGet package, as outlined in the .NET Installation. Subsequently, proceed with the following steps to set the required environment variables, bearing in mind that this process differs in IIS and involves additional configuration steps for the application pool.</p> <p>Note</p> <p>In IIS, each web application belongs to an <code>Application Pool</code>. To debug an IIS application, the corresponding <code>Application Pool</code> must contain only that application. This limitation arises because debugging is enabled for the entire <code>Application Pool</code>,  and other web application won't function properly without the <code>Lightrun</code> agent.</p>"},{"location":"dotnet/frameworks/iis-framework/#configuring-the-application-pool-in-iis","title":"Configuring the application pool in IIS","text":"<ol> <li>Open the IIS Manager and select <code>Configuration Editor</code>.</li> <li>Select the <code>system.applicationHost/applicationPools</code> section.</li> <li> <p>Locate the required <code>Application Pool</code> to update its environment variables.</p> <p></p> <p>The environment variables differ for .NET Core and .Net Framework.</p> </li> <li> <p>Proceed to set the environment variables based on their respective types.</p> </li> </ol>"},{"location":"dotnet/frameworks/iis-framework/#set-net-core-environment-variables","title":"Set .NET Core environment variables","text":"<p>The .NET Core environment variables include the <code>CORCLR_</code> prefix and should be set as follows:</p> <pre><code>CORCLR_ENABLE_PROFILING=1\nCORCLR_PROFILER={FC15CFC2-6CE8-45DF-A754-079254E0077B}\nCORCLR_PROFILER_PATH_64=PUBLISH_DIRECTORY\\lightrun\\win-x64\\Lightrun.ClrProfiler.Native.dll\nCORCLR_PROFILER_PATH_32=PUBLISH_DIRECTORY\\lightrun\\win-x86\\Lightrun.ClrProfiler.Native.dll\n</code></pre> <p>Important</p> <p><code>PUBLISH_DIRECTORY</code> should be changed to the actual directory where the web application is published.</p> <p></p>"},{"location":"dotnet/frameworks/iis-framework/#set-net-framework-environment-variables","title":"Set .NET Framework environment variables","text":"<p>To initialize the Lightrun agent in .Net Framework, set the <code>processModel/loadUserProfile</code> property to <code>True</code>.</p> <p></p> <p>The .Net Framework environment variables include the <code>COR_</code> prefix and should be set as follows:</p> <pre><code>COR_ENABLE_PROFILING=1\nCOR_PROFILER={FC15CFC2-6CE8-45DF-A754-079254E0077B}\nCOR_PROFILER_PATH_64=PUBLISH_DIRECTORY\\lightrun\\win-x64\\Lightrun.ClrProfiler.Native.dll\nCOR_PROFILER_PATH_32=PUBLISH_DIRECTORY\\lightrun\\win-x86\\Lightrun.ClrProfiler.Native.dll\n</code></pre> <p>Important</p> <p><code>PUBLISH_DIRECTORY</code> should be changed to the actual directory where the web app is published.</p> <p></p> <p>Note</p> <p>Applicable only to .NET agent versions lower than 1.36.3.</p> <p><code>DebugType</code> should be set to embedded.</p> <p>Locating PDB files works differently for .Net Framework apps on IIS. Make sure your project file (<code>.csproj</code>) includes the following:   <pre><code> &lt;PropertyGroup&gt;\n      &lt;DebugType&gt;embedded&lt;/DebugType&gt;\n &lt;/PropertyGroup&gt;\n</code></pre></p>"},{"location":"integrations/app-dynamic/","title":"Integrate Lightrun dynamic logs with AppDynamics cloud monitoring","text":"<p>Lightrun allows Developers and DevOps Engineers to add real-time logs, metrics, and traces to live applications on demand. This means, in practice, that information that was once only accessible by pushing new code with more instrumentation or by profiling your application can now be added on demand - right from the IDE</p> <p>AppDynamics is a business observability platform that gives you a powerful view into the performance of your entire stack through the lens of your business. By integrating Lightrun with AppDynamics, you can insert dynamic logs into your live application with Lightrun and gain full business context around application issues in one place with AppDynamics log analytics.</p>"},{"location":"integrations/app-dynamic/#get-started","title":"Get Started","text":"<p>To integrate Lightrun with AppDynamics, configure your AppDynamics Analytics agent to collect Logs analytics data. Add the path to your Lightrun internal agent logs file as the Analytics agent source file. </p> <p>The captured logs data will appear in your AppDynamics Application Analytics UI. For more information on how to collect logs from a log file into AppDynamics, see Configure Log Analytics Using Job Files.</p>"},{"location":"integrations/datadog-events/","title":"Integrate Lightrun with Datadog","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Datadog aggregates metrics and events (from integrations such as Lightrun), provides a quick search, filter, and analysis tool to support open-ended exploration of your dynamic logs and data, and provides customizable dashboards for data visualization.</p> <p>Prerequisites</p> <p>Install and configure Datadog and copy the API key from your Datadog account. For additional assistance, refer to their troubleshooting guide as well.</p> <p>For Lightrun to send observability data to your integrations, ensure:</p> <ul> <li>The application has a running agent attached to it</li> <li>Your action Target is set to Plugin.</li> </ul>"},{"location":"integrations/datadog-events/#connect-to-and-disconnect-from-datadog","title":"Connect to and disconnect from Datadog","text":"<ol> <li> <p>Open a browser and log in to your Lightrun account. </p> </li> <li> <p>In the menu on the left, click Integrations.</p> <p>The page loads with all available integrations:</p> <p></p> </li> <li> <p>From the Integrations page, click Connect from the Datadog card.</p> <p>The Datadog Integration window pops up:</p> <p></p> </li> <li> <p>Paste the API key you copied from your Datadog account.</p> </li> <li> <p>Click Connect and wait for the toast message approving the connection.</p> </li> <li> <p>To disable the configuration, click Disconnect.</p> </li> </ol>"},{"location":"integrations/datadog-logs/","title":"Scrape Lightrun dynamic logs using Datadog","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>You can use Datadog to scrape the Lightrun log file and send the log data directly to you Datadog account.</p> <p>Prerequisites</p> <ul> <li>A Datadog account with API key access</li> <li>A Datadog Agent installed and configured with the aforementioned Datadog account</li> </ul>"},{"location":"integrations/datadog-logs/#configure-the-lightrun-agent-to-output-logs-in-json-format-jvm","title":"Configure the Lightrun agent to output logs in JSON format - JVM","text":"<p>By default, the Lightrun logs are written in XML format. The Datadog agent does not know how to parse XML logs without pre-processing, but it does know how to parse JSON Logs automatically.</p> <p>You can configure the aggent to output logs in JSON format in the Lightrun agent's config file, located in <code>&lt;PATH_TO_AGENT&gt;/agent.config</code>: <pre><code>com.lightrun.DynamicLog.FileHandler.formatter=json\n</code></pre></p> <p>Note</p> <p>You can make sure the output is set to JSON by tailing the log files (make sure your Lightrun agent is currently printing logs): <pre><code>tail -f /tmp/lightrun_file_handler_logs*.log\n</code></pre></p>"},{"location":"integrations/datadog-logs/#configure-the-lightrun-agent-to-output-logs-in-json-format-nodejs-python","title":"Configure the Lightrun agent to output logs in JSON format - Node.js &amp; Python","text":"<p>The Lightrun Node.js &amp; python agents write logs out to the console/stdout by default. </p> <p>There are 2 approaches you can take in order to make sure the datadog agent collects these logs:</p> <ol> <li>Pipe the program's output directly to a file, and add it as a file source in <code>conf.yaml</code> below. This can be done on unix-like systems by <code>node app.js &gt;&gt; /tmp/lightrun_nodejs_logs.log</code> or <code>python app.py &gt;&gt; /tmp/lightrun_python_logs.log</code> respectively. </li> <li>You can use an application-level logger to write logs to a file - i.e. by using <code>winston</code> in a node application or the common logging facility for Python.  </li> </ol>"},{"location":"integrations/datadog-logs/#configure-datadog-to-scrape-the-log-files","title":"Configure Datadog to scrape the log files","text":"<p>First you need to enable log collection in <code>/etc/datadog-agent/datadog.yaml</code> by uncommenting the following property: <pre><code>logs_enabled: true\n</code></pre></p> <p>Now you need to configure the Datadog agent to scrape the Lightrun log file. Create the configuration folder: <pre><code>mkdir /etc/datadog-agent/conf.d/lightrun.d/\n</code></pre> Create the configuration file <code>/etc/datadog-agent/conf.d/lightrun.d/conf.yaml</code>:</p> <p>Hint</p> <p>You can change the name <code>conf.yaml</code> to a more indicative name</p> <pre><code>logs:\n- type: file\npath: \"/tmp/lightrun_file_handler_logs*.log\"\nservice: \"&lt;YOUR_APPLICATION/SERVICE_NAME&gt;\"\nsource: \"Lightrun\"\n</code></pre> <p>Restart your Datadog service <pre><code>sudo service datadog-agent restart\n</code></pre></p>"},{"location":"integrations/datadog-logs/#view-lightrun-logs-in-your-datadog-account","title":"View Lightrun logs in your Datadog account","text":"<ul> <li>Login to your Datadog account</li> <li>Go to Live Tail</li> </ul> <p>Your logs should now appear in Datadog's live tail console</p> Live Tail console"},{"location":"integrations/datadog-logs/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Make sure the Lightrun logs are continuously printed to the log files and are in JSON format <pre><code>tail -f /tmp/lightrun_file_handler_logs*.log\n</code></pre></li> <li>Make sure Datadog agent is running <pre><code>service datadog-agent status\n</code></pre></li> <li>Make sure Datadog agent successfully found the log file <pre><code>datadog-agent status\n</code></pre> Example output <pre><code>==========\nLogs Agent\n==========\n\nSending compressed logs in HTTPS to agent-http-intake.logs.datadoghq.com on port 443\nBytesSent: 2.5242779e+07\n    EncodedBytesSent: 738819\nLogsProcessed: 66557\nLogsSent: 66493\n\nlightrun\n  --------\n    - Type: file\n      Path: /tmp/lightrun_file_handler_logs*.log\n      Status: OK\n        2 files tailed out of 2 files matching\n      Inputs:\n        /tmp/lightrun_file_handler_logs1.log\n        /tmp/lightrun_file_handler_logs0.log\n      BytesRead: 1.1758002e+07\n      Average Latency (ms): 49\n24h Average Latency (ms): 49\nPeak Latency (ms): 1256\n24h Peak Latency (ms): 1256\n</code></pre></li> <li>Make sure Datadog's API key is configured and that the API key is valid <pre><code>cat /etc/datadog-agent/datadog.yaml | grep api_key:\n</code></pre> Example output <pre><code>$ cat /etc/datadog-agent/datadog.yaml | grep api_key:\napi_key: ****************************ac11\n</code></pre></li> </ul>"},{"location":"integrations/dynatrace/","title":"Integrate Lightrun with Dynatrace","text":""},{"location":"integrations/dynatrace/#introduction","title":"Introduction","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Lightrun allows Developers and DevOps Engineers to add real-time logs, metrics, and traces to live applications on demand. This means, in practice, that information that was once only accessible by pushing new code with more instrumentation or by profiling your application can now be added on demand - right from your IDE.</p> <p>In this guide, we will learn how to integrate Lightrun with Dynatrace. Dynatrace is an application performance monitoring (APM) and software intelligence solution that gives you visibility and AI-backed answers across your entire digital infrastructure. With the Lightrun Dynatrace integration, you can receive metrics data (counter, tic toc, custom metrics) from Lightrun and visualize the data using your dashboard.</p> <p>Prerequisites</p> <p>This tutorial assumes that you have:</p> <ol> <li>A Dynatrace account. Follow the instructions here to create your Dynatrace account.</li> <li>Created a Dynatrace access token with the <code>metrics.ingest</code> scope. Follow the instructions here to generate an access token in Dynatrace.</li> </ol> <p>For Lightrun to send observability data to your integrations, ensure:</p> <ul> <li>The application has a running agent attached to it.</li> <li>Your plugin version has been upgraded to v1.12.</li> </ul>"},{"location":"integrations/dynatrace/#integrate-lightrun-with-dynatrace_1","title":"Integrate Lightrun with Dynatrace","text":"<ol> <li>Open a browser and log in to your Lightrun account.</li> <li>In the menu on the left, click Integrations to open the Integrations page.</li> <li> <p>From the Integrations page, click Connect from the Dynatrace card.     The Dynatrace Integration window pops up:     </p> </li> <li> <p>Enter your Dynatrace personal access token and environment name into the available fields.</p> <p>Note</p> <p>In Dynatrace SaaS, your environment is the first part of your Dynatrace dashboard's URL. <pre><code>https://{your-environment}.live.dynatrace.com/\n</code></pre></p> </li> <li> <p>Click Connect and wait for the approval toast message. You can now select Dynatrace as a target when creating metrics in your IDE.     </p> </li> <li> <p>To disable the configuration, click Disconnect.</p> </li> </ol>"},{"location":"integrations/elastic-stack/","title":"Integrate Lightrun logs to Elasticsearch and Kibana with Logstash","text":""},{"location":"integrations/elastic-stack/#overview","title":"Overview","text":"<p>In this guide, you will learn how to send Lightrun logs to Elasticsearch and Kibana with Logstash. Logstash is a free and open server\u2011side data processing pipeline that collects, transforms, and sends Lightrun dynamic logs to Elasticsearch for search and visualization with Kibana.</p>"},{"location":"integrations/elastic-stack/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>An Elastic cloud account. Register for an Elastic cloud free account here.</li> <li>Logstash installed and running. Refer to the Logstash installation page for Logstash installation instructions.</li> <li>Basic understanding of Logstash concepts and terminologies.</li> </ul>"},{"location":"integrations/elastic-stack/#configure-elastic-stack","title":"Configure Elastic Stack","text":"<p>The first step in the tutorial is to set up a deployment on Elastic Cloud. An Elastic Cloud deployment includes Elastic Stack components such as Elasticsearch, Kibana, and other features that we need to store, search, and analyze dynamic logs data from Lightrun.</p> <p>To create a deployment on Elastic Cloud:</p> <ol> <li>Log in to your Elastic Cloud account, and select Create deployment from the Elasticsearch Service main page.</li> <li>Enter the required details and click Create deployment to create the Elastic Stack deployment. </li> <li>Copy the deployment credentials (username and password) and save them. Later, they will be required for our Logstash configuration.</li> </ol>"},{"location":"integrations/elastic-stack/#configure-logstash","title":"Configure Logstash","text":"<p>After creating a deployment on Elastic Cloud, the next step is to set up our Logstash configuration.</p> <p>Logstash has three main configuration options.</p> <ul> <li>Input  - Define where data should be collected from.</li> <li>Filter -  Define how collected data should be processed.</li> <li>Output - Define where collected data should be sent.</li> </ul>"},{"location":"integrations/elastic-stack/#input-configuration","title":"Input Configuration","text":"<p>Add the following to your <code>logstash.conf</code> file as your input configuration.</p> <pre><code>input {\n    file {\n        type =&gt; \"log\"\n        path =&gt; \"/tmp/lightrun_file_handler_logs1.log\"\n        start_position =&gt; beginning\n        codec =&gt; json\n        sincedb_path =&gt; \"/dev/null\"\n        }\n    }\n</code></pre> <p>Important</p> <p>Change <code>tmp</code> to <code>%TEMP%</code> on Windows OS.</p> <p>This configuration tells Logstash to read logs from the <code>/tmp/lightrun_file_handler_logs1.log</code> file as the input.</p>"},{"location":"integrations/elastic-stack/#output-configuration","title":"Output Configuration","text":"<p>Add the following to your <code>logstash.conf</code> file as your output configuration.</p> <pre><code>output {\n  elasticsearch {\n    cloud_id =&gt; \"&lt;elastic-deployment-cloud-id&gt;\"\n    cloud_auth =&gt; \"&lt;elastic-cloud-username&gt;:&lt;elastic-cloud-password&gt;\"\n    }\n}\n</code></pre> <p>Important</p> <ul> <li>Change <code>&lt;elastic-cloud-username&gt;:&lt;elastic-cloud-password&gt;</code> to your authentication credentials in the following format <code>&lt;elastic-cloud-username&gt;:&lt;elastic-cloud-password&gt;</code>.</li> <li>Change <code>&lt;elastic-deployment-cloud-id&gt;</code> to your elastic deployment cloud id.</li> </ul> <p>The output configuration tells Logstash to send the collected logs to the specified elastic cloud deployment. </p> <p>Note</p> <p>You final <code>logstash.conf</code> file  should appear similar to the following:</p> <pre><code>input {  file { type =&gt; \"log\" path =&gt; \"/tmp/lightrun_file_handler_logs1.log\" start_position =&gt; beginning codec =&gt; json sincedb_path =&gt; \"/dev/null\" } }\noutput {\nelasticsearch { cloud_id =&gt; \"&lt;elastic-deployment-cloud-id&gt;\" cloud_auth =&gt; \"&lt;elastic-cloud-username&gt;:&lt;elastic-cloud-password&gt;\" }\n}\n</code></pre> <p>Note</p> <p>We are not using any <code>filter</code> for this tutorial.</p>"},{"location":"integrations/elastic-stack/#confirm-your-integration","title":"Confirm your integration","text":"<p>To confirm your integration.</p> <ul> <li>Restart your Logstash server.</li> <li>Insert a Lightrun dynamic log into your application and select <code>stdout</code> as the target.</li> <li>Log in to your Elastic cloud account and navigate to Observability &gt; Logs &gt; Stream.</li> <li>Your dynamic logs data should appear in the Stream page.</li> </ul> <p></p>"},{"location":"integrations/fluentd/","title":"Integrate Lightrun with FluentD","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>FluentD unified logging layer is an open source CNFC project, that may be used as a Lightrun logs collector. It can also be used as a parser, for logs enrichment, for data anonymization and also as a forwarder to variety of APMs and SIEMs (such as Splunk, Elastic, Datadog, ArcSight, etc...).</p>"},{"location":"integrations/fluentd/#topology-and-overview","title":"Topology and overview","text":"<p>Let's take a look at the topology of running Lightrun with FluentD with the intent of forwarding Lightrun logs to a sink (i.e. an APM, SIEM, etc...).</p> FluentD Topology <p>Before you begin, make sure you have installed the FluentD service and it is running on the relevant machine (i.e. where your application is running).</p>"},{"location":"integrations/fluentd/#configuration","title":"Configuration","text":"<p>The FluentD configuration is stored in a simple YAML file , structured as a chain of directives: </p> <pre><code>input source &gt; parsing &gt; filtering (optional) &gt; output destination\n</code></pre> <p>In the example below, we demonstrate a common scenario where Lightrun logs are written into <code>/tmp/lightrun_file_handler_logs1.log</code>. In order to collect the logs we'll <code>tail</code> the file in our FluentD Configuration file: <pre><code>&lt;source&gt;\n  @type tail\n  path /tmp/lightrun_file_handler_logs1.log\n  pos_file /var/tmp/posfile_lightrun.pos\n</code></pre></p> <p>We'll also make sure to add a tag called <code>lightrun_log</code> for easier identification: <pre><code>tag lightrun_log\n    &lt;parse&gt;\n        @type none\n    &lt;/parse&gt;\n&lt;/source&gt;\n</code></pre></p> <p>We'll then write the output of that parsing directive to <code>/example/lightrun</code> directory: <pre><code>&lt;store&gt;\n    @type file\n    path /example/lightrun\n</code></pre></p> <p>Which simulated the piping to a remote location (but in practice writes to a local file).</p> <p>In a real word scenario you might consider forwarding the logs to an APM or archive the data in an external datastore such as AWS S3 bucket. This is out of scope for this article, but can be easilty done using FluentD's various output plugins.</p> <p>The full configuration example: <pre><code>&lt;source&gt;\n  @type tail\n  path /tmp/lightrun_file_handler_logs1.log\n  pos_file /var/tmp/posfile_lightrun.pos\n  tag lightrun_log\n    &lt;parse&gt;\n        @type none\n    &lt;/parse&gt;\n&lt;/source&gt;\n\n&lt;match lightrun_log&gt;\n  @type copy\n  &lt;store&gt;\n    @type file\n    path /example/lightrun\n  &lt;buffer&gt;\n    chunk_limit_size 512K\n    flush_interval 15s\n    flush_thread_count 8\n  &lt;/buffer&gt;\n  &lt;/store&gt;\n&lt;/match&gt;\n</code></pre></p>"},{"location":"integrations/fluentd/#output-example","title":"Output Example","text":"<p>Applying the above configuration will create a log file in the <code>/example/lightrun</code> directory with the following structure: <pre><code>2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"&lt;record&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;date&gt;2021-10-28T15:34:00.663749Z&lt;/date&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;millis&gt;1635435240663&lt;/millis&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;nanos&gt;749000&lt;/nanos&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;sequence&gt;11962&lt;/sequence&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;level&gt;INFO&lt;/level&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;class&gt;PrimeMainMR&lt;/class&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;method&gt;isPrime&lt;/method&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;thread&gt;1&lt;/thread&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"  &lt;message&gt;LOGPOINT: lightrun TEST log&lt;/message&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"&lt;/record&gt;\"}\n2021-10-28T15:34:10+00:00   lightrun_log    {\"message\":\"&lt;record&gt;\"}\n</code></pre></p>"},{"location":"integrations/grafana/","title":"Integrate Lightrun metrics into Grafana using the Grafana agent","text":"<p>In this guide, you will learn how to scrap metrics data from Lightrun and push the metrics data to a Grafana cloud-hosted Prometheus instance for visualization with Grafana.</p> <p>Grafana is an open-source analytics and monitoring solution for databases. By integrating Grafana with Lightrun, we can collect real-time metrics data (counter, tic toc, custom metrics)  from our live applications with Lightrun and send them directly to Grafana for monitoring and visualization from our preferred IDE without pushing new code.</p>"},{"location":"integrations/grafana/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>A Grafana Labs account. Register for a Grafana free account here.</li> </ul>"},{"location":"integrations/grafana/#enable-lightrun-prometheus-integration","title":"Enable Lightrun Prometheus integration","text":"<p>The first step in the tutorial will be to activate the Lightrun Prometheus integration. </p> <p>To do that:</p> <ol> <li> <p>Open a browser and log in to your Lightrun account. </p> </li> <li> <p>In the menu on the left, click Integrations.</p> <p>The page loads with all available integrations:</p> <p></p> </li> <li> <p>From the Integrations page, click Connect from the Prometheus card.</p> <p>The Prometheus Integration window pops up:</p> <p></p> </li> <li> <p>From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data.</p> </li> <li>Click Copy from under the scrape configuration.</li> <li>Click Connect and wait for the approval toast message.</li> </ol>"},{"location":"integrations/grafana/#configure-the-grafana-agent","title":"Configure the Grafana agent","text":"<p>The next step in this tutorial is to configure the Grafana agent. The Grafana agent is a batteries-included telemetry collector that can be used to collect logs, metrics, and traces for Grafana.</p> <p>Note</p> <p>The Grafana agent works with the same metrics format as Prometheus, hence can connect easily to Lightrun using the same scrape config file as Prometheus.</p> <p>To install and run the Grafana agent,</p> <ol> <li>Log in to your Grafana account and click Create a dashboard.</li> <li>Click Create your own and select Prometheus on the Choose a data connection page. </li> <li>Select Send Prometheus Metrics to Grafana Cloud.</li> <li>In the Configuration Details page, select Via Grafana Agent as your method for forwarding metrics. Choose your relevant OS architecture, then download and configure the required agent binaries. </li> <li>Enter your API token name and click Create API to create your API token. </li> <li>Copy and run the displayed code to generate your Grafana <code>agent-config.yaml</code> file.</li> <li>Enter your copied Lightrun scrape configuration into the <code>agent-config.yaml</code> file.</li> <li>Run your Grafana agent as specified in the instructions.</li> </ol> <p>Important</p> <p>Your <code>agent-config.yaml</code> file should appear similar to the following.</p> <pre><code>metrics:\n    global:\n        scrape_interval: 5s\n        remote_write:\n            - url: https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push\n        basic_auth:\n            username: &lt;grafana-cloud-username&gt;\n            password: &lt;grafana-cloud-password&gt;\n    configs:\n        - name: hosted-prometheus\n          scrape_configs:\n            - job_name: \"lightrun\"\n                scrape_interval: 5s\n                scheme: https\n                metrics_path: /athena/company/&lt;lightrun-company-key&gt;/integrations/prometheus/metrics\n                static_configs:\n                    - targets: [app.lightrun.com]\n                tls_config:\n                    insecure_skip_verify: false\n            remote_write:\n                - url: https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push\n                    basic_auth:\n                    username: &lt;grafana-cloud-username&gt;\n                    password: &lt;grafana-cloud-password&gt;\n</code></pre>"},{"location":"integrations/grafana/#confirm-your-integration","title":"Confirm your integration","text":"<p>To confirm your integration, insert a Lightrun metric into your application and select Prometheus as your target. Then log in to your Grafana dashboard and navigate to Explore to visualize the collected data.</p> <p></p>"},{"location":"integrations/grafana/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p><code>msg=\"Scrape failed\" err=\"Get \\\"https://app.lightrun.com:443/athena/company/&lt;company_id&gt;/integrations/prometheus/metrics\\\": context deadline exceeded\"</code> - This error occurs when your Grafana agent timed out before sending the collected metrics data to Grafana cloud. To resolve.</p> <ol> <li>Increase the <code>scrape_timeout</code> period in your <code>agent-config.yaml</code> file.</li> <li>Ensure that your firewall rules are not blocking Grafana agent queries to the Lightrun server.</li> <li>Ensure that there are no communication issues with your Grafana agent server.</li> </ol> </li> </ul>"},{"location":"integrations/instana/","title":"Integrate Lightrun with Instana using StatsD","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>When preparing to tackle challenging production bugs, it\u2019s crucial to remember that building great infrastructure is not enough. Equally vital is the ability to gain insights into its performance. By leveraging the observability features of Lightrun and IBM Instana you will be able to observe the full stack of your production service, encompassing infrastructure, applications, and code-level information, all seamlessly integrated within Instana.  Lightrun allows you to acquire, in real-time, a broad range of performance metrics for timing, synchronization, and business logic. These metrics provide immediate answers for identifying bottlenecks, with minimal impact on performance. </p> <p>Lightrun supports the following metric types:</p> <ul> <li>Counter: Checks how many times a specific line of code was reached.</li> <li>Method Duration: Checks how much time a specific method took to execute.</li> <li>Tic &amp; Toc (Block Duration): Checks how much time any arbitrarily-selected block of code took to execute.</li> <li>Custom Metric: Checks what is the value of any code-level variable over time.</li> </ul> <p>This guide will take you through the step-by-step process of integrating Lightrun and Instana using StatsD. This integration allows you to seamlessly transmit Lightrun metrics generated during runtime to Instana. You can then visualize these metrics in the Instana dashboard, allowing you to collect, emit, and visualize these Lightrun code-level metrics on an Instana dashboard from a running application within the Instana Custom Dashboard.</p> <p>Before we proceed with the integration setup, let\u2019s review the process of ingesting Lightrun metrics into Instana.</p> <p></p> <p>This ingestion process involves the following steps:</p> <ol> <li>Lightrun metrics are initially transmitted from the IDE Plugin to the Lightrun Management Server.</li> <li>From the Lightrun Management Server, they can be exported to a remote StatsD daemon.</li> <li>Subsequently, the metrics are then forwarded from the StatsD Sensor to Instana.  It's important to highlight that Instana supports StatsD, enabling you to forward these metrics from StatsD to Instana. To activate this functionality, you must enable the StatsD Sensor in Instana's agent configuration settings.</li> </ol> <p>The workflow of setting up the Instana-Lightrun integration is described in the following sections.</p>"},{"location":"integrations/instana/#set-up-instana-with-the-statsd-sensor","title":"Set up Instana with the StatsD Sensor","text":"<p>Prerequisites</p> <ul> <li>Sign up for an Instana SaaS trial here.</li> <li>Install the Instana Host Agent.</li> </ul>"},{"location":"integrations/instana/#install-instana-agent-with-statsd-sensor","title":"Install Instana Agent with StatsD Sensor","text":"<ol> <li>Install Instana\u2019s Host Agent on any machine that has at least one incoming open port. It is recommended to use the port already utilized for communication with the Lightrun Management Server.</li> <li>Enable the StatsD Sensor in Instana by editing the following configuration file: <code>&lt;agent_install_dir&gt;/etc/instana/configuration.yaml</code>.</li> <li> <p>Edit the <code>com.instana.plugin.statsd block</code> similar to the following code example:</p> <pre><code>com.instana.plugin.statsd:\n  enabled: true\n  ports:\n    udp: 8125\n    mgmt: 8126\n  bind-ip: \"0.0.0.0\" # all IPs by default\n  flush-interval: 10 # in seconds\n</code></pre> <p>StatsD Ports</p> <p>Although 8125 and 8126 are commonly used in this scenario, you can choose any port you\u2019d like.</p> </li> </ol>"},{"location":"integrations/instana/#set-up-lightrun-with-statsd","title":"Set up Lightrun with StatsD","text":"<p>The Lightrun agent is at the core of the Lightrun platform. It runs alongside your application and inserts Lightrun actions added through Lightrun IDE plugins into the application at runtime. It enables real-time instrumentation and exporting of Lightrun Actions. Lightrun's agent can coexist with Instana's agents without any issues because both types of agents rely on different capabilities of the underlying system. Instana's agent runs at the operating system level, typically as a separate binary or container, while Lightrun's agent runs at the runtime level (JVM, V8, etc.) and is usually delivered as a runtime agent or language-level package. To install the Lightrun agent, see Lightrun Agents.</p>"},{"location":"integrations/instana/#enable-lightrun-statsd-integration","title":"Enable Lightrun StatsD integration","text":"<p>To pipe the Lightrun metrics to Instana, you need Lightrun to work with the StatsD daemon.</p> <p>To do so, we\u2019ll enable the StatsD integration from the Lightrun Management Console:</p> <ol> <li>Log in to the Lightrun Management Portal.</li> <li>In the navigation pane, click Integrations.</li> <li> <p>In the System Integrations page, click StatsD and click Connect.</p> <p></p> </li> <li> <p>In the StatsD integration dialog, enter the URL of the application host, where the Instana Host Agent is running, along with the port (typically 8125 or the port you selected in the previous step). </p> <p></p> </li> <li> <p>Click Connect.    Lightrun\u2019s StatsD integration is now active. </p> </li> </ol> <p>Proceed to create and pipe the Lightrun metrics to Instana.</p>"},{"location":"integrations/instana/#insert-lightrun-metrics-into-your-code","title":"Insert Lightrun metrics into your code","text":"<p>Access your Lightrun IDE plugin and proceed to set up the metrics to be piped to Instana by setting the Target to StatsD. The following example displays how to add a counter metric to the aws source that is added to a single line of code. A counter metric counts the number of code lines the code line has reached. </p>"},{"location":"integrations/instana/#insert-a-counter-metric-into-your-code","title":"INSERT A COUNTER METRIC INTO YOUR CODE","text":"<ol> <li>Place your cursor at the line in your source code where you want to insert the Counter, and right-click to open the context menu.</li> <li> <p>Hover over Lightrun and, from the Metrics menu, select Counter.</p> <p></p> <p>The Insert a Counter page opens.</p> </li> <li> <p>In the Target field, select StatsD as your preferred action output target.</p> <p></p> </li> <li> <p>Click OK to add the Counter metric to your code.     The  icon should appear in the left gutter of the editor next to the code line where the action was added.</p> </li> </ol>"},{"location":"integrations/instana/#configure-visualization-in-instana","title":"Configure visualization in Instana","text":"<ol> <li> <p>Navigate to the Instana landing home page, click the Instana logo and then click Create Dashboard.</p> <p></p> </li> <li> <p>Give the dashboard an intuitive name. For example, 'Instana Lightrun metrics' and click Create.</p> <p></p> </li> <li> <p>Once the dashboard is created, make sure the timing of the dashboard is set to Live and click Add Widget.</p> <p></p> <p>In this procedure, we will show you how to create the 'Chart: Time Series' widget as an example.</p> </li> <li> <p>Select Chart: Time Series and click Next.</p> <p></p> </li> <li> <p>In the Datasets dialog, select Infrastructure and Platforms from the Data Source list.</p> </li> <li> <p>Select StatsD from the Select metric list.</p> <p></p> </li> <li> <p>Click the Aggregation list. In the search bar that opens, enter <code>InstanaLightrunMethodDuration</code> to search for the metric. Make sure to choose <code>.mean</code> as the suffix.</p> <p></p> <p>Lightrun exposes various aggregated metrics about the method invocations, and we\u2019d like to view the mean.</p> <p></p> </li> <li> <p>In the Name field, enter Time To isPrime and click Create.</p> <p></p> <p>An indication is displayed with the Mean time it took to check for primality in the application.</p> <p></p> </li> </ol>"},{"location":"integrations/instana/#demo-pipe-and-view-lightrun-metrics-in-instana","title":"Demo: Pipe and view Lightrun metrics in Instana","text":"<p>This demo shows how to add the counter metric to a simple Java application, but it's important to note that Instana supports a wide variety of technologies. You can see the list of all supported technologies here.</p> <p>We'll start by opening IntelliJ and adding a Counter metric into the application, selecting aws as the source, and providing an intuitive name. The process described throughout the guide and is demonstrated in the following video.</p>"},{"location":"integrations/instana/#further-reading","title":"Further reading","text":"<p>To learn more about the IBM Instana and Lightrun Dynamic Observability Platform, see IBM Instana and Lightrun Observability Platform Solution Brief.</p>"},{"location":"integrations/new-relic/","title":"Integrate Lightrun metric data into New Relic using Prometheus <code>remote_write</code>","text":"<p>In this guide, you will learn how to ingest Lightrun metrics data into New Relic from a Prometheus time series database with the Prometheus <code>remote_write</code> capabilities.</p> <p>New Relic is a cloud-based all-in-one observability platform that monitors performance and availability. By storing Lightrun metrics with Prometheus and ingesting the stored data into New Relic with Prometheus <code>remote_write</code>, you can analyze real-time metrics (counter, tic toc, custom metrics) collected from your live code using Lightrun with New Relic's advanced monitoring capabilities.</p>"},{"location":"integrations/new-relic/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ol> <li>A Lightrun account.</li> <li>A New Relic account. Register for a free New Relic account here.</li> <li>Prometheus installed and running. Refer to the Prometheus FAQ as well for additional help.</li> <li>Basic understanding of Prometheus concepts and terminologies.</li> </ol>"},{"location":"integrations/new-relic/#configure-the-lightrun-prometheus-integration","title":"Configure the Lightrun Prometheus integration","text":"<p>The first step in the tutorial will be to activate the Lightrun Prometheus integration. </p> <p>To do that:</p> <ol> <li> <p>Open a browser and log in to your Lightrun account. </p> </li> <li> <p>In the menu on the left, click Integrations.</p> <p>The page loads with all available integrations:</p> <p></p> </li> <li> <p>From the Integrations page, click Connect from the Prometheus card.</p> <p>The Prometheus Integration window pops up:</p> <p></p> </li> <li> <p>From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data.</p> </li> <li>Click Copy from under the scrape configuration.</li> <li> <p>Paste the <code>scrape_configs</code> data to the existing <code>scrape_configs</code> section in your Prometheus YAML configuration file.     </p> </li> <li> <p>Start your Prometheus server.</p> </li> <li>Click Connect and wait for the approval toast message.</li> </ol>"},{"location":"integrations/new-relic/#configure-new-relic-and-prometheus","title":"Configure New Relic and Prometheus","text":"<p>After configuring the Lightrun Prometheus integration,  the next step is to configure our Prometheus server to send the collected metrics data to New Relic using the Prometheus <code>remote_write</code> capabilities.</p> <p>To configure Prometheus New Relic <code>remote_write</code> connection, </p> <ol> <li>Log in to your New Relic account.</li> <li>Click Add Data in the New Relic sidebar.</li> <li> <p>Search for Prometheus and select the Prometheus Remote Write Integration.</p> <p></p> </li> <li> <p>Enter a name to identify the data source and click Generate URL to generate the Prometheus <code>remote_write</code> configuration.</p> </li> <li>Add the configuration to your <code>prometheus.yml</code> file.</li> <li>Restart your Prometheus server.</li> </ol> <p>Note</p> <p>After adding the New Relic configuration to your <code>prometheus.yml</code> file, your <code>prometheus.yml</code> file should appear similar to the following.</p> <pre><code># my global config\nglobal:\n    scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n    evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\n    # scrape_timeout is set to the global default (10s).\n\n    # Alertmanager configuration\n    alerting:\n    alertmanagers:\n        - static_configs:\n        - targets:\n            # - alertmanager:9093\n\n    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\n    rule_files:\n    # - \"first_rules.yml\"\n    # - \"second_rules.yml\"\n\n    # A scrape configuration containing exactly one endpoint to scrape:\n    # Here it's Prometheus itself.\n    scrape_configs:\n        # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.\n        - job_name: \"prometheus\"\n\n            # metrics_path defaults to '/metrics'\n            # scheme defaults to 'http'.\n\n            static_configs:\n            - targets: [\"localhost:9090\"]\n        - job_name: \"lightrun\"\n            scrape_interval: 5s\n            scheme: https\n            metrics_path: /athena/company/&lt;lightrun_company_id&gt;/integrations/prometheus/metrics\n            static_configs:\n            - targets: [app.lightrun.com]\n        tls_config:\n        insecure_skip_verify: false\n    remote_write:\n    - url: https://metric-api.newrelic.com/prometheus/v1/write?prometheus_server=prometheus-lightrun\n    bearer_token:&lt;new_relic_api_token&gt;`\n</code></pre>"},{"location":"integrations/new-relic/#confirm-your-integration","title":"Confirm your integration","text":"<p>To confirm your integration, insert a Lightrun metric into your application and select Prometheus as your target. The metrics data will appear in your metrics dashboard.</p> <p>Query the collected data to gain more insights on your Lightrun metrics.</p> <p></p>"},{"location":"integrations/new-relic/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>If the connection state is down, confirm that:</p> <ol> <li>Your firewall rules are not blocking Prometheus queries to the Lightrun server.</li> <li>There are no communication issues with your Prometheus server.</li> </ol> </li> </ul> <ul> <li>If the connection state is down and there is a <code>server returned HTTP status 403 forbidden</code> error message. This error indicates that Prometheus integration is not currently enabled in your Management Portal.<p></p> </li> </ul>"},{"location":"integrations/nomad/","title":"Integrate Lightrun and Nomad","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Nomad is a flexible workload orchestrator that enables an organization to easily deploy and manage any containerized or legacy application using a single, unified workflow. Nomad can run a diverse workload of Docker, non-containerized, microservice, and batch applications.</p> <p>You can run Lightrun with Java applications that are deployed and managed by Nomad, using the Lightrun Nomad driver.</p> <p>Prerequisites</p> <p>To run Lightrun with Nomad you need your <code>lightrun_server</code> and <code>YOUR_COMPANY_SECRET</code> configuration details. To find these, log into the Management Portal and look inside the Download the Agent section.</p>"},{"location":"integrations/nomad/#run-a-nomad-job-with-the-lightrun-driver","title":"Run a Nomad job with the Lightrun driver","text":""},{"location":"integrations/nomad/#prerequisites","title":"Prerequisites","text":"<ol> <li>Download or clone the Lightrun driver repository.</li> <li>Find the <code>lightrun-java-driver</code> driver in the repository's root folder.</li> <li>Copy the driver to your Nomad plugins directory (or create one if it doesn't exist).</li> <li>Grant executable permissions to the driver file: <code>chmod +x ./plugins/lightrun-java-driver</code>.</li> <li>When running the Nomad's agent, make sure to specify the path to your plugins directory:<pre><code>sudo nomad agent -dev -bind 0.0.0.0 -log-level DEBUG -plugin-dir=&lt;path_to_plugins_directory&gt;\n</code></pre> </li> </ol>"},{"location":"integrations/nomad/#task-configuration","title":"Task Configuration","text":"<p>The <code>lightrun-java</code> driver accepts all configuration options of the Nomad <code>java</code> driver.</p> <ol> <li>Add <code>lightrun-java</code> as a driver to your job file.</li> <li>Set <code>lightrun_server</code>, <code>YOUR_COMPANY_SECRET</code> and <code>lightrun_certificate</code> as part of the config object.</li> </ol> <p>For example:</p> <pre><code>task \"run-with-lightrun\" {\ndriver = \"lightrun-java\"\n\n...\n\nconfig {\n...\nlightrun_server = \"https://app.lightrun.com/\"\nCOMPANY_SECRET = \"&lt;YOUR_COMPANY_SECRET&gt;\"\nlightrun_certificate = \"ee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12\"\n}\n}\n</code></pre> <p>A complete job file example can be found at <code>example/example.driver.nomad</code></p> <p>The Lightrun driver uses the arguments provided in the config section and automatically downloads and runs the Lightrun agent.</p>"},{"location":"integrations/nomad/#setting-the-lightrun-configuration-globally","title":"Setting the Lightrun configuration globally","text":"<p>To set Lightrun configuration globally for any Nomad job, you must run the Nomad agent with an <code>agent.hcl</code> file.</p> <p>See an example at <code>example/agent.hcl</code>.</p> <p>To run the Nomad agent with the configuration file, use:</p> <pre><code>sudo nomad agent -dev -bind 0.0.0.0 -log-level DEBUG -config=./agent.hcl -plugin-dir=&lt;path_to_plugin_directory&gt;\n</code></pre>"},{"location":"integrations/nomad/#faq","title":"FAQ","text":"<ol> <li>Why don't I see Lightrun logs in the Lightrun Console?<p>For Lightrun to send observability data to your integrations, ensure:</p> <p>- The application has a running agent attached to it   - Your action Target is set to Plugin.</p> </li> </ol>"},{"location":"integrations/overview/","title":"Integrate with Lightrun","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Lightrun seamlessly integrates with key third-party vendors to harness valuable and actionable telemetry data generated at runtime, providing a full-cycle observability platform. These integrations facilitate the troubleshooting of complex issues, contributing to the reduction of Mean Time To Resolution (MTTR). The Lightrun integrations are set up in the Lightrun Management Portal, categorized under All, logs, metrics, and alerts, which can be triggered by events generated by Lightrun. he currently supported integrations through the Integrations page in your Management Portal.</p>"},{"location":"integrations/overview/#real-time-integration-with-lightrun-data","title":"Real-time integration with Lightrun data","text":"<p>The following real-time data generated and piped to your integrated third-party platforms provides the observability necessary for troubleshooting applications in production:</p> <ul> <li>Lightrun Metrics: Send Lightrun metrics generated in real-time to the designated partner. This functionality enables developers to collect, emit, visualize, and analyze code-level metrics from a running application. </li> </ul> <ul> <li>Lightrun Logs: Easily Insert real-time dynamic logs into your live application with Lightrun and transmit the collected logs to the designated target for visualization and rapid analysis.</li> </ul> <ul> <li>Lightrun Events: Collect events related to activities in the Lightrun Management Portal, Lightrun plugins, and agents. Send these events to the target partner for valuable insights and continuous  monitoring. Events include user actions, agent registration, Lightrun action creation or deletion, and agent deletion.</li> </ul> <p></p>"},{"location":"integrations/overview/#supported-lightrun-integrations","title":"Supported Lightrun integrations","text":"<p>The following table lists the Lightrun integrations categorized by action type. This list of integrations officially supported by Lightrun is constantly expanding. If you don\u2019t find your favorite tool listed, please reach out to us.</p> Vendor Metrics Logs Alerts AppDynamics Prometheus external integration N/A \u2705 Datadog (events) StatsD external integration Datadog (logs) Datadog (events) Dynatrace \u2705 \u2705 N/A Elastic Stack \u2705 \u2705 N/A FluentD \u2705 N/A N/A Grafana \u2705 External integration N/A HashiCorp Nomad N/A External intregration N/A Instana StatsD external integration \u2705 N/A New Relic N/A StatsD external integration \u2705 Prometheus \u2705 N/A N/A Sentry N/A N/A \u2705 SIEM N/A N/A \u2705 Slack N/A N/A \u2705 StatsD \u2705 N/A N/A Splunk StatsD external integration N/A \u2705 Sumo Logic StatsD external integration N/A External integration"},{"location":"integrations/prometheus/","title":"Integrate Lightrun with Prometheus","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Prometheus is an open-source monitoring and alerting toolkit that scrapes and stores time series data locally from its configured targets (such as Lightrun) and then runs rules over the data for aggregation, recording, and alerting.</p> <p>Prometheus offers multiple data visualization and alert configurations modes, including via additional tools such as Grafana, which can be very useful for visualizing Lightrun output data.</p>"},{"location":"integrations/prometheus/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and configure Prometheus. Refer to the Prometheus FAQ as well for additional help.</li> <li>From Lightrun version 1.23, you can generate a dedicated API Key to be added to the Prometheus JSON. For more information, see Lightrun API Keys.</li> <li> <p>For Lightrun to send observability data to your integrations, ensure:</p> <ul> <li>The application has a running agent attached to it.</li> <li>Your action Target is set to Promethues.</li> </ul> </li> </ul>"},{"location":"integrations/prometheus/#enable-and-disable-prometheus-integration","title":"Enable and disable Prometheus integration","text":"<ol> <li> <p>Open a browser and log in to your Lightrun account. </p> </li> <li> <p>In the menu on the left, click Integrations.</p> <p>The page loads with all available integrations:</p> <p></p> </li> <li> <p>From the Integrations page, click Connect from the Prometheus card.</p> <p>The Prometheus Integration window pops up:</p> <p></p> </li> <li> <p>Click Copy from under the scrape configuration. </p> </li> <li> <p>Paste the <code>scrape_configs</code> data to the existing <code>scrape_configs</code> section in your Prometheus YAML configuration file.</p> <p></p> </li> <li> <p>From the Round Up dropdown list, select the rounding rule to be applied by Prometheus for your Lightrun data.</p> </li> <li> <p>Click Connect and wait for the approval toast message.</p> </li> <li> <p>To disable the configuration, click Disconnect.</p> </li> </ol>"},{"location":"integrations/prometheus/#confirm-your-prometheus-integration","title":"Confirm your Prometheus integration","text":"<p>If your Prometheus integration was successful:</p> <ol> <li> <p>The Prometheus card Connect button should change to Settings on your Management Portal Integrations page, and Installed should appear on the top left part of the card.</p> <p></p> </li> <li> <p>Lightrun should appear in your Prometheus interface Targets page, and the connection state should be Up.</p> <p></p> </li> </ol>"},{"location":"integrations/prometheus/#troubleshooting-prometheus-integration","title":"Troubleshooting Prometheus integration","text":"<ul> <li> <p>If the connection state is down, confirm that:</p> <ol> <li>Your firewall rules are not blocking Prometheus queries to the Lightrun server.</li> <li>There are no communication issues with your Prometheus server.</li> </ol> </li> </ul> <ul> <li>If the connection state is down and there is a <code>server returned HTTP status 403 forbidden</code> error message. This error indicates that Prometheus integration is not currently enabled in your Management Portal.     </li> </ul>"},{"location":"integrations/sentry/","title":"Integrate Lightrun with Sentry","text":"<p>In this guide, you will learn how to pipe Lightrun events to Sentry with the Lightrun Sentry integration.</p> <p>Sentry is a developer-first application performance monitoring and error tracking platform that can help you gain insights, uncover anomalies, solve issues, and learn continuously about your code. With the Lightrun Sentry integration, you can collect events on activities related to the Management Portal, Lightrun plugins, and agents and send the events to Sentry for insights and monitoring.</p> <p>The following events will be collected from your Lightrun server and sent to your Sentry account when you configure the Lightrun Sentry integration.</p> <ul> <li>User registration events.</li> <li>Agents registration events.</li> <li>Lightrun action created or deleted events.</li> <li>Agents deleted events.</li> </ul>"},{"location":"integrations/sentry/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>A Sentry account. Register for a Sentry free account here.</li> </ul>"},{"location":"integrations/sentry/#create-a-sentry-project","title":"Create a Sentry project.","text":"<p>To create a Sentry project,</p> <ol> <li>Log in to your Sentry account. </li> <li>Navigate to Projects &gt; Create Project.</li> <li>Select any platform, configure your alert frequency, and assign a name and team to your Sentry project. </li> <li>Click Create Project to create the new Sentry project.</li> <li>Navigate to Settings &gt; Projects.</li> <li>Select the created project. </li> <li>Go to Client Keys (DSN) under SDK SETUP.</li> <li>Copy the project\u2019s DSN and store it in a safe place.</li> </ol>"},{"location":"integrations/sentry/#configure-the-lightrun-sentry-integration","title":"Configure the Lightrun Sentry integration.","text":"<ol> <li> <p>Open a browser and log in to your Lightrun account. </p> </li> <li> <p>In the menu on the left, click Integrations.</p> <p>The page loads with all available integrations:</p> <p></p> </li> <li> <p>From the Integrations page, click Connect from the Sentry card.</p> <p>The Sentry integration window pops up.   </p> </li> <li> <p>Enter the copied DSN into the DSN field</p> </li> <li>Click Connect and wait for the approval toast message.</li> </ol> <p>After completing your integration, events captured from your Lightrun server should start appearing in your Sentry dashboard.</p> <p></p>"},{"location":"integrations/siem/","title":"Integrate Lightrun audit events to SIEM systems","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Security Information and Event Management (SIEM) is a security methodology that helps detect, analyze, and respond to security threats before they harm business operations. It combines security information management (SIM) and security event management (SEM) into one security management system. </p> <p>The SIEM integration in Lightrun allows you to stream Lightrun audit events to your SIEM systems in real time, such as Splunk. You can receive any auditable event recorded by Lightrun in your SIEM system in real time, such as user management events, configuration changes, and runtime accessibility management events. Investigate these events at the convenience of your SIEM system, and set policies and alerts regarding user activities in Lightrun. The Lightrun-SIEM integration supports setting up SIEM with or without authentication.</p>"},{"location":"integrations/siem/#before-you-begin","title":"Before you begin","text":"<ul> <li>The URL of your SIEM system\u2019s endpoint.</li> <li>(Optional) API Token: If Authentication is required, provide your API token to be included in the request header. </li> </ul>"},{"location":"integrations/siem/#set-up-siem-with-authentication","title":"Set up SIEM with authentication","text":"<p>For this integration, we demonstrate how audit events are ingested into Splunk through the SIEM integration.</p> <ol> <li>Log in to the Lightrun Management Portal.</li> <li>In the navigation pane, click Integrations.</li> <li>On the System Integrations page, click SIEM and click Connect.     The SIEM integration page opens.</li> <li>Enter the URL of the SIEM system.</li> <li> <p>(Optional) Enable authentication.</p> <p>a. Select the Use Authentication check box if required.</p> <p></p> <p>b. Enter your predefined token in the following format: <code>&lt;type&gt; &lt;credential&gt;</code>. The token will be sent as part of the \"Authorization\" HTTP header.</p> </li> <li> <p>Click Test connection. </p> <p>Lightrun will send a test event, which will appear as performed by the user who clicked the button. To verify the configuration, look up this event in Splunk, which is the SIEM system used in this demo.</p> <p></p> </li> <li> <p>Click Connect.    The integration is now set up.     Proceed to view how Lightrun audit events are displayed in Splunk.</p> </li> </ol>"},{"location":"integrations/siem/#view-lightrun-audit-events-in-splunk","title":"View Lightrun audit events in Splunk","text":"<ol> <li>Log out and log in to Lightrun.</li> <li> <p>Go to Splunk and view the relevant audit events related to the logout and log in actions.</p> <p></p> </li> </ol>"},{"location":"integrations/splunk/","title":"Integrate Lightrun Logs to Splunk\u2019s HTTP Event Collector (HEC) using the FluentBit Log Processor","text":"<p>In this guide, you will learn how to use the Fluent Bit Log processor to collect log data from Lightrun and send the data to Splunk\u2019s HTTP Event Collector (HEC). </p> <p>Splunk allows you to search, analyze, and visualize all of your data, providing valuable insights on your infrastructure that you can act on. By integrating Lightrun with Splunk using Fluent Bit as a Log collector, you will be able to add real-time logs to your live application on demand and gain actionable insights on the data with Splunk. </p>"},{"location":"integrations/splunk/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>Access to a Splunk Enterprise/Cloud service account. Register for a Splunk free trial account here.</li> <li>Fluent Bit is installed and running. See Getting started with Fluent Bit for Fluent Bit installation instructions.</li> <li>Basic understanding of Fluent Bit concepts and terminologies.</li> </ul>"},{"location":"integrations/splunk/#configure-splunk-hec","title":"Configure Splunk HEC","text":"<p>The first step in this tutorial is to set up Splunk to receive data through HTTPS.</p> <p>To do that:</p> <ol> <li>Log in to your Splunk\u2019s cloud dashboard. </li> <li>Go to Settings &gt; Data Inputs &gt; HTTP Event Collector &gt; Global Settings.</li> <li>Ensure that your HTTP port number is 8080 and click Enable SSL.</li> <li>Go back to the HTTP Event Collector page and click New Token.</li> <li>Follow the steps to create an authentication token. </li> <li>Copy and save the token in a safe place.</li> </ol>"},{"location":"integrations/splunk/#configure-fluent-bit","title":"Configure Fluent Bit","text":"<p>Fluent Bit has two main configuration components:</p> <ul> <li><code>INPUT</code> - Define where data should be collected from.</li> <li><code>OUTPUT</code> -  Define where the collected data is sent to.</li> </ul>"},{"location":"integrations/splunk/#input-configuration","title":"INPUT Configuration","text":"<p>Add the following to your Fluent Bit configuration file as your INPUT. </p> <pre><code>[INPUT]\n    name tail\n    path /tmp/lightrun_file_handler_logs1.log\n</code></pre> <p>Important</p> <p>Change <code>tmp</code> to <code>%TEMP%</code> on Windows OS.</p> <p>This configuration tells Fluent Bit to read from the <code>/tmp/lightrun_file_handler_logs1.log</code> file as the input with the Tail input plugin.</p>"},{"location":"integrations/splunk/#output-configuration","title":"OUTPUT Configuration","text":"<p>Add the following to your Fluent Bit configuration file as your OUTPUT. </p> <pre><code>[OUTPUT]\n    Name splunk\n    Match *\n    Host &lt;SPLUNK_HOSTNAME/IP&gt;\n    Port 8088\n    Splunk_token &lt;AUTH_TOKEN&gt;\n    TLS ON\n    tls_verify off\n    splunk_send_raw_data on\n</code></pre> <p>Important</p> <ul> <li>Change <code>&lt;SPLUNK_HOSTNAME/IP&gt;</code> to the hostname of the target Splunk service</li> <li>Change <code>&lt;AUTH_TOKEN&gt;</code> to your Splunk authentication token. </li> </ul> <p>This configuration tells Fluent Bit to send the collected data to Splunk Events Collector with the  Fluent Bit Splunk plugin.</p> <p>Important</p> <p>Fluent Bit configuration files are based on a strict Indented Mode, which means that each configuration file must follow the same pattern of alignment. By default, an indentation level is four spaces from left to right.</p>"},{"location":"integrations/splunk/#confirm-your-integration","title":"Confirm your integration","text":"<p>To confirm your integration, restart Fluent Bit and add a Lightrun log to your application. Your Lightrun Logs data should appear in your Splunk event console.</p> <p></p>"},{"location":"integrations/statsd/","title":"Integrate Lightrun with StatsD","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Statsd is a network daemon that runs on the Node.js platform and listens for statistics, such as counters and timers, that are sent over UDP or TCP protocols. It then sends aggregates of the statistics to a backend services such as Graphite.</p> <p>There's a short script that performs online metric scraping from the agent log file (usually <code>/tmp/lightrun_java_agent.INFO</code>).</p> <pre><code>cd &lt;install-dir&gt;/agent/stats/\n./statsd_reporter.py --host &lt;statsd-hostname&gt; --port &lt;statsd-port&gt; --logfile &lt;agent-log-file.txt&gt;\n</code></pre> <p>Prerequisites</p> <p>Install and configure StatsD.</p> <p>For Lightrun to send observability data to your integrations, ensure:</p> <ul> <li>The application has a running agent attached to it</li> <li>Your action Target is set to Plugin.</li> </ul>"},{"location":"integrations/statsd/#connect-to-and-disconnect-from-statsd","title":"Connect to and disconnect from StatsD","text":"<ol> <li> <p>Open a browser and log in to your Lightrun account. </p> </li> <li> <p>In the menu on the left, click Integrations.</p> <p>The page loads with all available integrations:</p> <p></p> </li> <li> <p>From the Integrations page, click Connect from the StatsD card.</p> <p>The Statsd Integration window pops up:</p> <p></p> </li> <li> <p>Complete the Server and UDP Port details, or if correct, leave the default values. </p> </li> <li> <p>Click Connect and make sure you see the approval toast message.</p> </li> <li> <p>To disable the configuration, click Disconnect.</p> </li> </ol>"},{"location":"integrations/sumo-logic/","title":"Integrate Lightrun Logs to Sumo Logic using Sumo Logic OpenTelemetry (OTEl) collector","text":"<p>In this guide, you will learn how to pipe Lightrun logs to Sumo Logic with the Sumo Logic OpenTelemetry(OTel) collector. </p> <p>Sumo Logic is a popular cloud-native logging tool that makes gaining valuable insights from your log data easy. By integrating Lightrun with Sumo Logic, you can insert real-time dynamic logs into your live application with Lightrun and send the collected logs to the Sumo Logic platform for visualization and fast analysis. </p>"},{"location":"integrations/sumo-logic/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>A Sumo Logic account. Register for a free Sumo Logic account here.</li> </ul>"},{"location":"integrations/sumo-logic/#install-sumo-logic-opentelemetryotel-collector","title":"Install Sumo Logic OpenTelemetry(OTel) collector","text":"<p>This tutorial's first step is installing the Sumo Logic OpenTelemetry(OTel) collector on your local machine. When you create a new account with Sumo Logic, you will be directed to their onboarding page with the installation instructions. Run the Sumo Logic OpenTelemetry collector and dashboards installer code to complete the installation step.</p>"},{"location":"integrations/sumo-logic/#configure-sumo-logic-otel-collector","title":"Configure Sumo Logic OTel collector","text":"<p>After completing the installation step, the next step in this tutorial is to configure the Sumo Logic OTel collector to collect Lightrun logs and send the collected logs to Sumo Logic for analysis.</p> <p>To do that,</p> <ol> <li>Create a <code>lightrun.yaml</code> file.</li> <li> <p>Add the following YAML to the file.</p> <pre><code>receivers:\n    filelog/custom_files:\n        include:\n            - /tmp/lightrun_file_handler_logs1.log\n        include_file_name: false\n        include_file_path_resolved: true\n        storage: file_storage\n        operators:\n            - type: json_parser\n            parse_to: body\n            if: 'attributes[\"log.file.path_resolved\"] matches \"/tmp/.*\"'\n    start_at: beginning\nprocessors:\n    groupbyattrs/file path resolved:\n        keys:\n        - log.file.path_resolved\nservice:\n    pipelines:\n        logs/custom_files:\n            receivers:\n                - filelog/custom_files\n            processors:\n                - memory_limiter\n                - groupbyattrs/file path resolved\n                - resourcedetection/system\n                - batch\n            exporters:\n                - sumologic\n</code></pre> <p>Important</p> <p>Change <code>tmp</code> to <code>%TEMP%</code> on Windows OS.</p> </li> <li> <p>Move the <code>lightrun.yaml</code> file to the <code>/etc/otelcol-sumo/conf.d</code> directory or appropriate location for your operating system; see the Sumo Logic documentation for more information.</p> <pre><code>$ sudo mv lightrun.yaml /etc/otelcol-sumo/conf.d\n</code></pre> </li> <li> <p>Run the OpenTelemetry installer.</p> <pre><code>$ sudo otelcol-sumo --config=/etc/otelcol-sumo/sumologic.yaml --config \"glob:/etc/otelcol-sumo/conf.d/*.yaml\"\n</code></pre> </li> </ol>"},{"location":"integrations/sumo-logic/#confirm-your-integration","title":"Confirm your integration","text":"<p>To confirm your integration:</p> <ol> <li> <p>Change your log file handler format to JSON in your agent configuration and restart your Lightrun agent.     <pre><code>com.lightrun.DynamicLog.FileHandler.formatter=json\n</code></pre></p> <p>Note</p> <p>For instructions on how to edit your agent configuration, see:</p> <ul> <li>Java Agent configuration</li> <li>Node.js Agent configuration</li> <li>Python Agent configuration</li> </ul> </li> <li> <p>Insert a Lightrun dynamic log into your code base.</p> </li> <li>Log in to Sumo Logic and navigate to Manage Data &gt; Collection &gt; Open Telemetry Collection.</li> <li>Select your collector and click the Open in Log Search button.</li> <li>You should be able to view and analyze your Lightrun logs. </li> </ol> <p></p>"},{"location":"introduction/agents/","title":"Lightrun Agents","text":"<p>The Lightrun agent is at the core of the Lightrun platform. It runs alongside your application and inserts Lightrun actions(Logs, Metrics, and Snapshot) added through Lightrun IDE plugins into the application at runtime.</p> <p>To get started, pick your programming language or check out our deployment examples:</p> <p>Programming Languages</p> <ul> <li>Node.js</li> <li>Java</li> <li>Python</li> <li>.NET</li> </ul> <p>Deployment Options</p> <ul> <li>AWS Lambda</li> <li>Docker</li> <li>Kubernetes</li> </ul>"},{"location":"introduction/plugins/","title":"Lightrun Plugins","text":"<p>To debug remotely with Lightrun, you must first install the Lightrun plugin into your IDE or set up the Lightrun CLI. </p> <p>The following guides cover installing and working with Lightrun in your IDE.</p> <ul> <li>Lightrun for JetBrains IDEs</li> <li>Lightrun for VScode</li> <li>Lightrun for VScode.dev</li> <li>Lightrun for <code>code-server</code></li> </ul> <p>Support</p> <p>Lightrun currently supports IntelliJ IDEA, PyCharm, WebStorm, Visual Studio Code (VSCode), VSCode for the web (vscode.dev), and <code>code-server</code>. Support for additional IDEs is coming soon - sign up for our beta program to learn more!</p> <p>Follow the instructions here to set up the Lightrun CLI on your computer. </p>"},{"location":"jetbrains/plugin-deployment-switcher/","title":"Switch between deployments in the Lightrun plugin in JetBrains","text":"<p>Note</p> <p>You need a Lightrun Enterprise plan to use the Deployment Switcher functionality. For more information, see Pricing.</p> <p>The Deployment Switcher feature applies only to Single-tenant and On-premise environments and is activated upon demand. To enable this feature, please reach out.</p> <p>From version 1.38, Lightrun provides a Deployment Switcher directly within the Lightrun plugin in your IDE, designed for developers within large enterprise organizations who use Lightrun to debug applications across multiple deployment instances. Developers with the appropriate access permissions can seamlessly switch between deployments, such as from <code>TESTING</code> to <code>PRODUCTION</code> deployment or between <code>TESTING-EU</code> and <code>TESTING-US</code>. </p> <p>For example, you might have two deployments set up as follows: <code>default</code> and <code>Production</code>.</p> <p></p>"},{"location":"jetbrains/plugin-deployment-switcher/#rules-and-guidelines","title":"Rules and guidelines","text":"<ul> <li>The Lightrun server that you first authenticate the plugin is set as the default deployment upon login.</li> </ul> <ul> <li>Deployment settings apply only to your local IDE and do not affect other users. Any changes or modifications you make are local and specific to your setup. </li> </ul> <ul> <li>The selected deployment remains active every time you enter your IDE. </li> </ul> <ul> <li>At least one deployment instance must be set in the IDE and cannot be deleted. </li> </ul>"},{"location":"jetbrains/plugin-deployment-switcher/#before-you-begin","title":"Before you begin","text":"<p>For each deployment instance, you will need the full URL of the remote deployment you wish to access. To obtain this information, please contact your organization's administrator.</p>"},{"location":"jetbrains/plugin-deployment-switcher/#set-up-the-deployment-switcher-in-your-organization","title":"Set up the Deployment Switcher in your organization","text":"<p>The Deployment Switcher is designed for large enterprise organizations that manage multiple deployments. We recommend that an administrator or a designated team member generate and distribute the deployment settings to the users in your organization.</p> <p>The recommended stages for deploying the Deployment Switcher in the Lightrun plugin for all the users in the organization are:</p> <ol> <li> <p>Administrator Tasks:</p> <p>a. Create a list of deployments: From within the plugin: create a list of deployments.</p> <p>b. Export the list of deployments: From within the plugin, export the list of deployments to an external file.</p> <p>c. Distribute the file: Share the exported file with all the relevant developers in the organization.</p> </li> <li> <p>Developer Tasks:</p> <ul> <li>Import the file:  Use the Import Deployment option available in the Deployment Switcher list to import the file.</li> </ul> </li> </ol>"},{"location":"jetbrains/plugin-deployment-switcher/#stage-1-admins-create-and-export-a-list-of-deployments","title":"Stage 1: [Admins]: Create and export a list of deployments","text":"<ol> <li> <p>Create a list of deployments. Follow the Add a new deployment to the deployment switcher procedure.</p> </li> <li> <p>From the  drop-down list on the menu bar in the JetBrains IDE, select Export Deployment(s).</p> </li> <li> <p>The File Explorer window opens, allowing you to set the location for saving the file on your local drive.</p> <p>The file is saved with a user-defined file name in the following format. </p> <p></p> </li> <li> <p>Distribute the file to your developers with instructions on how to import the file within the plugin.</p> </li> </ol>"},{"location":"jetbrains/plugin-deployment-switcher/#stage-2-developers-import-deployment-file","title":"Stage 2: [Developers] Import deployment file","text":"<ol> <li> <p>From the  drop-down list on the menu bar in the JetBrains IDE, select Import deployment (s).</p> <p></p> <p>The Explorer window opens. </p> </li> <li> <p>Select the deployment settings file you exported in the previous step.</p> <p>The following message is displayed.</p> <p></p> </li> <li> <p>Click Import.</p> </li> <li>Log out and log in to apply the changes.</li> </ol>"},{"location":"jetbrains/plugin-deployment-switcher/#manage-deployments","title":"Manage Deployments","text":""},{"location":"jetbrains/plugin-deployment-switcher/#add-a-new-deployment-to-the-deployment-switcher","title":"Add a new deployment to the Deployment Switcher","text":"<ol> <li> <p>Click the  in the menu bar in your JetBrains IDE to access the drop-down list.</p> </li> <li> <p>Select Create Deployment.</p> <p></p> <p>The Create Deployment window opens.</p> <p></p> </li> <li> <p>Enter the deployment details:</p> <ul> <li>Lightrun Deployment Name: Provide an intuitive name to recognize your deployment, such as Production, Staging, or a geographical location.</li> </ul> <ul> <li>Lightrun Server URL: Provide the full path to your Lightrun server.</li> </ul> <ul> <li>Certificate Pinning List: Add your 64-character SHA-256 certificate public key hash for pinning.</li> </ul> <ul> <li>Send source full path check box: Select the checkbox to send the source full path.</li> </ul> </li> <li> <p>Click Create.       The new deployment is added to the lists of deployments. You can view its settings by selecting the deployment name and then choosing Settings from the Lightrun drop-down list.</p> </li> </ol>"},{"location":"jetbrains/plugin-deployment-switcher/#edit-deployment-settings","title":"Edit deployment settings","text":"<p>You may want to edit deployment settings, such as updating the certificates for the Lightrun Server URL.</p> <ol> <li>In the Lightrun plugin, open the deployment list and select the deployment you want to modify.</li> <li>From the  drop-down list on the menu bar in the JetBrains IDE, select Settings.<p>The Update Deployment window opens. 3. Make the necessary changes and click OK. 4. Log out and log in to the Lightrun server to apply the changes.</p> </li> </ol>"},{"location":"jetbrains/plugin-deployment-switcher/#delete-a-deployment","title":"Delete a deployment","text":"<p>You can remove any deployment from the deployment list in the Lightrun plugin, except for the last one. This action will only delete the deployment from your local deployment list and will not affect other users.</p> <ol> <li> <p>From the deployment list in the Lightrun plugin, select the deployment to delete.</p> <p>As displayed in the following example, select production.</p> </li> <li> <p>From the  drop-down list on the menu bar in the JetBrains IDE, select Delete Deployment.</p> <p></p> <p>The Delete Deployment message opens.</p> <p></p> </li> <li> <p>Click Delete.</p> <p>The deployment is removed from the list.</p> </li> </ol>"},{"location":"jvm/agent-configuration/","title":"Customize the Lightrun Java agent","text":"<p>According to the Lightrun actions you specify, the agent dynamically inserts logs, metrics, and snapshots into the target environment. The agent's behavior when performing these tasks is governed by a set of user-configurable properties.</p>"},{"location":"jvm/agent-configuration/#agent-properties","title":"Agent properties","text":"<p>You can modify the agent's behavior by configuring its properties. Configuring the agent properties can be done either from the command line flags or from the <code>agent.config</code> file. The agent properties are defined per agent.</p>"},{"location":"jvm/agent-configuration/#setting-agent-properties-from-the-command-line","title":"Setting agent properties from the command line","text":"<p>You can flexibly set many of the available agent properties as part of the command when running your application.</p> <p>Some are passed as \u201cagent flags\u201d, with additions to the agentpath parameter. </p> <pre><code>-agentpath:&lt;path-to-agent&gt;/lightrun_agent.so=--&lt;parameter&gt;=&lt;value&gt;,--&lt;parameter&gt;=&lt;value&gt;... &lt;AppName&gt;\n</code></pre> <p>Others are passed as JVM flags using the -D syntax.</p> <pre><code>-agentpath:&lt;path-to-agent&gt;/lightrun_agent.so -D&lt;flag&gt;=&lt;value&gt; &lt;AppName&gt;\n</code></pre> <p>Example</p> <p>The example below shows both kinds of flags:</p> <pre><code>java -agentpath:/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;PATH_TO_JAR&gt; -Dcom.lightrun.secret=&lt;YOUR-SECRET&gt;  &lt;AppName&gt;\n</code></pre> <p>See the tables below for details.</p>"},{"location":"jvm/agent-configuration/#setting-agent-properties-from-the-agentconfig-file","title":"Setting agent properties from the <code>agent.config</code> file","text":"<p>To manually set agent properties in the <code>agent.config</code> file:</p> <ol> <li>On the server where the application is running, navigate to <code>&lt;install_dir&gt;/agent/agent.config</code>.</li> <li>In the <code>agent.config</code> file, edit the values for the relevant properties.</li> </ol> <p>Important</p> <p>You must save the changes and restart the application to apply the new configuration.</p>"},{"location":"jvm/agent-configuration/#agent-properties-list","title":"Agent properties list","text":"<p>The following tables describe the agent properties that you can customize for an agent.</p>"},{"location":"jvm/agent-configuration/#jvm-flags","title":"JVM flags","text":"<p>Info</p> <p>Use <code>-D</code> to pass these through the command line</p> Parameter name Explanation Default value Type <code>com.lightrun.server</code> URL of the Lightrun server.  The correct path is automatically inserted. Must not be modified. None string <code>com.lightrun.secret</code> Lightrun agent API key None char(64) <code>com.lightrun.DynamicLog.handlers</code> File  and error log handlers where to send logs <code>java.util.logging.FileHandler</code> <code>java.util.logging.ConsoleHandler</code> string <code>com.lightrun.DynamicLog.ConsoleHandler.formatter</code> Specifies the name of a <code>Formatter</code> class to use None string <code>com.lightrun.DynamicLog.ConsoleHandler.pattern</code> Specifies the error log file name pattern None string <code>com.lightrun.DynamicLog.FileHandler.formatter</code> specifies the name of a <code>Formatter</code> class to use None string <code>com.lightrun.DynamicLog.FileHandler.pattern</code> Specifies a pattern for generating the output log file name. <code>\"%u\"</code> is a unique number automatically assigned at runtime <code>/tmp/lightrun_file_handler_logs%u.log</code> string"},{"location":"jvm/agent-configuration/#agent-flags","title":"Agent flags","text":"<p>Info</p> <p>Use <code>--</code> to pass these through the command line</p> Parameter name Explanation Default value Type <code>max_dynamic_log_rate</code> Maximum allowed ratio of logs printed (the higher ratio, the more logs are allowed to be printed) 60 int32 <code>max_condition_cost</code> Maximum allowed additional CPU load when inserting actions during condition evaluation (value between 0.1 and 1.0) 1.0 float <code>max_log_cpu_cost</code> Maximum allowed additional CPU load when logging (value between 0.1 and 1.0) 1.0 float <code>max_snapshot_buffer_size</code> Maximum allowed total bytes for snapshots 655360 int32 <code>log_stats_time_micros</code> How often (in microseconds) to log debugger performance statistics. Set to zero to never log stats 3000000 int32 <code>breakpoint_expiration_sec</code> Time-to-live for actions 3600 int32 <code>dynamic_log_quota_recovery_ms</code> Time in milliseconds to pause a dynamic log after quota is reset 500 int32 <code>ignore_quota</code> Disable performance safety measures - USE WITH CAUTION 0 bool <code>pinned_certs</code> 64 character sha256 certificate public key hash for pinning 515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2 char(64) <code>enable_pii_redaction</code> Enable personally identifiable information (PII) redaction at the agent's side (may affect the application's performance) 0 bool <code>exit_after_report_all</code> Agent empties queues before the application exits. 0 bool <code>longpolling_timeout_milli</code> The timeout duration, in milliseconds, for long-polling requests. It defines the maximum time the server should wait for new data to become available before timing out the request. 30000 int32 <code>max_dynamic_log_bytes_rate</code> Maximum allowed output rate for logs (bytes per second) 204800 int32 <code>max_snapshot_frame_count</code> Maximum allowed snapshot frame count 5 int32 <code>capture_object_explore_max_depth</code> Sets the maximum depth of nested objects.  Note: Supported from version 1.38. 50 int32 <code>snapshot_object_max_members</code> Controls the number of properties captured in an object.  Note: Supported from version 1.38. 100 int37 <code>snapshot_expression_max_collection_size</code> Controls the number of items captured for a collection in a watch expression.  Note: Supported from version 1.38. 1024 int32 <code>transmission_bulk_max_size</code> The maximum number of action updates allowed to be transmitted in a single batch. 10 int32 <code>invokedynamic_enabled</code> Enables invokedynamic bytecode instruction support 0 bool <code>boxing_unboxing_enabled</code> Enables or disables Java expressions and conditions autoboxing and unboxing support. Value can either be <code>0</code> (disabled), or <code>1</code> (enabled). <code>1</code> (enabled) bool <code>agent_log_max_file_size_mb</code> Maximum size in MB that a log file can reach before being rotated. 10 int32 <code>agent_log_max_file_count</code> Maximum number of rotated log files to keep. Note that old files get deleted when this number of log files is reached. 5 int32 <code>agent_log_target_dir</code> Sets the target directory for storing agent logs, which defaults to the operating system's temporary folder. From version 1.33, the log filename will be generated automatically according to the format: <code>lightrun_java_agent.&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log</code>. For example: <code>lightrun_java_agent.22840.20240513-153557.1.log</code>.  Note: For Java agents running on Windows, the path syntax requires the use of double backslashes, as demonstrated: <code>agent_log_target_dir=C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Temp</code> String <code>agent_log_level</code> Minimum log level that is written to the log file. Available levels of severity, from the highest to lowest (not case sensitive): <code>None</code>, <code>Fatal</code>, <code>Error</code>, <code>Warning</code>, <code>Info</code>, <code>Debug</code>, and <code>Verbose</code> <code>Info</code> String"},{"location":"jvm/agent-configuration/#additional-command-line-flags","title":"Additional command line flags","text":"<p>The following flags can be set only from the command line:</p> Parameter Explanation Type <code>lightrun_extra_class_path</code> Additional directories and files containing resolvable binaries. You can specify an absolute path with a range of filenames using wildcard characters that adhere to glob patterns. Note: - Wilcard support is supported from version 1.18.1. string <code>lightrun_extra_class_path_delimiter</code> Set the delimiter character in the <code>lightrun_extra_class_path</code>. By default, the delimiter is set using a colon (<code>:</code>) character. You can specify an absolute path with a range of filenames using wildcard characters that adhere to glob patterns. *Note: Wilcard support added in version 1.18.1. bool <code>lightrun_exclude_class_path</code> Prevent <code>JAR</code>, <code>WAR</code> and <code>EAR</code> file types from being loaded and indexed when the Java agent launches, even though they are included in paths that are listed in the <code>CLASSPATH</code> environment settings. This option is intended to reduce the CPU and memory required for launching our agent by excluding these irrelevant classes. You can specify an absolute path with a range of filenames using wildcard characters that adhere to glob patterns. *Note: Wilcard support added in version 1.18.1. string <code>lightrun_exclude_class_path_delimiter</code> Set the delimiter character in the <code>lightrun_exclude_class_path</code>. By default, the delimiter is set using the colon (<code>:</code>) character. bool <code>index_compressed_archives</code> Allows loading compressed archives, In addition to native Java archive types such as <code>JAR</code>, <code>WAR</code> and <code>EAR</code>. The compressed archives are decompressed and any <code>JAR</code>, <code>WAR</code> or <code>EAR</code> file included in them is loaded and indexed. You can specify an absolute path with a range of filenames using wildcard characters that adhere to glob patterns. By default, this parameter is set as <code>false</code>. Note: - The field is availble from version 1.15 with support for <code>Zip</code> Archive types. - Wilcard support is supported from version 1.18.1. bool <code>lightrun_wait_for_init</code> Block the application until the first time breakpoints are fetched from the server. This option is intended for short-running applications like serverless functions, and it ensures that the Lightrun agent has time to communicate with the Lightrun server before the short-running application disconnects. Note - using <code>lightrun_wait_for_init</code> in a cloud environment will likely incur additional costs from the cloud provider due to a longer application runtime. bool <code>lightrun_init_wait_time_ms</code> Timeout in milliseconds for wait if <code>lightrun_wait_for_init</code> is set. int32 <p>Note</p> <p>To add multiple values to the <code>lightrun_extra_class_path</code> flag, chain the values together just as you would in a regular JVM CLASSPATH environment value. Use the appropriate separator for your operating system.</p>"},{"location":"jvm/agent-configuration/#enabling-lightrun-support-for-invokedynamic-bytecode-instruction-in-java-methods","title":"Enabling Lightrun support for invokedynamic bytecode instruction in Java methods","text":"<p>A number of language constructs, such as Lambda functions and plus-operator string concatenation, supported in Java, Groovy, Scala, and Kotlin, are compiled into a special bytecode instruction - <code>invokedynamic</code>. Enabling support for the <code>invokedynamic</code> bytecode instruction in Lightrun requires enabling the feature in the agent.config file and specifying a dump folder for dynamically created classes. Once activated, Lightrun can process expressions or conditions containing calls to methods with the <code>invokedynamic</code> bytecode instruction. </p> <p>An example of a Lightrun condition or experssion can be demonstrated as follows:</p> <p><code>methodA().methodB() == methodC()</code></p> <p>In this example, if any of the methods \u2014 <code>methodA</code>, <code>methodB</code>,  or <code>methodC</code> include an <code>invokedynamic</code> bytecode instruction, Lightrun can process the condition. This includes scenarios where Lambda calls occur within their execution flow, whether immediately or recursively.</p> <p>However, it is important to note this known limitation: You cannot add syntax reliant on the <code>invokedynamic</code> bytecode instruction directly within the condition or expression, such as Lambdas and plus-operator string concatenation. Nevertheless, when the <code>Invokedynamic</code> instruction is within a compiled class in your application, Lightrun conditions and expressions will be able to process it. </p>"},{"location":"jvm/agent-configuration/#to-enable-invokedynamic-bytecode-instruction-support","title":"TO ENABLE INVOKEDYNAMIC BYTECODE INSTRUCTION SUPPORT","text":"<ol> <li> <p>Configure the <code>invokedynamic_enabled</code> parameter in your <code>agent.config</code> file.</p> <p><code>invokedynamic_enabled = 1</code></p> </li> <li> <p>Specify a dump folder. The process differs depending on the Java version being used.</p> <ul> <li> <p>For Java versions 20 and lower</p> <ol> <li>Specify a dump folder to allow the JVM agent to read your generated Lambda classes.</li> <li>Create a new folder, for example: <code>/myapp/dump</code>.</li> <li> <p>Add the new folder in your JVM options.</p> <p><code>-Djdk.internal.lambda.dumpProxyClasses=/myapp/dump</code></p> </li> <li> <p>Add the new folder to your CLASSPATH.</p> <p><code>-classpath  [other_classpath_items]:/myapp/dump</code></p> </li> </ol> </li> </ul> <ul> <li> <p>For Java versions 21 and higher</p> <ol> <li> <p>Enable dumping of dynamically created Lambda classes.  Note that the JVM will dump the dynamically created lambda classes to the following path: </p> <p><code>{projectDir}/DUMP_LAMBDA_PROXY_CLASS_FILES</code></p> <p><code>-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles=true</code></p> </li> <li> <p>Add the dump folder to your CLASSPATH. Note that the folder name is system-defined and cannot be altered.</p> <p><code>-classpath [other_classpath_items]:{projectDir}/DUMP_LAMBDA_PROXY_CLASS_FILES</code></p> </li> </ol> </li> </ul> </li> </ol>"},{"location":"jvm/agent/","title":"Install the Lightrun Java agent","text":"<p>The Lightrun agent is at the core of the Lightrun platform. It's the component that communicates requests for runtime observability to your running code, and gathers and relays the requested data back to the Lightrun Server, and eventually the developer's IDE.</p> <p>Before running the agent, it must be installed on the system where your code to be monitored is running, and its credentials must be declared either inside an <code>agent.config</code> file, or as environment variables entered from the command line.</p>"},{"location":"jvm/agent/#before-you-begin","title":"Before you begin","text":"<ul> <li>This document is intended for Java developers working with JDK 8+. <ul> <li>To set up Lightrun with Kotlin, click here.</li> <li>To set up Lightrun wiht Scala, click here.</li> </ul> </li> <li>Before you proceed with the installation, review the JVM agent system requirements here.</li> <li> <p>Alpine Support:</p> <ul> <li>When downloading the Lightrun agent, make sure you select the correct OS based on the OS of your base image. If, for example, you're using <code>openjdk:17-alpine</code> in the <code>FROM</code> line of your image, you should use the Lightrun <code>alpine</code> agent.</li> </ul> <ul> <li> <p>To run the Lightrun Java agent on an Alpine operating system, ensure <code>libstdc++</code> is installed on the system.</p> <pre><code>apk add libstdc++\n</code></pre> </li> </ul> </li> </ul> <p>You can install the Lightrun Agent using one of following methods:</p> <ul> <li>A direct installation </li> <li>Within a Docker container </li> <li>Using the IntelliJ IDE </li> </ul> <p>To get started, download the Lightrun agent.</p>"},{"location":"jvm/agent/#downloading-the-lightrun-java-agent","title":"Downloading the Lightrun Java Agent","text":"<p>If you haven't yet done so, please sign up for a Lightrun account.</p> <p>Our onboarding flow will direct you to download the agent. You can also download the Lightrun JVM Agent from the Management Portal.</p>"},{"location":"jvm/agent/#download-the-agent","title":"Download the agent","text":"<ol> <li>Log in to the Management Portal.</li> <li> <p>Copy the download script from the Install the Agent section.</p> <p></p> </li> <li> <p>Open a terminal and navigate to the directory where your project folder is located.</p> </li> <li>Paste the copied script into your terminal and click the enter or return key to download.</li> </ol> <p>Now that you have downloaded the agent, you can proceed to use it.</p>"},{"location":"jvm/agent/#direct-installation","title":"Run directly","text":"<p>On completion of the agent download, from your terminal, enter the following command: <code>java -agentpath:&lt;path-to-agent&gt;\\lightrun_agent.so -jar &lt;your-jar-file&gt; RestofArgumentsHere</code> </p> <p>Replace the placeholders in the command as follows:</p> <ul> <li><code>&lt;path-to-agent&gt;</code>: The full path to the agent's folder (<code>~/</code> will not work)  </li> <li><code>&lt;your-jar-file&gt;</code>:The full path to the application to be run with the agent  </li> <li><code>RestofArgumentsHere</code>: Any relevant configuration options.  </li> </ul> <p>See the example in this video:</p> <p>Optional</p> <p>To cause all launched Java processes automatically to be attached to an agent, you can add the <code>JAVA_OPTS</code> environment variable. From the terminal, enter the following command (replace the <code>agentpath</code> value with the path to the Lightrun agent):</p> <pre><code>export JAVA_OPTS=-agentpath:/path/to/agent/lightrun_agent.so\n</code></pre>"},{"location":"jvm/agent/#docker-installation","title":"Run with Docker","text":"<p>Docker containers are ephemeral.</p> <p>If you were to create a shell into a Docker container (by <code>docker exec -it &lt;container-id&gt;</code>, for example) and add the Lightrun files there, they would disappear the next time the container would spin up due to the ephemeral nature of that container.</p> <p>Instead, we suggest you install Lightrun by adding it to the underlying Docker image directly, i.e. by \"baking\" the agent into the image.</p> <p>The following example displays how to add the Lightrun Agent to the <code>Dockerfile</code>:</p> <pre><code>FROM openjdk:11\n\nWORKDIR /opt/lightrun\nENV LIGHTRUN_KEY=&lt;LIGHTRUN_KEY&gt;\nRUN bash -c \"$(curl -L \"https://app.lightrun.com/public/download/company/&lt;ORG-ID&gt;/install-agent.sh?platform=&lt;your-base-image-os&gt;\")\"\n\nCOPY prime.jar /app/prime.jar\n\nCMD [\"java\", \"-agentpath:/opt/lightrun/agent/lightrun_agent.so\", \"-jar\", \"/app/prime.jar\"]\n</code></pre> <p>Important</p> <p>Post Installation instructions: </p> <ul> <li>Ensure that the <code>agent</code> folder is located in the Docker image build path, i.e. it is present in the current working directory when you're running <code>docker build . -t &lt;image-name&gt;</code>.</li> <li><code>&lt;LIGHTRUN_KEY&gt;</code> environment variables: Available from the Lightrun Management Console under the Install an Agent section. Do note that for production use, it's a good idea to persist that secret in an external secret managment solution, like HashiCorp Vault.</li> </ul> <p>Optional</p> <p>To cause all launched Java processes automatically to be attached to an agent, you can add the <code>JAVA_OPTS</code> environment variable. From the terminal, enter the following command (replace the <code>agentpath</code> value with the path to the Lightrun agent, after it has been downloaded).</p> <pre><code>export JAVA_OPTS=-agentpath:/path/to/agent/lightrun_agent.so\n</code></pre>"},{"location":"jvm/agent/#runintellij","title":"Run with IntelliJ","text":"<p>You can attach the agent also when running your application from IntelliJ:</p> <ol> <li> <p>Go to the Run/Debug Configuration of your application.</p> </li> <li> <p>Add the following agent argument to the VM options field.</p> <pre><code>-agentpath:/path/to/agent/lightrun_agent.so\n</code></pre> </li> <li> <p>Replace the <code>agentpath</code> value with the path to the Lightrun agent.</p> <p> </p> </li> <li> <p>If the VM options field is not available, choose Modify options and add the field.</p> <p></p> </li> </ol>"},{"location":"jvm/agent/#java-agent-post-installation","title":"Java Agent post-installation","text":"<ul> <li>If you cannot see the agent in your plugin or the management portal, please use the troubleshooting guide or contact us. </li> <li>You can customize the agent configuration at any time. To apply the changes, the application must be restarted. For more information, click here.</li> </ul>"},{"location":"jvm/agent/#adding-support-for-java-debugging-symbols","title":"Adding support for Java debugging symbols","text":"<p>Important</p> <p>Most Java compilers exclude debugging symbols by default to reduce the generated binary size and improve performance and optimization. This action can prevent Lightrun from working as the Lightrun agent needs to find several symbols, including your project's variables, to insert Lightrun actions into your project.</p> <p>To ensure that the required debugging information is included in your compiled files, you must add the following debug options to your Java compiler.</p> <ul> <li>-g:source</li> <li>-g:lines</li> <li>-g:vars</li> </ul> <p>You can learn more about the debugging symbols here. For more information on specifying debugging symbols in your Maven or Gradle project, see Build tools (Maven and Gradle)</p> <p>Note - The added debug options do not impact compiler optimization or performance; they only enhance the bytecode with additional debug information.</p>"},{"location":"jvm/build-tools/","title":"Build Tools (Maven & Gradle)","text":""},{"location":"jvm/build-tools/#build-tool-configuration","title":"Build Tool Configuration","text":"<p>Maven and Gradle compile Java class files seamlessly, but they might exclude some debugging symbols. This is done to reduce the binary size and make reverse engineering harder for distributed apps. </p> <p>To ensure these details are included, add a flag to the compiler. This flag has no impact on compiler optimization or performance, it only enhances the bytecode with additional debug information. </p>"},{"location":"jvm/build-tools/#maven","title":"Maven","text":""},{"location":"jvm/build-tools/#building-the-project","title":"Building the project","text":"<p>Lightrun's agent needs to find several symbols, including your project's variables, so that later it would be possible to add actions. </p> <p>In order to find those symbols, it is needed to add debug options to the Java compiler via Maven. Maven compiles with the <code>maven-compiler-plugin</code>, which can be configured in the <code>&lt;configuration&gt;</code> tag. Under that clause, in the <code>&lt;compilerArgs&gt;</code> tag, we will add <code>-g</code> which is the debugging information option for the Java compiler. To that we will append the keywords <code>source</code>, <code>lines</code> and <code>vars</code> (you can view their meaning here).</p> <p>Add the following lines to the <code>pom.xml</code> file:  <pre><code>&lt;configuration&gt;\n&lt;compilerArgs&gt;\n&lt;arg&gt;-g:source,lines,vars&lt;/arg&gt;\n&lt;/compilerArgs&gt;\n&lt;/configuration&gt;\n</code></pre> The <code>pom.xml</code> file should match this structure after insertion:</p> <pre><code>&lt;project&gt;\n[...]\n  &lt;build&gt;\n[...]\n    &lt;plugins&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n&lt;version&gt;[...]&lt;/version&gt;\n&lt;configuration&gt;\n&lt;compilerArgs&gt;\n&lt;arg&gt;-g:source,lines,vars&lt;/arg&gt;\n&lt;/compilerArgs&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n[...]\n  &lt;/build&gt;\n[...]\n&lt;/project&gt;\n</code></pre>"},{"location":"jvm/build-tools/#running-the-project-with-maven-wrapper","title":"Running the project with Maven Wrapper","text":"<p>Set the MAVEN_OPTS environment variable, in order to pass the Lightrun agent as a parameter to the JVM running Maven. From the server terminal, enter the following command (replace the <code>agentpath</code> value with the path to the Lightrun agent, after it has been downloaded): <pre><code>MAVEN_OPTS=-agentpath:/path/to/agent/lightrun_agent.so ./mvnw\n</code></pre></p> <p>Important</p> <p>Change <code>/path/to/agent/</code> to the downloaded agent folder full path.( Note - using <code>~/</code> will not work)</p> <p>Troubleshooting</p> <ul> <li>Make sure that the JAVA_TOOL_OPTIONS environment variable is unset, otherwise it will interfere with the MAVEN_OPTS variable.  You can check the value of JAVA_TOOL_OPTIONS with: <pre><code>echo $JAVA_TOOL_OPTIONS\n</code></pre> If the environment variable is assigned, backup the value if needed and then delete the variable with: <pre><code>unset JAVA_TOOL_OPTIONS\n</code></pre></li> <li>Make sure that your mvnw file includes the MAVEN_OPTS environment variable when executing the project. If not, add it like so (usually in the last command in the file): <pre><code>exec \"$JAVACMD\" \\\n$MAVEN_OPTS \\\n[...]\n</code></pre></li> </ul>"},{"location":"jvm/build-tools/#gradle","title":"Gradle","text":"<p>In the Gradle build file, ensure that the following properties are specified:</p> <pre><code>compileJava.options.debugOptions.debugLevel = \"source,lines,vars\"\ncompileTestJava.options.debugOptions.debugLevel = \"source,lines,vars\"\n</code></pre>"},{"location":"jvm/java-expressions/","title":"Java Expressions","text":"<p>Lightrun supports the usage of Java expressions in multiple scenarios. Specifically, it supports the following:</p> <ul> <li>Log format - when adding a log an expression can appear inside curly braces (<code>{}</code>) e.g. <code>My variable value is {myVar} and my method returned {myMethod()}</code> which will print out the value of the actual variable. </li> <li>Conditions which are standard boolean expressions e.g. <code>myVar &gt; 20</code>.</li> <li>Watch expressions which represent a value we query e.g. <code>myVar</code>.</li> </ul> <p>All of these can be added when creating a respective action. In this section we'll discuss the limits of these expressions.</p>"},{"location":"jvm/java-expressions/#read-only","title":"Read-Only","text":"<p>All expressions are evaluated by the Lightrun agent. If an expression modifies state it will fail. E.g. an expression such as <code>{myMethod()}</code> will fail if the code for this method looks like this:</p> <pre><code>public int myMethod() {\nif(thisIsNeverTrue) {\nmyVar = 10;\n}\nreturn myVar;\n}\n</code></pre> <p>Lightrun doesn't do complex runtime static analysis (for performance). If an assignment exists but isn't reachable then it will fail the read-only test. </p>"},{"location":"jvm/java-expressions/#throttling","title":"Throttling","text":"<p>Lightrun throttles slow code or code that's excessively used. Complex expressions just won't work e.g. a log such as <code>This is my list of objects {list}</code> will fail even for a relatively small list.</p> <p>However, printing an individual entry will work much better e.g.: <code>This is the object from my list {list.get(offset)}</code></p> <p>Tip</p> <p>Use a simple constraint to limit over logging or snapshots.</p>"},{"location":"jvm/java-expressions/#syntax-limitations","title":"Syntax Limitations","text":"<p>Lightrun always uses Java syntax for expressions. Even when working with other JVM languages such as Kotlin, Scala etc. </p> <p>The syntax has some restrictions due to the way Java bytecode works. Some information isn't available in the agent and some restrictions are there for performance.</p>"},{"location":"jvm/java-expressions/#256-characters","title":"256 Characters","text":"<p>An expression can't exceed 256 characters. Notice that Lightrun throttles complex expressions anyway, so long expressions might be irrelevant. </p> <p>However, if you create exceptionally long variable names you might run into this limit.</p>"},{"location":"jvm/java-expressions/#erasures","title":"Erasures","text":"<p>Let's review the following Java code:</p> <pre><code>List&lt;MyObject&gt; myList = new ArrayList&lt;&gt;();\n</code></pre> <p>Let's say I want to add the following log statement: <code>My first list object is: {myList.get(0).myMethod()}</code>. </p> <p>This will fail. To understand why we need to understand that Java generics are a compile time construct. The compiler strips away the type and converts it to a cast, as such the agent has no idea what the type is.</p> <p>The solution is simple: <code>My first list object is: {((MyObject)myList.get(0)).myMethod()}</code>.</p>"},{"location":"jvm/java-expressions/#name-resolution","title":"Name Resolution","text":"<p>Java handles name spaces/collisions very well thanks to the package and module systems. Java <code>import</code> statements are used to resolve fully qualified names in your Java applications. This resolution is done during compile time, the class file has no bytecode equivalent of the import statement.</p> <p>E.g. code like this:</p> <pre><code>import java.util.List;\npublic class MyClass {\npublic static void main(String[] args) {\nList&lt;String&gt; myList = new ArrayList&lt;&gt;();\n// ...\n}\n}\n</code></pre> <p>Is compiled by <code>javac</code> to:</p> <pre><code>public class MyClass {\npublic static void main(String[] args) {\njava.util.List&lt;String&gt; myList = new java.util.ArrayList&lt;&gt;();\n// ...\n}\n}\n</code></pre> <p>This is important because Java also has a <code>java.awt.List</code> class and collision with <code>java.util.List</code> is a real problem!</p> <p>If I add an expression such as: <code>((List)object).size()</code> it's possible that it will fail. Lightrun will try to find the correct class but might accidentally pick the AWT class instead of the util class.</p> <p>The solution is to use the fully qualified name: <code>((java.util.List)object).size()</code>.</p>"},{"location":"jvm/kotlin/","title":"Attaching and running the JVM Agent with your Kotlin application","text":"<p>Version Support</p> <p>The instructions below apply to Kotlin v1.5 and higher.</p> <p>Prerequisites</p> <p>Before running the app with the agent, make sure you have:</p> <ul> <li>Installed the Kotlin command-line compiler.</li> <li>Downloaded the Java agent.</li> </ul>"},{"location":"jvm/kotlin/#running-the-lightrun-agent","title":"Running the Lightrun agent","text":"<p>For Kotlin v1.6 and higher:</p> <ol> <li> <p>Compile your application     <pre><code>kotlinc &lt;your-main&gt;.kt -include-runtime -d myapp.jar\n</code></pre></p> </li> <li> <p>Run the application with the Java agent     <pre><code>java -agentpath:&lt;path-to-agent&gt;/lightrun_agent.so -jar myapp.jar\n</code></pre></p> <p>For Kotlin v1.5 you might get a \"no main manifest attribute\". You can put the <code>kotlin-stdlib</code> in your classpath instead.</p> </li> <li> <p>Compile your application     <pre><code>kotlinc &lt;your-main&gt;.kt\n</code></pre></p> </li> <li> <p>Run the application with the Java agent and kotlin-stdlib in your classpath     <pre><code>java -cp &lt;path-to-kotlin&gt;/kotlin-stdlib/1.4.20/kotlin-stdlib-1.4.20.jar:. -agentpath:&lt;path-to-agent&gt;/agent/lightrun_agent.so &lt;your-main&gt;\n</code></pre></p> </li> </ol> <p>Optional</p> <p>You can also automatically attach an agent to your launched Java processes with the <code>JAVA_OPTS</code> environment variable. </p> <pre><code>export JAVA_OPTS=-agentpath:&lt;path-to-agent&gt;/lightrun_agent.so\n</code></pre> <p>Note</p> <p>Kotlin expressions are limited:    </p> <ul> <li>All functions in the expression should be converted to their Java equivalent. For example, (pow -&gt; Math.pow).</li> <li>Expressions with Kotlin ranges and Coroutines are not supported.</li> </ul>"},{"location":"jvm/scala/","title":"Installing and using Lightrun with Scala","text":"<p>Prerequisites</p> <p>Before running the app with the agent, make sure you have downloaded the Java agent.</p>"},{"location":"jvm/scala/#using-the-lightrun-agent","title":"Using the Lightrun agent","text":"<p>Run your application with the following command:</p> <pre><code>java -agentpath:&lt;/path-to-agent&gt;/lightrun_agent.so -cp &lt;path-to-scala&gt;/scala-library.jar:&lt;path-to-jar&gt; &lt;your-main-class&gt;\n</code></pre> <ul> <li><code>&lt;path-to-agent&gt;</code> - The absolute path to the agent's folder (~/ will not work)</li> <li><code>&lt;path-to-scala&gt;</code> - The absolute path to the Scala installation directory</li> <li><code>&lt;path-to-jar&gt;</code> - The absolute path to the Scala application to be run with the agent</li> <li><code>&lt;your-main-class&gt;</code> - The application main class to be run</li> </ul> <p>Optional</p> <p>You can also automatically attach an agent to your launched Java processes with the <code>JAVA_OPTS</code> environment variable. </p> <pre><code>JAVA_OPTS=-agentpath:&lt;path-to-agent&gt;/lightrun_agent.so\n</code></pre>"},{"location":"jvm/scala/#known-issues-and-limitations","title":"Known issues and limitations","text":"<ul> <li>Scala expressions are limited <p>Expressions should be converted to their equivalent Java syntax.</p> </li> </ul> <ul> <li> <p>Lightrun snapshot results distortion</p> <ul> <li> <p>In certain situations, Lightrun snapshot results may display duplicated variable values. The duplication happens due to the way Scala's compiler compiles the Scala multiple-return-values syntax into Java bytecode. As a result, a local duplication occurs for every local variable defined in the return values tuple of the multiple-return-values method. This is illustrated in the following example, where the variables <code>square</code> and <code>fib</code> will be duplicated locally.</p> <pre><code>val (square, fib) = computeExample(num)\n</code></pre> </li> </ul> <ul> <li>Scala allows the existence of variables with the same name within the same method scope. If variable 'A' is present in one scope within the method, another variable with the same name can coexist in a different scope within that method. Moreover, it is even possible for one variable's scope to be nested within another, presenting a challenge for Lightrun in distinguishing between them.</li> </ul> </li> </ul> <ul> <li>Setting Method Duration metrics is not supported.</li> </ul>"},{"location":"jvm/system-requirements/","title":"Lightrun Java agent system requirements","text":"<p>The following page describes the IDE and operating system requirements for running the Lightrun JVM agent.</p>"},{"location":"jvm/system-requirements/#supported-operating-systems","title":"Supported operating systems","text":"OS Requirements Linux - Java versions 8, 11, 17, 21, and 22 - Alpine Linux versions 3.16, 3.17, 3.18, and 3.19 (libstdc++ is required to use Lightrun in Alpine Linux) - Ubuntu LTS versions 20.04, and 22.04. (Linux with GLIBCXX_3.4.19 or later) - CentOS versions 7, 8, and 9 (Linux with GLIBCXX_3.4.19 or later) Windows OS - Java versions 8, 11, 17, 21, and 22 - Windows Server versions 2016 (limited), 2019, and 2022  macOS - Java versions 8, 11, 17, 21, and 22- macOS versions 12.O and higher for Apple Chipset based Macs"},{"location":"jvm/system-requirements/#lightrun-ide-plugins","title":"Lightrun IDE Plugins","text":"<ul> <li>VSCode (versions 1.72.0 and later)</li> <li>IntelliJ IDEA (versions 2022.3.0 and later)</li> <li>VSCode.dev</li> <li><code>code-server</code></li> </ul>"},{"location":"jvm/tagging/","title":"Manage Lightrun Java agent tags","text":"<p>Tagging enables you to group agents together by using a meaningful name, typically based on common functionality. For example, you can use tags to identify the location and purpose of each agent: Database servers, Staging, and so forth. Additionally, you can apply to each agent multiple tags in any combination.</p> <p>By applying multiple tags, you can bind actions to an agent before the agent has been launched, and you can apply actions to applications across different sectors. Once an action is bound to a tag, it is implicitly added to all of the agents that possess that tag.</p> <p>Example</p> <ul> <li>Define a tag in the metadata file named \"Integration\".</li> <li>Add that tag to relevant agents where you're running your application for integration testing.</li> <li>Set integration tests to execute with the Integration tag, in order to debug an integration test failure.</li> <li>List actions by the Integration tag from the CLI with <code>java -jar lightrunc.jar list-actions tag:Integration</code>. The output lists all of your agents that inserted actions for integration testing.</li> </ul> <p>Out-of-the-box, agents have a single Production tag. You can:</p> <ul> <li>Create and manage tags</li> </ul> <ul> <li>View all tags</li> </ul> <ul> <li>View tags and their details directly from the CLI</li> </ul>"},{"location":"jvm/tagging/#to-create-and-add-a-tag-to-an-agent","title":"To create and add a tag to an agent","text":"<ol> <li> <p>From the relevant server where the agent is installed, go to the <code>agent.metadata.json</code> file and open it.</p> </li> <li> <p>Insert tag names within the tags object (which should be nested in the registration object).</p> <pre><code>{\n\"registration\": {\n\"tags\": [\n{\n\"name\": \"Tag1\"\n},\n{\n\"name\": \"Tag2\"\n},\n{\n\"name\": \"Tag3\"\n}\n]\n}\n}\n</code></pre> <p>For example, the following JSON applies the tags Production, Main, and East US to the relevant agent.</p> <pre><code>{\n\"registration\": {\n\"displayName\": \"&lt;DISPLAY_NAME&gt;\",\n\"tags\": [\n{\n\"name\": \"Production\"\n},\n{\n\"name\": \"Main\"\n},\n{\n\"name\": \"East US\"\n}\n]\n}\n}\n</code></pre> <p>Alternatively, tags can be applied using a command line argument as part of the command you use to run the agent with your application.</p> <p>Multiple tags can be specified by separating them with commas. For example, you can set them like this:</p> <pre><code>java -Dlightrun.registration.tags=myTag1,myTag2,myOtherTag\n</code></pre> </li> <li> <p>Save the changes and close the file.</p> </li> <li> <p>Restart the application.</p> <p>Important</p> <p>Changes to this file aren't detected until the application is restarted.</p> </li> </ol>"},{"location":"jvm/tagging/#view","title":"To view all tag details from the Management Portal","text":"<p>Log in to your Lightrun account and navigate to Entities-&gt;Tags.</p> <p>The Tags screen loads, appearing similar to the example below.</p> <p></p> <p>The details displayed in the Tags screen are as follows:</p> Column Description Name The tag name Actions A list of actions currently attached to this tag. Agents A list of agents with which this tag has been associated."},{"location":"jvm/tagging/#view-tags","title":"To view tags from the CLI","text":"<ol> <li> <p>Install the Lightrun CLI tool</p> </li> <li> <p>Run the command <code>java -jar lightrunc.jar list-tags</code>:</p> <p></p> </li> </ol> <p>Info</p> <p>See the CLI reference for more information.</p>"},{"location":"jvm/servlets/glassfish/","title":"Configure Lightrun with Eclipse Glassfish","text":"<p>Glassfish is an open source Java application server by Oracle. The <code>domain.xml</code> file contains most of the Oracle GlassFish Server configurations.</p> <p>To start using Lightrun with a Glassfish server, first add the agent path as a <code>JVM</code> option to the Glassfish <code>java-config</code> block as in this example from lines 165-169 to the domain.xml file, or by any of the other options described below. </p> <p>When adding the option, insert the relevant values for the parameters as follows: </p> <ul> <li><code>install_dir</code> is the path where the agent is saved</li> <li><code>glassfish-domain-path</code> is the path to the glassfish project</li> <li><code>app-name</code> is the name of the Glassfish application</li> </ul>"},{"location":"jvm/servlets/glassfish/#to-configure-lightrun-with-glassfish","title":"To configure Lightrun with Glassfish","text":"<p>You can add the agent path option with any of these options described here. </p> <ul> <li>from the Glassfish Admin panel <p>1. Copy the agent path option.        <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;glassfish-domain-path&gt;/applications/&lt;app-name&gt;/WEB-INF/classes/\n</code></pre></p> <p>2. Navigate to the Admin panel (usually at http://localhost:4848</p> <p>3. Go to Configurations=&gt; server-config.</p> <p>4. Select the JVM Options tab.</p> <p>5. Paste the option in the dialog box.</p> </li> </ul> <ul> <li>from your CLI<p>1. Connect to your Glassfish server (usually at http://localhost:4848). </p> <p>2. Copy the following, update it based on your configurations and then run the <code>asadmin create-jvm-options</code> command from the terminal:       <pre><code>asadmin create-jvm-options -agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;glassfish-domain-path&gt;/applications/&lt;app-name&gt;/WEB-INF/classes/\n</code></pre></p> </li> </ul> <ul> <li>manually from the Glassfish <code>domain.xml</code> file <p>1. Copy the agent path option.         <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;glassfish-domain-path&gt;/applications/&lt;app-name&gt;/WEB-INF/classes/\n</code></pre></p> <p>2. Navigate to <code>&lt;glassfish-domain-path&gt;/config/domain.xml</code></p> <p>3. Paste the option in the <code>java-config</code> block of the file and save the changes.</p> </li> </ul> <p>Note</p> <ul> <li>This configuration enables the Lightrun agent to run every time the webserver restarts.</li> <li>Glassfish autodeploy (dynamic deployment) does not start a new agent. The agent should be restarted in order to apply new actions.</li> </ul>"},{"location":"jvm/servlets/google-app-engine/","title":"Configure Lightrun with Google App Engine","text":"<p>Google App Engine is the umbrella name for two distinct cloud hosting services from Google:</p> <ul> <li>Standard environment - everything is managed by Google</li> <li>Flexible environment - a bit more flexibility in terms of what you can do. Based on Docker</li> </ul> <p>The standard environment isn't supported by Lightrun since there is no access to the underlying JVM. </p> <p>Flexible environment is essentially a docker install and can be used via the same process as outlined here.</p>"},{"location":"jvm/servlets/jetty/","title":"Configure Lightrun with Eclipse Jetty","text":"<p>Jetty is a Java application server by Eclipse. As part of Jetty installation, the <code>start.d</code> directory is automatically added to the system. For Lightrun integration, you need to add a new file to this directory.</p>"},{"location":"jvm/servlets/jetty/#to-configure-lightrun-with-eclipse-jetty","title":"To configure Lightrun with Eclipse Jetty","text":"<ol> <li> <p>Create a new file <code>lightrun.ini</code> and add it to the <code>start.d</code> directory. </p> </li> <li> <p>Copy and paste the following content in the new <code>.ini</code> file:</p> <pre><code>--exec\n-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so\n</code></pre> </li> </ol>"},{"location":"jvm/servlets/microprofile/","title":"MicroProfile and Jakarta EE (TomEE, Geronimo and Payara)","text":"<p>MicroProfile is a standard not an implementation. It is a specification for a set of features that can be used in a variety of server implementations.</p> <p>Jakarta EE is a standard whose roots date back to Java EE. The standards are complimentary and some application servers implement both e.g. TomEE.</p> <p>There are many implementations of the MicroProfile specification but due to their variance it's hard to provide universal configuration guidelines.</p> <p>Warning</p> <p>At this time Lightrun doesn't support native compilation with GraalVM. Some MicroProfile implementations place heavy emphasis on native compilers, that wouldn't work. We're actively working on a solution for GraalVM. If you're interested in that please contact us.</p>"},{"location":"jvm/servlets/microprofile/#tomee","title":"TomEE","text":"<p>TomEE is an Apache application server with support for both Jakarta EE and MicroProfile.  It is built on top of Tomcat and as such can use the same instructions as Tomcat.</p>"},{"location":"jvm/servlets/microprofile/#geronimo","title":"Geronimo","text":"<p>Apache Geronimo is a newer application server implementation. You can configure Lightrun via the environment variable <code>JAVA_OPTS</code>.</p> <p>Specifically:</p> <pre><code>export JAVA_OPTS=\"$JAVA_OPTS -agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=path-to-application\n</code></pre> <p>Info</p> <p>The <code>path-to-application</code> argument helps Lightrun locate the applicable JAR/WAR/EAR file so it can bind debug information correctly. Lightrun will appear to work without it but might fail to add actions.</p> <p>Once this environment variable is defined you can run Geronimo as usual.</p>"},{"location":"jvm/servlets/microprofile/#payara","title":"Payara","text":"<p>Payara is a Jakarta EE &amp; MicroProfile compatible application server. It is built on top of GlassFish.</p> <p>Payara supports a Micro uber JAR which works similarly to Spring Boot by packaging the entire application into a single JAR. This makes deployment very easy, just use the standard agent syntax:</p> <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so\n</code></pre> <p>If you're using the full application server check out this guide on customizing JVM arguments. And add the following to the JVM:</p> <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=path-to-application\n</code></pre>"},{"location":"jvm/servlets/springboot/","title":"Configure Lightrun with Spring Boot","text":"<p>Lightrun has excellent support for Spring Boot applications right out of the box.</p> <p>Spring Boot has several deployment methods and each requires a different integration approach:</p> <ul> <li>Executable JAR</li> <li>Linux Service</li> <li>WAR/EAR deployment</li> <li>Spring Native</li> </ul>"},{"location":"jvm/servlets/springboot/#executable-jar","title":"Executable JAR","text":"<p>Executable JAR is one of the most common deployment methods and the easiest to support. Adding the standard agent code <code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so</code> to the <code>-jar</code> command line will work seamlessly.</p>"},{"location":"jvm/servlets/springboot/#linux-service","title":"Linux Service","text":"<p>The Executable JAR can be deployed as a Linux service under <code>systemd</code> or <code>init.d</code>. When enabling this mode you need to first define an environment variable that would pass the agent configuration to the service.</p> <p>This environment variable must be defined before the service. It uses the standard agent syntax:</p> <pre><code>JAVA_OPTS=-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so\n</code></pre>"},{"location":"jvm/servlets/springboot/#warear-deployment","title":"War/EAR deployment","text":"<p>This mode runs Spring Boot hosted within an application server e.g. Tomcat. To support such a deployment please read the respective documentation e.g. for Tomcat you can read this.</p>"},{"location":"jvm/servlets/springboot/#spring-native","title":"Spring Native","text":"<p>At this time Spring Native isn't supported by Lightrun. We're actively investigating the related process, please contact us if you're interested in this integration.</p>"},{"location":"jvm/servlets/tomcat/","title":"Configure Lightrun with Apache Tomcat","text":"<p>Tomcat is an open source Java application server by Apache. Applications are installed on Tomcat with a compressed Java web application resource (WAR) file. </p> <p>To start using Lightrun, first add an additional parameter to the <code>JAVA_OPTS</code> configuration variable in the WAR file. </p>"},{"location":"jvm/servlets/tomcat/#to-configure-lightrun-with-apache-tomcat","title":"To configure Lightrun with Apache Tomcat","text":"<ol> <li> <p>Copy the following agent path configuration: </p> <p><pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;tomcat-path&gt;/webapps/&lt;app-name.war&gt;\n</code></pre> 2. Insert relevant values for each of the parameters, as follows:   - <code>install_dir</code> is the path where the agent is saved   - <code>tomcat-path</code> is the path to the Tomcat project   - <code>app-name.war</code> is the name of the war file of the project</p> </li> <li> <p>Paste the agent path as an additional parameter to the <code>JAVA_OPTS</code> variable in your WAR file.</p> </li> <li> <p>Restart the Tomcat server to apply the configuration:</p> <pre><code>./catalina.sh stop\n./catalina.sh start\n</code></pre> </li> </ol> <p>Note</p> <ul> <li>This configuration enables the Lightrun agent to run every time the webserver restarts.</li> <li>Tomcat autodeploy (dynamic deployment) does not start a new agent. The agent should be restarted in order to apply new actions.</li> </ul>"},{"location":"jvm/servlets/weblogic/","title":"Configure Lightrun with Oracle WebLogic","text":"<p>WebLogic is a Java application server by Oracle. The Enterprise Application (EAR) file contains the WebLogic Server configurations that need to be updated for Lightrun integration.</p> <p>To start using Lightrun with a WebLogic server, first add the agent path as an additional <code>JAVA_OPTS</code> parameter in the WebLogic EAR. </p>"},{"location":"jvm/servlets/weblogic/#to-configure-lightrun-with-oracle-weblogic","title":"To configure Lightrun with Oracle WebLogic","text":"<p>Add the parameter with one of the following options:</p> <ul> <li>from the WebLogic Admin console: <p>1. Copy the agent path option.         <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;glassfish-domain-path&gt;/applications/&lt;app-name&gt;/WEB-INF/classes/\n</code></pre></p> <p>2. Navigate to the Admin panel (usually at http://localhost:7001/console)</p> <p>3. Press Lock &amp; Edit.</p> <p>4. Go to (environment) =&gt; Servers =&gt; (server)</p> <p>5. Go to the Start/Stop tab and update the Arguments with the agent path.</p> </li> </ul> <ul> <li>manually from the WebLogic <code>sh</code> file of the EAR file<p>1. Copy the agent path and update it according to your configuration:         <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;weblogic-deploy-path&gt;/&lt;app-name.ear&gt;. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear'\n</code></pre></p> <p>3. Add the path to <code>Oracle/Middleware/user_projects/domains/&lt;your-domain&gt;/bin/setDomainEnv.sh</code> as an additional parameter to the <code>JAVA_OPTS</code> (see WebLogic documentation for help)</p> </li> </ul> <p>Note</p> <p>This configuration enables the Lightrun agent to run every time the webserver restarts.</p>"},{"location":"jvm/servlets/websphere/","title":"Configure Lightrun with WebSphere","text":"<p>WebSphere was one of the first major application servers to gain widespread adoption. It's still popular in large scale corporate deployments. Lightrun supports the current versions of WebSpehere and its Liberty profile.</p> <p>To set up Lightrun with WebSphere, you need to add a JVM argument configuration. This varies based on your version of WebSphere. </p> <p>You can read the instructions for the standard WebSphere installation here and for Liberty profile here.</p> <p>Following that process you can add the following to your JVM arguments:</p> <pre><code> -agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;websphere-deploy-path&gt;/&lt;app-name.war&gt;. </code></pre>"},{"location":"jvm/servlets/wildfly/","title":"Configure Lightrun with Wildfly (JBoss)","text":"<p>Wildfly is a Java application server by RedHat. The Wildfly Server configurations are stored in either the domain.conf for multiple instance deployments, or the standalone.conf for standalone implementations. </p> <p>To start using Lightrun with a Wildfly server, first add the agent path as an additional <code>JAVA_OPTS</code> parameter in the relevant Wildfly configuration file. </p> <p>This section gives high-level assistance for standalone servers.</p> <p>Support</p> <p>The Lightrun support for Wildfly has been verified on CentOS 7.6/WildFly 18 (the official WildFly Docker image).</p>"},{"location":"jvm/servlets/wildfly/#to-configure-lightrun-with-wildfly","title":"To configure Lightrun with Wildfly","text":"<p>For a standalone JVM deployment, JVM settings can be added as a <code>JAVA_OPTS</code> variable in the <code>standalone.conf</code> file.</p> <ol> <li>Copy the agent path, update it according to your configuration and then add it to <code>standalone.conf</code>: </li> </ol> <pre><code>-agentpath:&lt;install_dir&gt;/agent/lightrun_agent.so=--lightrun_extra_class_path=&lt;widlfly-deploy-path&gt;/&lt;app-name.war&gt;. </code></pre> <p>!!! tip       - The default server dynamic logs are in <code>/opt/jboss/wildfly/standalone/log/server.log</code>       - To deploy the Management Portal copy a .war file to the deployment dir <code>/opt/jboss/wildfly/standalone/deployments/</code>       - To redeploy an app, copy a new file to the deployment dir and then run <code>touch &lt;app_name&gt;.war</code> in the same dir. Then see <code>/opt/jboss/wildfly/standalone/log/server.log</code> to verify; the server stops working following these updates.</p> <ol> <li>Restart WildFly - How to start/stop the WildFly server</li> </ol>"},{"location":"lambda/introduction/","title":"Lightrun for AWS Lambda","text":"<p>Nowadays, FaaS (Function as a Service) is the default choice for individual developers and mature software vendors seeking low-cost, effortless, and scalable deployment solutions. While providing overall significant benefits like reduced costs, improved scalability, improved application resiliency, etc., using a FaaS platform like AWS Lambda also provides its limitations and challenges.</p> <p>One of the biggest challenges faced with FaaS applications is the lack of remote debugging options in a serverless environment. Due to the stateless nature of FaaS applications, developers often face a number of challenges when collecting data needed to detect and fix bugs when debugging cloud applications.</p> <p>Lightrun address these challenges by allowing dynamic data collection from your AWS Lambda function without code redeployment. With Lightrun, you can add logs, receive a stack trace, or monitor metrics data directly in your IDE without having to remove the FaaS application from its production environment.</p> <p>If you'd like to get started using Lightrun in your Lambda function product environment, you can add a Lightrun agent to your AWS Lambda function with the following tutorials. </p> <ul> <li>Lightrun on Node.js AWS Lambda</li> <li>Lightrun on Python AWS Lambda</li> </ul> <p>Note</p> <p>We currently do not support debugging AWS Lambda functions with the Lightrun Java agent.</p>"},{"location":"lambda/nodejs-containers/","title":"Deploy Lightrun on AWS Lambda with container images","text":""},{"location":"lambda/nodejs-containers/#overview","title":"Overview","text":"<p>To take advantage of Lightrun\u2019s functionality in your AWS Lambda function, you must deploy Lightrun\u2019s agent library with your project. One of the ways to import the additional code (frameworks, SDKs, libraries, and more) into a Lambda function is to package your Lambda function with the dependencies as a container image with Docker and then upload the image for hosting on Amazon Elastic Container Registry (Amazon ECR).</p> <p>In this tutorial, you will learn how to package the Lightrun Node.js and your Lambda function into a container image with Docker. You will also learn how to upload the container image to Amazon ECR for deployment as a Lambda function.</p>"},{"location":"lambda/nodejs-containers/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>An AWS account.</li> <li>Docker desktop or Docker engine installed and running on your local machine. See docker.com for Docker installation instructions.</li> <li>AWS CLI installed on your local machine. Follow the instructions here to install and set up the AWS CLI on your local machine if you haven\u2019t already.</li> </ul>"},{"location":"lambda/nodejs-containers/#configure-your-lambda-function-source-code-to-work-with-lightrun","title":"Configure your Lambda function source code to work with Lightrun","text":"<p>To configure your Lambda function code to work with Lightrun,</p> <ol> <li> <p>Wrap your Lambda function code with the <code>lightrun/lambda</code> module. The <code>lightrun/lambda</code> module ensures that the Lightrun agent is enabled before calling the serverless function, and also disables the Lightrun agent when the function call finishes so that it can properly handle the next call to the serverless function.</p> <pre><code>const lightrun = require(\"lightrun/lambda\");\n\nexports.handler = lightrun.wrap( async (event, context) =&gt; {\n&lt;lambda function source code here&gt;\n}, {\nlightrunSecret: process.env.LIGHTRUN_SECRET,\nagentLog: {\nlogsPath: \"\",\nlevel: \"debug\"\n},\nlightrunWaitForInit: true, lightrunInitWaitTimeMs: 10000,\nmetadata: {\nregistration: {\ndisplayName: \"&lt;lambda_function_name&gt;\",\ntags: ['&lt;lamda_function_name&gt;']\n}\n}\n}\n);\n</code></pre> <p>Note</p> <p>Change <code>&lt;lambda-function-name&gt;</code> to your Lambda functions name.</p> <p>Important</p> <p>AWS Lambda functions are event-driven short-running programs with a maximum execution time of 15 minutes. To debug AWS Lamda functions with the Lightrun Node.js agent:</p> <ol> <li> <p>Specify <code>lightrunWaitForInit: true</code> and <code>lightrunInitWaitTimeMs: 10000</code> in the Lightrun Node.js agent configuration. These two configuration parameters will block the lambda function execution till first time breakpoints are fetched from the Lightrun server and ensures that the Lightrun agent has time to communicate with the Lightrun server before the short-running application disconnects.</p> </li> <li> <p>Apply Metadata tags that include the name of your Lambda function - By default, a new Lightrun agent is created whenever the Lambda function is invoked. By adding our function\u2019s name as a metadata tag, we can attach Lightrun actions to agents created whenever the Lambda function is invoked, even before the Lambda function is invoked. This is because an action bound to a metadata tag is implicitly attached to all agents possessing that tag.</p> </li> </ol> </li> <li> <p>Add Lightrun as a dependency in your <code>package.json</code> file.</p> <pre><code>{\n\"name\": \"docker_web_app\",\n\"version\": \"1.0.0\",\n\"description\": \"Node.js on Docker\",\n\"author\": \"Lightrun docker\",\n\"main\": \"server.js\",\n\"scripts\": {\n\"start\": \"node server.js\"\n},\n\"dependencies\": {\n\"express\": \"^4.18.2\",\n\"lightrun\": \"1.13.0\"\n}\n}\n</code></pre> </li> </ol>"},{"location":"lambda/nodejs-containers/#upload-the-lambda-function-source-code-to-aws-ecr","title":"Upload the Lambda function source code to AWS ECR","text":"<p>To deploy upload the Lambda function source code to AWS ECR.</p> <ol> <li>Add a dockerfile to the functions folder.     <pre><code>touch .Dockerfile\n</code></pre></li> <li>Add the following code sample to the dockerfile.     <pre><code>FROM amazon/aws-lambda-nodejs:12\nCOPY index.js package.json ./\nRUN npm install\nCMD [ \"index.handler\" ]\n</code></pre></li> <li>Install the project dependencies.     <pre><code>npm install .\n</code></pre></li> <li>Create a repository for your Lambda function on ECR. Follow the instructions here to create a private repository on AWS ECR.</li> <li>Authenticate your Docker client to the Amazon ECR registry to which you intend to push your image.     <pre><code>aws ecr get-login-password --region region | docker login --username AWS --password-stdin &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com\n</code></pre></li> <li>Build the function's container image.     <pre><code>docker build -t &lt;lambda_function_image_name&gt; . --platform=linux/amd64\n</code></pre></li> <li>Tag your container image name with the Amazon ECR repository.     <pre><code>docker tag &lt;lambda_function_image_name&gt;:latest &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;ecr_repository_name&gt;:latest\n</code></pre></li> <li>Upload the container image to AWS ECR.     <pre><code>docker push &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;ecr_repository_name&gt;:latest\n</code></pre></li> </ol> <p>Important</p> <p>Change <code>&lt;lambda_function_image_name&gt;</code> to your container image name, <code>&lt;aws_account_id&gt;</code> to your AWS account ID, <code>&lt;region&gt;</code> to your preferred AWS region, and <code>&lt;ecr_repository_name&gt;</code> to the name of the ECR repository that you created for the Lambda function.</p>"},{"location":"lambda/nodejs-containers/#verify-things-are-working","title":"Verify things are working","text":"<p>To verify that a Lightrun agent has been installed added your Lambda function correctly,</p> <ol> <li>Verify that a new agent with your Lambda function name is created anytime your Lambda function runs and dies immediately your Lambda function stops.</li> <li>Verify that a tag with your Lambda function name has been added to your Lightrun account.</li> </ol>"},{"location":"lambda/nodejs-layers/","title":"Deploy Lightrun on AWS Lambda with Lambda layers","text":""},{"location":"lambda/nodejs-layers/#overview","title":"Overview","text":"<p>To take advantage of Lightrun\u2019s functionality in your AWS Lambda function, you must deploy Lightrun\u2019s agent library with your project. One of the ways to import the additional code (frameworks, SDKs, libraries, and more) into a Lambda function is to bundle the function with an AWS Lambda Layer.</p> <p>In this tutorial, you will learn how to package the Lightrun Node.js agent into a Lambda layer and integrate the packaged agent into your Node.js AWS Lambda function.</p> <p>Note</p> <p>These instructions are valid only for AWS Lambda functions deployed as a .zip file archive.</p>"},{"location":"lambda/nodejs-layers/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>A Lightrun account.</li> <li>An AWS account.</li> </ul>"},{"location":"lambda/nodejs-layers/#create-a-lambda-layer","title":"Create a Lambda layer","text":"<p>An AWS Lambda Layer is a <code>.zip</code> file archive containing libraries, configuration files, dependencies, etc., that you can import into your Lambda function at runtime. </p> <p>To create an AWS Lambda layer for the Lightrun Node.js agent,</p> <ol> <li> <p>Compile the Lightrun Node.js agent into a <code>.zip</code> file archive.</p> Compile the Lightrun Node.js agent into a .zip archive<p>To compile the Lightrun Node.js into a zip file archive.</p> <ol> <li>Create a new directory that will be used to store the Lambda layer.   <pre><code>mkdir lambda_layer\ncd lambda_layer\n</code></pre></li> <li>Initialize NPM in the new directory. A <code>package.json</code> file will be generated for the directory.   <pre><code>npm init -y\n</code></pre></li> <li>Install Lightrun   <pre><code>npm install lightrun\n</code></pre></li> <li>Add the following build script to the generated <code>package.json</code> file.   <pre><code>\"scripts\": {\n\"build\": \"npm install &amp;&amp; mkdir -p nodejs &amp;&amp; cp -r node_modules nodejs/ &amp;&amp; zip -r  layers.zip nodejs\"\n}\n</code></pre></li> <li>Generate your <code>.zip</code> file archive.   <pre><code>npm run build </code></pre> A <code>layers.zip</code> file will appear in the <code>lambda_layer</code> folder.</li> </ol> <p>Important</p> <p>Installed dependencies in a Node.js Lambda layer must be stored in a <code>nodejs/node_modules/{our libraries}</code> or <code>nodejs/&lt;node-version&gt;/node_modules/{our libraries}</code>  file path for the dependencies to be discovered by a Node.js Lambda function. You can learn more about Lambda layer paths here.</p> </li> <li> <p>Create a Lambda layer with the <code>.zip</code> file archive. You can do this in two ways:</p> <ul> <li> Create a Lambda layer via the AWS console   To create an AWS Lambda layer from your AWS console.<ol> <li>Navigate to the AWS Lambda console, and open the Layers page of the console.</li> <li>Click Create Layer.</li> <li>Specify a name for the new Lambda Layer.</li> <li>Upload the generate <code>layers.zip</code> file.</li> <li>Select the compatible architecture and runtime for your <code>.zip</code> file (we will be using the  <code>x86_64</code> architecture and <code>nodejs14.x</code> as our preferred runtime environment).</li> <li>Click Create.</li> </ol> <p>The new Lambda Layer is now available to your Node.js Lambda functions.</p> </li> </ul> <ul> <li> Create a Lambda layer with the AWS CLI <p>Important</p> <p>The following instructions assume that you have the AWS CLI installed on your local machine. Follow the instructions here to install and set up the AWS CLI on your local machine if you haven\u2019t already.</p> <p>To create an AWS Lambda layer with the AWS CLI, run the following command in your terminal.</p> <pre><code>aws lambda --region us-east-1  publish-layer-version --layer-name 'Lightrun_Package_node' --compatible-runtimes 'nodejs14.x' --zip-file fileb://layers.zip\n</code></pre> <p>Change <code>Lightrun_Package_node1</code> to your preferred layer name, change <code>us-east-1</code> to your preferred region, and <code>nodejs14.x</code> to your desired Node.js runtime environment. If the deployment is successful, you should get a response similar to the following in your terminal.</p> <pre><code>{\n\"Content\": {\n\"Location\": \"&lt;aws_location_key&gt;\",\n\"CodeSha256\": \"DvW8+mrWOf9T5OAQkaekXpjpSVF4RbkFCiMo33o/BHA=\",\n\"CodeSize\": 4430628\n},\n\"LayerArn\": \"&lt;layers_arn&gt;\",\n\"LayerVersionArn\": \"&lt;layers_version_arn&gt;\",\n\"Description\": \"\",\n\"CreatedDate\": \"2022-06-16T12:13:50.087+0000\",\n\"Version\": 1,\n\"CompatibleRuntimes\": [\n\"nodejs14.x\"\n]\n}\n</code></pre> <p>Note</p> <p>Note the <code>LayerVersionArn</code> key that was highlighted above, the key will be required for attaching the created Lambda layer to Lambda functions with the AWS CLI.</p> </li> </ul> </li> </ol>"},{"location":"lambda/nodejs-layers/#share-the-lambda-layer-to-your-application","title":"Share the Lambda layer to your application","text":"<p>After compiling the Lightrun Node.js agent into a <code>.zip</code> file archive and uploading it to AWS as a Lambda layer, the next step is to add the Lambda layer to the Lambda functions. You can do this in two ways:</p> <ul> <li>Deploy Lightrun on AWS Lambda with Lambda layers<ul> <li>Overview</li> <li>Prerequisites</li> <li>Create a Lambda layer</li> <li>Share the Lambda layer to your application<ul> <li>Add the Node.js agent Lambda layer to your application via the AWS Console</li> <li>Add the Node.js agent Lambda layer to your application from the AWS CLI</li> </ul> </li> <li>Verify things are working</li> </ul> </li> </ul>"},{"location":"lambda/nodejs-layers/#add-the-nodejs-agent-lambda-layer-to-your-application-via-the-aws-console","title":"Add the Node.js agent Lambda layer to your application via the AWS Console","text":"<p>If you have already deployed your Node.js function to AWS, you can easily attach the Lambda layer to the Lambda function in your AWS Console. To do that,</p> <ol> <li> <p>Open the Functions page in your AWS Lambda console, and select the relevant Lambda function.</p> </li> <li> <p>Navigate to Configurations &gt; Environment variables &gt; Edit.</p> </li> <li> <p>Set the variable name to <code>LIGHTRUN_SECRET</code> and copy the value from your management portal.</p> <p></p> <p></p> </li> <li> <p>Wrap your Lambda function Code source with the <code>lightrun/lambda</code> module. The <code>lightrun/lambda</code> module ensures that the Lightrun agent is enabled before calling the serverless function, and also disables the Lightrun agent when the function call finishes so that it can properly handle the next call to the serverless function.</p> <pre><code>const lightrun = require(\"lightrun/lambda\");\n\nexports.handler = lightrun.wrap( async (event, context) =&gt; {\n&lt;lambda function source code here&gt;\n}, {\nlightrunSecret: process.env.LIGHTRUN_SECRET,\nagentLog: {\nlogsPath: \"\",\nlevel: \"debug\"\n},\nlightrunWaitForInit: true, lightrunInitWaitTimeMs: 10000,\nmetadata: {\nregistration: {\ndisplayName: \"&lt;lambda_function_name&gt;\",\ntags: ['&lt;lamda_function_name&gt;']\n}\n}\n}\n);\n</code></pre> <p>Note</p> <p>Change <code>&lt;lambda-function-name&gt;</code> to your Lambda functions name.</p> </li> <li> <p>Click Deploy to update the code source.</p> </li> <li>Scroll down to the Layers section, and select Add a layer. </li> <li>Click Custom layers and select the appropriate layer from the drop-down list.</li> <li> <p>Pick a version and click Add to attach the layer to your Lambda function.</p> <p></p> </li> </ol> <p>Important</p> <p>AWS Lambda functions are event-driven short-running programs with a maximum execution time of 15 minutes. To debug AWS Lamda functions with the Lightrun Node.js agent:</p> <ol> <li> <p>Specify <code>lightrunWaitForInit: true</code> and <code>lightrunInitWaitTimeMs: 10000</code> in the Lightrun Node.js agent configuration. These two configuration parameters will block the lambda function execution till first time breakpoints are fetched from the Lightrun server and ensures that the Lightrun agent has time to communicate with the Lightrun server before the short-running application disconnects.</p> </li> <li> <p>Apply Metadata tags that include the name of your Lambda function - By default, a new Lightrun agent is created whenever the Lambda function is invoked. By adding our function\u2019s name as a metadata tag, we can attach Lightrun actions to agents created whenever the Lambda function is invoked, even before the Lambda function is invoked. This is because an action bound to a metadata tag is implicitly attached to all agents possessing that tag.</p> </li> </ol>"},{"location":"lambda/nodejs-layers/#add-the-nodejs-agent-lambda-layer-to-your-application-from-the-aws-cli","title":"Add the Node.js agent Lambda layer to your application from the AWS CLI","text":"<p>Note</p> <ul> <li>The following instructions assume that you have the AWS CLI installed on your local machine. Follow the instructions here to install and set up the AWS CLI on your local machine if you haven\u2019t already installed it</li> <li>Ensure that you have configured all the permissions required to run an AWS Lambda function and created a role for the Lambda function. Learn more about the permissions needed to deploy a Lambda function here. Follow the instructions here to create a Lambda execution role for your Lambda function.</li> </ul> <p>If you haven\u2019t deployed your Lambda function to AWS, you can attach the Lambda layer to your application during deployment with the AWS CLI. To deploy your Lambda function with the deployed Lambda layer.</p> <ol> <li> <p>Wrap your Lambda function code with the <code>lightrun/lambda</code> module. The <code>lightrun/lambda</code> module ensures that the Lightrun agent is enabled before calling the serverless function, and also disables the Lightrun agent when the function call finishes so that it can properly handle the next call to the serverless function.</p> <pre><code>const lightrun = require(\"lightrun/lambda\");\n\nexports.handler = lightrun.wrap( async (event, context) =&gt; {\n&lt;lambda function source code here&gt;\n}, {\nlightrunSecret: process.env.LIGHTRUN_SECRET,\nagentLog: {\nlogsPath: \"\",\nlevel: \"debug\"\n},\nlightrunWaitForInit: true, lightrunInitWaitTimeMs: 10000,\nmetadata: {\nregistration: {\ndisplayName: \"&lt;lambda_function_name&gt;\",\ntags: ['&lt;lamda_function_name&gt;']\n}\n}\n}\n);\n</code></pre> <p>Note</p> <p>Change <code>&lt;lambda-function-name&gt;</code> to your Lambda functions name.</p> <p>Important</p> <p>AWS Lambda functions are event-driven short-running programs with a maximum execution time of 15 minutes. To debug AWS Lamda functions with the Lightrun Node.js agent:</p> <ol> <li> <p>Specify <code>lightrunWaitForInit: true</code> and <code>lightrunInitWaitTimeMs: 10000</code> in the Lightrun Node.js agent configuration. These two configuration parameters will block the lambda function execution till first time breakpoints are fetched from the Lightrun server and ensures that the Lightrun agent has time to communicate with the Lightrun server before the short-running application disconnects.</p> </li> <li> <p>Apply Metadata tags that include the name of your Lambda function - By default, a new Lightrun agent is created whenever the Lambda function is invoked. By adding our function\u2019s name as a metadata tag, we can attach Lightrun actions to agents created whenever the Lambda function is invoked, even before the Lambda function is invoked. This is because an action bound to a metadata tag is implicitly attached to all agents possessing that tag.</p> </li> </ol> </li> <li> <p>Deploy the Lambda function with the AWS CLI. You can do this in two ways:</p> <ul> <li> Deploy the Lambda with .zip file archives.   To deploy a Lambda function as a .zip file archive,<ol> <li>Zip the function file.   <pre><code>zip function.zip &lt;lambda_function_file&gt;.js\n</code></pre></li> <li>Run the following command to deploy the .zip file archive.   <pre><code>aws lambda create-function \\\n--region us-east-1  \\\n--function-name node3 \\\n--zip-file fileb://function.zip \\\n--role &lt;lambda_execution_role_arn&gt; \\\n--handler index.handler \\\n--runtime nodejs14.x --timeout 10 --memory-size 512 \\\n--layers &lt;LayerVersionArn&gt; \\\n--environment Variables=\"{LIGHTRUN_SECRET=&lt;LIGHTRUN_KEY&gt;}\"\n</code></pre></li> </ol> <p>Important</p> <p>Update the command with the following values:</p> <ul> <li><code>--function-name</code> - Lambda function name.</li> <li><code>--role</code> - Lambda execution role ARN. (Follow the instructions here to create a Lambda execution role for your Lambda function.)</li> <li><code>--runtime</code> - Preferred Node.js runtime environment.</li> <li><code>--layers</code> - Lambda layer Version ARN.</li> <li><code>--environment Variables</code> -  Lightrun secret Keys.</li> </ul> <p>You should get a response similar to the following if your deployment was successful.</p> <pre><code>{   \"FunctionName\": \"node3\",\n\"FunctionArn\": \"arn:aws:lambda:us-east-1:&lt;iam-user&gt;:function:node3\",\n\"Runtime\": \"nodejs14.x\",\n\"Role\": \"arn:aws:iam::&lt;iam-user&gt;:role/lmb\",\n\"Handler\": \"index.handler\",\n\"CodeSize\": 494,\n\"Description\": \"\",\n\"Timeout\": 100,\n\"MemorySize\": 512,\n\"LastModified\": \"2022-06-20T08:22:44.022+0000\",\n\"CodeSha256\": \"d4hbbWI60FaCd0SfMLTCv+X2f33kM8sTzsC7lYp6LTc=\",\n\"Version\": \"$LATEST\",\n\"Environment\": {\n\"Variables\": {\n\"LIGHTRUN_SECRET\": &lt;LIGHTRUN_KEY&gt;\n}\n},\n\"TracingConfig\": {\n\"Mode\": \"PassThrough\"\n},\n\"RevisionId\": \"f97c70b1-7ce7-48e6-92f5-3ba159cb2cf6\",\n\"Layers\": [\n{\n\"Arn\": \"arn:aws:lambda:us-east-1:&lt;iam-user&gt;:layer:Lightrun_Package_node1:1\",\n\"CodeSize\": 4430628\n}\n],\n\"State\": \"Pending\",\n\"StateReason\": \"The function is being created.\",\n\"StateReasonCode\": \"Creating\",\n\"PackageType\": \"Zip\",\n\"Architectures\": [\n\"x86_64\"\n],\n\"EphemeralStorage\": {\n\"Size\": 512\n}\n</code></pre> </li> </ul> <ul> <li> Deploy the Lambda file as an AWS SAM application. <p>Prerequisites</p> <p>The following instructions assume that you have the AWS SAM CLI and Docker installed on your local machine.</p> <ul> <li>Follow the instructions here to install the AWS SAM CLI on your local machine. </li> <li>Follow the instructions here to setup Docker on your local machine.</li> </ul> <p>To deploy the Lambda function by packaging it as an AWS SAM template.</p> <ol> <li>Add a <code>template.yaml</code> file to the <code>node_lambda_function</code> folder.   <pre><code>touch template.yaml\n</code></pre></li> <li>Add the following yaml to the <code>template.yaml</code> file.   <pre><code>AWSTemplateFormatVersion : '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nResources:\nNodeFunction:\nType: AWS::Serverless::Function\nProperties:\nHandler: index.handler\nRuntime: nodejs14.x\nRole: &lt;lambda_execution_role_arn&gt;\nLayers:\n- &lt;LayerVersionArn&gt;\nEnvironment:\nVariables:\nLIGHTRUN_SECRET: &lt;LIGHTRUN_KEY&gt;\n</code></pre></li> <li>Run the following command to build the SAM template.   <pre><code>sam build\n</code></pre></li> <li>Run the following command to deploy the SAM template.   <pre><code>sam deploy --guided\n</code></pre></li> </ol> <p>Important</p> <p>Update the <code>template.yaml</code> file with the following values.</p> <ul> <li><code>NodeFunction</code> - change to your preferred Lambda function\u2019s name.</li> <li><code>Role</code> - Lambda execution role ARN. (Follow the instructions here to create a Lambda execution role for your Lambda function.)</li> <li><code>Runtime</code> - Preferred Node.js runtime environment.</li> <li><code>Layers</code> - Lambda layer Version ARN </li> <li><code>Environment/Variables</code> -  Lightrun secret Keys</li> </ul> </li> </ul> </li> </ol>"},{"location":"lambda/nodejs-layers/#verify-things-are-working","title":"Verify things are working","text":"<p>To verify that a Lightrun agent has been installed added your Lambda function correctly,</p> <ol> <li>Verify that a new agent with your Lambda function name is created anytime your Lambda function runs and dies immediately your Lambda function stops.</li> <li>Verify that a tag with your Lambda function name has been added to your Lightrun account.</li> </ol>"},{"location":"lambda/python-layers/","title":"Introduction","text":"<p>To take advantage of Lightrun\u2019s functionality in your AWS Lambda function, you must deploy Lightrun\u2019s agent library with your project. One of the ways to import the additional code (frameworks, SDKs, libraries, and more) into a Lambda function is to bundle the function with an AWS Lambda Layer.</p> <p>In this tutorial, we will learn how to package the Lightrun Python agent into a Lambda layer. We will also demonstrate how to attach the Lambda layer to your AWS Lambda function in order to be able to import and use Lightrun in your project. </p> <p>Note</p> <p>These instructions are valid only for AWS Lambda functions deployed as a .zip file archive.</p>"},{"location":"lambda/python-layers/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes that you have:</p> <ul> <li>Created your Lightrun account.</li> <li>Created an AWS account.</li> <li>Installed and set up Docker on your local machine.</li> </ul>"},{"location":"lambda/python-layers/#create-a-lambda-layer","title":"Create a Lambda layer","text":"<p>AWS Lambda Layer is a .zip archive containing libraries, configuration files, dependencies, etc., that you can import at runtime into your Lambda function. To create an AWS Lambda layer for the Lightrun Python agent, we must compile the Lightrun Python agent into a .zip archive and then upload the .zip file archive to AWS via the AWS console or with the AWS CLI. </p>"},{"location":"lambda/python-layers/#compile-the-lightrun-python-agent-into-a-zip-archive","title":"Compile the Lightrun Python agent into a .zip archive.","text":"<p>The first step when creating an AWS Lambda layer is to bundle the layer\u2019s content into a .zip file archive. To set up a .zip file for the Lightrun Python agent, first, create a new directory that we will use to store the dependencies that will go into the Lambda layer.</p> <pre><code>mkdir python_lambda_layer\ncd python_lambda_layer\n</code></pre> <p>Then add a requirements.txt file with the following content to the folder.</p> <pre><code>lightrun\n</code></pre> <p>To use the Lightrun Python agent in our AWS lambda function, we must deploy an agent version that is compatible with the AWS Lambda execution environments. AWS provides two computer processors (arm64 and x86_64) and four Python runtimes(Python 3.9, Python 3.8, Python 3.7, and Python 3.6) for running AWS Lambda functions.</p> <p>In this tutorial, we will install a Python agent with the Lambci docker-lambda image. Lambci docker-lambda provides a sandbox environment replicating the AWS Lambda execution environment almost identically. With the provided sandbox environment, we can compile a Python agent that is compatible with the AWS architecture and runtimes.</p> <p>Run the following command to install the Lightrun Python agent in the <code>python_lambda_layer</code> folder with the Lambci docker-lambda image. For this tutorial, we will be using x86_64/python3.8 as our preferred Lambda architechture and runtime environment.</p> <pre><code>docker run --rm -v $(pwd):/foo -w /foo lambci/lambda:build-python3.8 \\\npip install -r requirements.txt -t python/lib/python3.8/site-packages/; exit\n</code></pre> <p>Note</p> <p>Installed dependencies in a Python Lambda layer must be stored in a <code>python/{our libraries}</code> or <code>python/lib/{python-version}/site-packages/{our libraries}</code> file path for the dependencies to be discovered by a Python Lambda function. You can learn more about Lambda layer paths here. </p> <p>A <code>python/lib/python3.8/site-packages/&lt;lightrun python agent&gt;</code> will be added to the <code>python_lambda_layer</code> folder if the installation was successful. </p> <p>Package the installed dependencies into a .zip file with the following command. </p> <pre><code>zip -r layers.zip python &gt; /dev/null\n</code></pre> <p>A <code>layers.zip</code> file will be added to the <code>python_lambda_layer</code> folder.</p>"},{"location":"lambda/python-layers/#create-a-lambda-layer-for-the-lightrun-python-agent","title":"Create a Lambda layer for the Lightrun Python agent","text":"<p>After compiling the Lightrun Python agent into a .zip file archive. The next step will be to create our AWS Lambda layer. We can deploy the .zip file to AWS in two ways:</p> <ul> <li>Create a Lambda layer with the AWS console.</li> <li>Create a Lambda layer with the AWS CLI.</li> </ul>"},{"location":"lambda/python-layers/#create-a-lambda-layer-from-the-aws-console","title":"Create a Lambda layer from the AWS console","text":"<p>To create an AWS Lambda layer from your AWS console.</p> <ol> <li>Navigate to the AWS Lambda console, and open the Layers page of the console.</li> <li>Click Create Layer.</li> <li>Specify a name for the new Lambda Layer.</li> <li>Upload the <code>layers.zip</code> file.</li> <li>Select the compatible architecture and runtime for your .zip file (we installed our dependencies with the x86_64 architecture and python3.8 as the preferred runtime environment).</li> <li>Click Create.<p>The new Lambda Layer is now available to your Python Lambda functions.</p> </li> </ol>"},{"location":"lambda/python-layers/#create-a-lambda-layer-with-the-aws-cli","title":"Create a Lambda layer with the AWS CLI","text":"<p>Note</p> <p>The following instructions assume that you have the AWS CLI installed on your local machine. Follow the instructions here to install and set up the AWS CLI on your local machine if you haven\u2019t already installed it</p> <p>Create the AWS Lambda layer with the AWS CLI with the following command. <pre><code>aws lambda publish-layer-version --layer-name 'Lightrun_Package_python' --compatible-runtimes 'python3.8' --zip-file fileb://layers.zip --region us-east-1\n</code></pre></p> <p>Change <code>'Lightrun_Package_python'</code> to your preferred layer name, change <code>us-east-1</code> to your preferred region, and <code>'python3.8'</code> to your desired Python runtime environment. </p> <p>If the deployment was successful, you should get a similar response to this in your terminal.</p> <pre><code>{\n\"Content\": {\n\"Location\": \"&lt;aws_location_key&gt;\",\n\"CodeSha256\": \"hqfw2fMHXzqnYZ+S+zc1ZgKZhsnJzijxtbhDIqVVm9U=\",\n\"CodeSize\": 7911221\n},\n\"LayerArn\": \"&lt;layers_arn&gt;\",\n\"LayerVersionArn\": \"&lt;layers_version_arn&gt;\",\n\"Description\": \"\",\n\"CreatedDate\": \"2022-06-18T07:44:12.702+0000\",\n\"Version\": 4,\n\"CompatibleRuntimes\": [\n\"python3.8\"\n]\n}\n</code></pre> <p>Important</p> <p>Note the <code>LayerVersionArn</code> key that I highlighted above. We will use the key to bundle the Python agent Lambda layer into our Lambda functions if we want to deploy our Lambda function directly from the AWS CLI.</p>"},{"location":"lambda/python-layers/#share-the-lambda-layer-to-your-application","title":"Share the Lambda layer to your application","text":"<p>Now that we have created a Lambda layer for the Lightrun Python agent, the next step will be to add the Lambda layer to our Python Lambda function to be able to debug the Lambda function with Lightrun. We can do this in two ways.</p> <ul> <li>Add the Lambda layer to a Lambda function from the AWS Console.</li> <li>Add the Lambda layer to a Lambda function with the AWS CLI.</li> </ul>"},{"location":"lambda/python-layers/#add-the-python-agent-lambda-layer-to-your-lambda-function-from-the-aws-console","title":"Add the Python agent Lambda layer to your Lambda function from the AWS Console","text":"<p>If you have already deployed your Python function to AWS, you can attach the Lambda layer to the Lambda function from your AWS Console. First open the Functions page in your AWS Lambda console, and select the relevant Lambda function.</p> <p>Click Configurations, select Environment variables, and click Edit to add a new environment variable.  Set the variable names to <code>LIGHTRUN_KEY</code> and  <code>LIGHTRUN_SERVER_URL</code>.</p> <p></p> <p>Note</p> <p>You can get your <code>LIGHTRUN_KEY</code> and <code>LIGHTRUN_SERVER_URL</code> from your Lightrun Management portal.</p> <p></p> <p>Then, add the following code samples to the function Code source.</p> <pre><code>import os\n\nLIGHTRUN_KEY = os.environ['LIGHTRUN_KEY']\nLIGHTRUN_SERVER = os.environ['LIGHTRUN_SERVER_URL']\n\ndef import_lightrun():\n    try:\n        import lightrun\n        lightrun.enable(com_lightrun_server=LIGHTRUN_SERVER, company_key=LIGHTRUN_KEY, lightrun_wait_for_init=True, lightrun_init_wait_time_ms=10000,  metadata_registration_tags='[{\"name\": \"&lt;lambda-function-name&gt;\"}]')\n    except ImportError as e:\n        print(\"Error importing Lightrun: \", e)\n</code></pre> <p>Note</p> <p>Change <code>&lt;lambda-function-name&gt;</code> to your Lambda functions name.</p> <p>Important</p> <p>AWS Lambda functions are event-driven short-running programs with a maximum execution time of 15 minutes. To debug AWS Lamda functions with the Lightrun Python agent:</p> <ol> <li> <p>Specify <code>lightrun_wait_for_init=True</code> and <code>lightrun_init_wait_time_ms=10000</code> in the Python agent configuration. These two configuration parameters will ensure that the Lightrun agent starts up fast enough to work with the short-running AWS Lambda functions and also apply a wait time of about 10000 milliseconds before fetching Lightrun actions from the server.</p> </li> <li> <p>Apply Metadata tags that include the name of your Lambda function - By default, a new Lightrun agent is created whenever the Lambda function is invoked. By adding our function\u2019s name as a metadata tag, we can attach Lightrun actions to agents created whenever the Lambda function is invoked, even before the Lambda function is invoked. This is because an action bound to a metadata tag is implicitly attached to all agents possessing that tag.</p> </li> </ol> <p>Call the <code>import_lightrun()</code> function in your lambda_handler function, and click Deploy to update the code source. </p> <pre><code>def lambda_handler(event, context):\n    import_lightrun()\n</code></pre> <p>Finally, to attach the Lightrun Python agent layer to the Lambda function, scroll down to the Layers section, and select Add a layer. Click Custom layers and select the appropriate layer from the drop-down list. Pick a version and click Add to attach the layer to your Lambda function.</p> <p></p> <p>When you invoke the Lambda function, a Lightrun agent will be added to the Lambda function. You can confirm if the agent was added by checking your Lightrun Management portal. </p> <p></p>"},{"location":"lambda/python-layers/#add-the-python-agent-lambda-layer-to-your-application-from-the-aws-cli","title":"Add the Python agent Lambda layer to your application from the AWS CLI","text":"<p>Note</p> <ul> <li>The following instructions assume that you have the AWS CLI installed on your local machine. Follow the instructions here to install and set up the AWS CLI on your local machine if you haven\u2019t already installed it</li> <li>Ensure that you have configured all the permissions required to run an AWS Lambda function and created a Lamda execution role for the Lambda function. Learn more about the permissions needed to deploy a Lambda function here. Follow the instructions here to create a Lambda execution role for your Lambda function.</li> </ul> <p>If you haven\u2019t deployed your Lambda function to AWS, you can easily share the Lambda layer to your application during deployment with the AWS CLI. To demonstrate how to add the created Lambda layer to a Python function deployed with the AWS CLI, we will deploy a simple demo application as an AWS Lambda function with the Lambda layer added to it. </p> <p>To create the demo application, create a folder for the application.</p> <pre><code>mkdir python_lambda_function\ncd python_lambda_function\n</code></pre> <p>Add an <code>index.py</code> file to the folder.</p> <pre><code>touch index.py\n</code></pre> <p>Add the following code samples to the <code>index.py</code> file.</p> <pre><code>import os\n\nLIGHTRUN_KEY = os.environ['LIGHTRUN_KEY']\nLIGHTRUN_SERVER = os.environ['LIGHTRUN_SERVER_URL']\n\ndef import_lightrun():\n    try:\n        import lightrun\n        lightrun.enable(com_lightrun_server=LIGHTRUN_SERVER, company_key=LIGHTRUN_KEY, lightrun_wait_for_init=True, lightrun_init_wait_time_ms=10000,  metadata_registration_tags='[{\"name\": \"&lt;lambda-function-name&gt;\"}]')\n    except ImportError as e:\n        print(\"Error importing Lightrun: \", e)\n\n\ndef start_fibonacci(n):\n    if n in {0, 1}:\n        return n\n    return start_fibonacci(n - 1) + start_fibonacci(n - 2)\n\ndef lambda_handler(event, context):\n    import_lightrun()\n    num = event['num']\n    print(\"Calculating Fibonacci of {}...\".format(num))\n    return start_fibonacci(num)\n</code></pre> <p>Note</p> <p>Change <code>&lt;lambda-function-name&gt;</code> to your Lambda functions name.</p> <p>Important</p> <p>AWS Lambda functions are event-driven short-running programs with a maximum execution time of 15 minutes. To debug AWS Lamda functions with the Lightrun Python agent:</p> <ol> <li> <p>Specify <code>lightrun_wait_for_init=True</code> and <code>lightrun_init_wait_time_ms=10000</code> in the Python agent configuration. These two configuration parameters will ensure that the Lightrun agent starts up fast enough to work with the short-running AWS Lambda functions and also apply a wait time of about 10000 milliseconds before fetching Lightrun actions from the server.</p> </li> <li> <p>Apply Metadata tags that include the name of your Lambda function - By default, a new Lightrun agent is created whenever the Lambda function is invoked. By adding our function\u2019s name as a metadata tag, we can attach Lightrun actions to agents created whenever the Lambda function is invoked, even before the Lambda function is invoked. This is because an action bound to a metadata tag is implicitly attached to all agents possessing that tag.</p> </li> </ol> <p>Finally, deploy the <code>index.py</code> file as an AWS Lambda function. You can do this in two ways.</p> <ul> <li>Deploy the <code>index.py</code> file with .zip file archives.</li> <li>Deploy the <code>index.py</code> file as an AWS SAM application.</li> </ul>"},{"location":"lambda/python-layers/#deploy-the-indexpy-file-as-a-zip-file-archive","title":"Deploy the <code>index.py</code> file as a .zip file archive","text":"<p>First, to deploy the <code>index.py</code> file as a .zip file archive, zip the <code>index.py</code> file.</p> <pre><code>zip function.zip index.py\n</code></pre> <p>Then, deploy the function with the following command.</p> <pre><code>aws lambda create-function \\\n--region us-east-1  \\\n--function-name pythonapp \\\n--zip-file fileb://function.zip \\\n--role &lt;lambda_execution_role_arn&gt; \\\n--handler index.lambda_handler \\\n--runtime python3.8 --timeout 100 --memory-size 512 \\\n--layers &lt;LayerVersionArn&gt; \\\n--environment Variables=\"{LIGHTRUN_KEY=&lt;key&gt;, LIGHTRUN_SERVER_URL=&lt;url&gt;}\"\n</code></pre> <p>Update the command with the following values:</p> <ul> <li><code>--function-name</code> - Lambda function name.</li> <li><code>--role</code> - Lambda execution role ARN. (Follow the instructions here to create a Lambda execution role for your Lambda function.)</li> <li><code>--runtime</code> - Preferred Python runtime environment.</li> <li><code>--layers</code> - Lambda layer Version ARN </li> <li><code>--environment Variables</code> -  Lightrun secret Keys.</li> </ul> <p>Note</p> <p>You can get your <code>LIGHTRUN_KEY</code> and <code>LIGHTRUN_SERVER_URL</code> from your Lightrun Management portal.</p> <p></p> <p>If your deployment was successful, you should get a response similar to this. </p> <pre><code>{\n\"FunctionName\": \"pythonapp\",\n\"FunctionArn\": \"arn:aws:lambda:us-east-1:&lt;&gt;:function:pythonapp\",\n\"Runtime\": \"python3.8\",\n\"Role\": \"&lt;lambda_execution_role&gt;\",\n\"Handler\": \"index.lambda_handler\",\n\"CodeSize\": 528,\n\"Description\": \"\",\n\"Timeout\": 100,\n\"MemorySize\": 512,\n\"LastModified\": \"2022-06-18T17:08:16.175+0000\",\n\"CodeSha256\": \"oG5O0fLVyFDuygEXXcwG7AUkqmROCCMOJYAkPuWzzww=\",\n\"Version\": \"$LATEST\",\n\"Environment\": {\n\"Variables\": {\n\"LIGHTRUN_KEY\": &lt;key&gt;,\n\"LIGHTRUN_SERVER_URL\": &lt;url&gt;\n}\n},\n\"TracingConfig\": {\n\"Mode\": \"PassThrough\"\n},\n\"RevisionId\": \"a0c151e7-ef8a-42aa-8574-813dc0e32f1d\",\n\"Layers\": [\n{\n\"Arn\": \"&lt;layer_version_arn&gt;\",\n\"CodeSize\": 7911221\n}\n],\n\"State\": \"Pending\",\n\"StateReason\": \"The function is being created.\",\n\"StateReasonCode\": \"Creating\",\n\"PackageType\": \"Zip\",\n\"Architectures\": [\n\"x86_64\"\n],\n\"EphemeralStorage\": {\n\"Size\": 512\n}\n}\n</code></pre>"},{"location":"lambda/python-layers/#deploy-the-indexpy-file-as-an-aws-sam-application","title":"Deploy the <code>index.py</code> file as an AWS SAM application","text":"<p>Alternatively, you can deploy the index.py file by packaging it as an AWS SAM template. </p> <p>Prerequisites</p> <p>The following instructions assume that you have the AWS SAM CLI and Docker installed on your local machine. - Follow the instructions here to install the AWS SAM CLI on your local machine.  - Follow the instructions here to setup Docker on your local machine.</p> <p>Add a <code>template.yaml</code> file to the <code>python_lambda_function</code> folder.</p> <pre><code>touch template.yaml\n</code></pre> <p>Add the following yaml to the <code>template.yaml</code> file.</p> <pre><code>AWSTemplateFormatVersion : '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nResources:\nPythonApp:\nType: AWS::Serverless::Function\nProperties:\nHandler: index.lambda_handler\nRuntime: python3.8\nRole: &lt;lambda_execution_role_arn&gt;\nLayers:\n- &lt;LayerVersionArn&gt;\nEnvironment:\nVariables:\nLIGHTRUN_SERVER_URL: &lt;URL&gt;\nLIGHTRUN_KEY: &lt;key&gt;\n</code></pre> <p>Update the YAML file with the following values. - <code>PythonApp</code> - change to your preferred Lambda function\u2019s name. - <code>Role</code> - Lambda execution role ARN. (Follow the instructions here to create a Lambda execution role for your Lambda function.) - <code>Runtime</code> - Preferred Python runtime environment. - <code>Layers</code> - Lambda layer Version ARN  - <code>Environment/Variables</code> -  Lightrun secret Keys.</p> <p>Note</p> <p>You can get your <code>LIGHTRUN_KEY</code> and <code>LIGHTRUN_SERVER_URL</code> from your Lightrun Management portal.</p> <p></p> <p>Run the following command to build the SAM template.</p> <pre><code>sam build\n</code></pre> <p>Run the following command to deploy the SAM template.</p> <pre><code>sam deploy --guided\n</code></pre> <p>And now you've added a Lightrun agent to your Python Lambda function! Install our plugin to get started adding Lightrun Actions to your application.</p>"},{"location":"logoptimizer/overview/","title":"Lightrun LogOptimizer","text":"<p>Lightrun LogOptimizer is an automated log-optimization and logging cost-reduction solution that enables developers to scan their source code for logging quality issues directly within the IDE. It seamlessly integrates into your IDE as part of the Lightrun JetBrains plugin, and is compatible with the JetBrains suite of IDEs, supporting Java, Python, Node.js, and C# projects. You can find it in the left navigation bar and is accessible from the LogOptimizer icon.</p> <p>As a developer, LogOptimizer offers on-demand visibility into non-essential logs within your source code, reducing noise and overall logging costs. This approach steers FinOps practices towards engineers, aiding the transition from static to dynamic logging. Establish a continuous, optimized process for log integration into your DevOps practice, minimizing noise from over-logging practices like marker logs, or methods with duplicate instruction logs. This ensures cleaner code and eases the identification of valuable information within logs.</p> <p></p> <p>As a best practice, we recommend:</p> <ul> <li>Run LogOptimizer as part of your development process.</li> <li>Identify static, costly, and redundant logs, and remove them from the code.</li> <li>Eliminate legacy unused code lines added historically and left in the code.</li> <li>Stay constantly aware of your logging utilization and associated costs.</li> </ul> <p>To learn more about how Lightrun boosts developer productivity, see Lightrun logoptimizer gets a developer productivity and logging cost reduction boost blog.</p>"},{"location":"logoptimizer/overview/#how-does-logoptimizer-work","title":"How does LogOptimizer work?","text":"<p>In your IDE, once lightrun Plugin is logged in and Docker Desktop is running, activate the LogOptimizer solution, and select a file, directory, or project to be scanned. LogOptimizer scans specific source files or the entire codebase for potential logging issues, flags the suspected logs and displays them in an organized list. Multiple logging quality rules are applied during the scan. The results are grouped by Language (Java, Python, Node.js) and then according to predefined rules. This allows you to prioritize reviewing the results by rule type and focusing first on rules which are more of importance to you. For example, focusing on logs which only contain a static log message.  You can then review the scan, investigate the relevant source code, and decide what to do next. </p> <p>Recommended next actions: </p> <ul> <li>Remove the logging statement in case it does not provide any value.</li> <li>Remove the logging statement and replace it with a dynamic Lightrun log.</li> <li>Update the log message to contain more valuable information.</li> <li>Change the log level to a more appropriate one.</li> </ul>"},{"location":"logoptimizer/overview/#logoptimizer-rules-applied-during-scanning","title":"LogOptimizer rules applied during scanning","text":"<p>During the scan process, LogOptimizer examines the logs associated with your selected files according to the following built-in rule categories and provides results based on these main categories.</p>"},{"location":"logoptimizer/overview/#static-log-messages","title":"Static log messages","text":"<p>Static log messages are missing context and in most cases do not provide enough value. </p> <p>Tip</p> <p>Add more context to the logging statement or replace it with a Lightrun action.</p>"},{"location":"logoptimizer/overview/#marker-logs","title":"Marker logs","text":"<p>Marker logs are typically used to indicate that a specific point in the code has been reached without providing additional information. While Marker logs are sometimes necessary; they can clutter your logs, hiding the more important information. Marker logs should be removed and replaced with a Lightrun dynamic log that is only logged whenever there is important data, like a specific user identifier.</p> <p>An example of a marker log:</p> <pre><code>public String foo(int bar) {\nlogger.info(\"Starting method foo\");\n...\n\nlogger.info(\"Querying user {} profile details\", user.getId());\n\n...\nlogger.info(\"Exiting method foo\");\nreturn value;\n}\n</code></pre> <p>Tip</p> <p>Remove this logging statement or replace it with a dynamic Lightrun log.</p>"},{"location":"logoptimizer/overview/#state-reflecting-logs","title":"State reflecting logs","text":"<p>State reflecting logs are used to expose variables' values that might be interesting under certain circumstances. For example, state reflecting logs can be used to expose method input parameters, return values of method calls, data queried from a database, etc.</p> <p>State reflecting logs are only relevant when the values returned are not what you expect. Most of the time, the values returned by state reflecting logs are expected; hence not useful. These expected log statements can be very wasteful as data returned from variables or databases can contain lots of information.</p> <p>An example of a State reflecting log:</p> <pre><code>def countries(language);\n    logging.info(f\"Processing countries for language {language}\")\n\n    with open('countries.json', encoding='utf-8') as data_file:\n        countries = json.load(data_file)\n\n    logging.info(f\"Read {len(countries)} countries from the JSON file.\")\n</code></pre> <p>Tip</p> <p>Replace State reflecting logs with a Lightrun snapshot which is only activated when the variable value is different from what you expect. Using a snapshot has additional value as it allows you to easily view more complex variable types such as objects, arrays, and hashes.</p>"},{"location":"logoptimizer/overview/#repeated-logging-of-the-same-variable","title":"Repeated logging of the same variable","text":"<p>Multiple instructions logging the value of the same variable. </p> <p>An example of logging the value of the same variable multiple times:</p> <pre><code>private boolean authorize(User user, Action action) {\nlogger.info(\"User {} is trying to perform action {}\", user.getId(), action.getName());\n\nif (isAdmin(user)) {\nlogger.info(\"User {} has super powers - can perform action {}\", user.getId(), action.getName());\nreturn true;\n}\n\n...\n\nlogger.info(\"User {} not allowed to perform action {}\", user.getId(), action.getName());\n}\n</code></pre> <p>Tip</p> <p>Merge them into a single logging statement or replacing with a Lightrun action.</p>"},{"location":"logoptimizer/overview/#logging-the-value-of-input-parameters","title":"Logging the value of input parameters","text":"<p>This might be a debugging message with a wrong logging level. </p> <p>Tip</p> <p>Consider changing the log level to a more appropriate one.</p>"},{"location":"logoptimizer/overview/#logging-method-return-value","title":"Logging method return value","text":"<p>This might be a debugging message with a wrong logging level. </p> <p>Tip</p> <p>Change the log level to a more appropriate one.</p>"},{"location":"logoptimizer/overview/#get-started","title":"Get Started","text":"<ul> <li>Scan your code using Lightrun LogOptimizer</li> </ul>"},{"location":"logoptimizer/scan-code-using-logoptimizer/","title":"Scan your code using Lightrun LogOptimizer","text":"<p>Lightrun LogOptimizer is an automated log optimization solution that scans your code, providing information about potential logging issues along with recommendations on how to address them. For more information, see Lightrun LogOptimizer Overview.</p>"},{"location":"logoptimizer/scan-code-using-logoptimizer/#prerequisites","title":"Prerequisites","text":"<ul> <li>The LogOptimizer is available in the Lightrun JetBrains plugin and is compatible with the JetBrains suite of IDEs.</li> <li>Supported for Java, Python, Node.js, and C# projects. </li> <li>Connection to your Lightrun server is required.</li> <li>Docker Desktop or Docker Engine must be running on your local machine.</li> </ul>"},{"location":"logoptimizer/scan-code-using-logoptimizer/#scan-your-code-for-redundant-logs","title":"Scan your code for redundant logs","text":"<p>You can scan an individual file, directory, or an entire project. In the following procedure, we will focus on scanning an entire project.</p> <ol> <li>Click the Project tab on the top left-hand side of your JetBrains IDE to open the JetBrains Project tool window for the required project.</li> <li>Right-click on the project name to open the JetBrains context menu.</li> <li> <p>Click Log Optimizer in the JetBrains context menu.</p> <p></p> </li> <li> <p>Click Scan This Project to initiate the LogOptimizer scan.</p> <p>The LogOptimizer will begin scanning and display all output in the Lightrun LogOptimizer tool window. Note that the first time you run the LogOptimizer scan, it is expected to be longer as it pulls the LogOptimizer Docker image from Docker Hub.</p> </li> </ol> <p>After completing the scan, the results will be displayed in the Lightrun LogOptimizer tool window, providing details on the number of files scanned, the duration of the scan, and the number of logs found that meet the predefined rules.</p>"},{"location":"logoptimizer/scan-code-using-logoptimizer/#analyze-and-delete-redundant-logs-from-your-code","title":"Analyze and delete redundant logs from your code","text":"<p>The Lightrun LogOptimizer tool window displays the results after completing the scanning process. </p> <p></p> <p>The table describes the information included in the LogOptimizer tool window.</p> Name Description Rule The results are grouped according to predefined rules, such as Static log messages, Marker logs, State reflecting logs, Repeated logging of the same variable, Logging the value of input parameters, and Logging method return values. For more information, see Predefined LogOptimizer Rules Applied During Scanning. Findings The number of occurrences of logs that meet the selected rule. Files The file name containing the logs. Hovering over the file displays the full path to the file. Line The line in the code where the log is located. Log Name The name of the detected log. Go To Log file and Delete Log File icons Allows you to go to the line and to delete the relevant log in a dedicated window. See procedure below. Details General information regarding the scan, showing the number of files scanned, the time it took to scan, and the total findings."},{"location":"logoptimizer/scan-code-using-logoptimizer/#delete-redundant-logs-from-your-code","title":"Delete redundant logs from your code","text":"<ol> <li> <p>In the Files column, select a file from the rule colum, then select log, and click on the navigation icon.</p> <p></p> </li> <li> <p>In the LogOptimizer window, click the Delete Log file icon.</p> <p>The code opens in a side-by-side comparison view and highlights the relevant row.</p> <p></p> </li> <li> <p>Click Delete Log.</p> <p>The log is permanently removed from the code.</p> <p>You can run this process repetatively and see how your log consumption has been reduced.</p> </li> </ol>"},{"location":"node/agent-configuration/","title":"Customize the Lightrun Node.js agent","text":"<p>According to the Lightrun actions you specify, the agent dynamically inserts logs and snapshots in the target environment. The agent's behavior when performing these tasks is governed by a set of user-configurable properties.</p>"},{"location":"node/agent-configuration/#agent-properties","title":"Agent properties","text":"<p>You can specify the agent properties within the code, by using environment variables, or using the config file.</p>"},{"location":"node/agent-configuration/#specifying-agent-properties-within-the-code","title":"Specifying agent properties within the code","text":"<p>You specify agent properties in the <code>start</code> method of your application file as JSON comma-separated parameter-value pairs. For example:</p> <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\npropertyName1: 'value' ,\npropertyName2: 'value',\n.....\n});\n</code></pre> <p>Optional metadata properties can be imported from a metadata file referenced in the <code>start</code> method. For example:</p> <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nmetadata: {\nfilename: './agent.metadata.json'\n}\n});\n</code></pre> <p>For more information about metadata, see the metadata and tagging article.</p> <p>When specified in the <code>start</code> method, the agent configuration persists between application runs.</p>"},{"location":"node/agent-configuration/#specifying-agent-properties-using-environment-variables","title":"Specifying agent properties using environment variables","text":"<p>An alternative method for configuring agent properties is to enter them as environment variables when running the agent from the command line. A disadvantage of this method is that agent properties do not persist between runs and are required to be input at the command line each time the application is run.</p> <p>For example, you can configure the Lightrun secret of your application by setting the <code>&lt;LIGHTRUN_SECRET&gt;</code> environment variable.</p> <p>See the table below for all supported environment variables.</p>"},{"location":"node/agent-configuration/#specifying-agent-properties-using-a-config-file","title":"Specifying agent properties using a config file","text":"<p>You can also specify the agent properties using an agent config file <code>agent.config</code>, specify the path to the config file using <code>agentConfigFile</code> parameter or <code>LIGHTRUN_AGENT_CONFIG</code> environment parameter.</p> <p>For example:</p> <pre><code>require('lightrun').start({\nagentConfigFile: '&lt;PATH-TO-CONFIG&gt;'\n});\n</code></pre>"},{"location":"node/agent-configuration/#order-of-precedence","title":"Order of precedence","text":"<p>When an application is run with a Lightrun agent, properties are defined in the following order of precedence:</p> <ol> <li>Environment variables</li> <li>Start configuration</li> <li>Default configuration</li> </ol> <p>Important</p> <p>Whenever changing agent configurations, save the changes and restart the application to apply the new configuration.</p>"},{"location":"node/agent-configuration/#configuration-properties-supported-by-the-nodejs-agent","title":"Configuration properties supported by the Node.js agent","text":"<p>The following table lists agent configuration properties that can be configured either in the application's <code>start</code> method, or through environment variables when available.</p> Property name Environment variable Default value Description <code>lightrunSecret</code> <code>LIGHTRUN_SECRET</code> No default value The company's secret API key, to connect to Lightrun. <code>apiEndpoint</code> <code>LIGHTRUN_API_ENDPOINT</code> <code>app.lightrun.com</code> The endpoint URI, with which the agent communicates <code>noCheckCertificate</code> - false If set to true, the agent will not perform certificate pinning when communicating with the API endpoint. <code>caPath</code> - <code>node_modules/lightrun/build/src/resources/lightrun-self-signed.pem</code> Path to the <code>pem</code> file of the CA signing the server's certificate (useful for self-signed certificates). <code>transmissionBulkMaxSize</code> - 10 The maximum size of updates to transmit in a single batch to the server <code>pinnedCerts</code> - <code>515a630cfd1fb908e30087bcc20b7413ad146b9bf2b23d3aaa72c28e45b24fb2','ee80811b38e7e6c2dc4cc372cbea86bd86b446b012e427f2e19bf094afba5d12</code> List of sha256 certificate public keys for pinning. <code>agentLog</code> - Agent Log table Configuration related to the internal logs of the agent (not to be confused with the dynamic logs the user adds with the help of the agent).Suggested syntax:<code>agentLog: {agentLogTargetDir: '/foo/bar, level: 'info'}</code> <code>metadata</code> - Metadate table Agent metadata (such as tags and display name).Suggested syntax:<code>metadata: { filename: \u2018./agent.metadata.json\u2019 }</code> <code>log</code> - Log table Configuration related to the log action. <code>capture</code> - Capture table Configuration related to the Capture (snapshot) action. <code>quota</code> - Quota table Configuration related to the quotas on the agent's performance. <code>extraPaths</code> - - An array of strings specifying the paths to external files and third-party modules to be scanned for Lightrun actions. For more information, see ExtraPaths. <code>lightrunWaitForInit</code> - false Block the application until the first time breakpoints are fetched from the server. This option is intended for short-running applications like serverless functions, and it ensures that the Lightrun agent has time to communicate with the Lightrun server before the short-running application disconnects. Note - using <code>lightrun_wait_for_init</code> in a cloud environment will likely incur additional costs from the cloud provider due to a longer application runtime. <code>lightrunInitWaitTimeMs</code> - - Timeout in milliseconds for wait if <code>lightrun_wait_for_init</code> is set. <code>redactionEnabled</code> - false Enable PII redaction in dynamic logs from the agent side."},{"location":"node/agent-configuration/#agent-log","title":"Agent log","text":"Property name Environment variable Default value Description <code>agentLogTargetDir</code> <code>AGENT_LOG_TARGET_DIR</code> OS temp folder Sets the target directory for storing agent logs, which defaults to the operating system's temporary folder.From version 1.34, the log filename will be generated automatically according to the format: <code>lightrun_nodejs_agent.&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log</code>. For example: <code>lightrun_nodejs_agent.22840.20240513-153557.1.log</code>. Prior to release 1.33, the parameter was set as<code>logsPath</code> <code>agentLogLevel</code> <code>AGENT_LOG_LEVEL</code> <code>info</code> Minimum log level that is written to the log file. Available levels of severity, from the highest to lowest (case sensitive): <code>debug</code>, <code>info</code>, <code>warn</code>, and <code>error</code>. <code>agentLogMaxFileSizeMb</code> <code>AGENT_LOG_MAX_FILE_SIZE_MB</code> Maximum size in MB that a log file can reach before being rotated. 10 <code>agentLogMaxFileCount</code> <code>AGENT_LOG-MAX_FILE_COUNT</code> Maximum number of rotated log files to keep. Note that old files get deleted when this number of log files is reached. 5 <code>collectCooldownMs</code> - 1000 * 60 The time to wait before resuming logging activity when logging is paused due to CPU throttling in milliseconds. <code>maxLogFileBytes</code> - 1024 * 1024 The maximum volume of log data to send to the server upon log collection request."},{"location":"node/agent-configuration/#metadata","title":"Metadata","text":"Property name Environment variable Default value Description <code>filename</code> <code>LIGHTRUN_METADATA_FILE</code> No default value Path to file containing json with the metadata. <code>registration</code> - {tags: ['Production']} Metadata registration: - <code>tags</code>: array of strings with the tags to register the agent with. Can also be assigned with the Environment variable <code>LIGHTRUN_TAGS</code> that should contain a string of the tags, separated by commas with no spaces.-<code>displayName</code>: the name of the agent that will be displayed by Lightrun."},{"location":"node/agent-configuration/#log","title":"Log","text":"Property name Environment variable Default value Description <code>maxLogsPerSecond</code> - 50 Maximum number of logs to record per second per log action. <code>logDelaySeconds</code> - 1 Number of seconds to wait, before resuming, after the <code>maxLogsPerSecond</code> rate is reached. <code>logger</code> - console Object that implements info(msg), error(msg), warn(msg)."},{"location":"node/agent-configuration/#capture","title":"Capture","text":"Property name Environment variable Default value Description <code>includeNodeModules</code> - false Whether to include details about stack frames belonging to <code>node-core</code>. <code>maxFrames</code> - 20 Maximum number of stack frames for which to capture data in a single snapshot. <code>maxVariableSize</code> - 256 The maximum snapshot variable string size. To retrieve large values, add them as watch expressions to a snapshot. Note: Introduced in version 1.16. <code>maxVariableDepth</code> - 50 Limit the number of nested properties to reduce the overall capture time. Gathered for deeply nested objects. For example a-&gt;b-&gt;c with a value of 2 will only take values of a and b. <code>maxExpandFrames</code> - 4 The maximum number of top frames for which to collect full data for (locals and arguments). Breaking Change: From version 1.38, the default value has been changed from <code>5</code> to <code>4</code>. <code>maxProperties</code> - 20 Number of properties gathered on a captured object. Value of <code>0</code> disables the limit. Breaking Change: From version 1.38, the default value has been changed from <code>10</code> to <code>20</code>. <code>maxWatchProperties</code> - 1024 Limits the number of properties gathered on large objects to reduce the overall capture time. This also applies to objects that are a collection. For example, setting <code>const a = [1,2,3]</code> with <code>maxProperties: 1</code> and <code>maxWatchProperties: 2</code>, will return <code>1</code>,<code>2</code>,  when using a watch expression for <code>a</code>. Note that this is an extended limitation for Watch expressions. <code>maxDataSize</code> - 20000 Total 'size' of data to gather. This is a coarse approximation based on the length of names and values of the properties. Value of 0 disables the limit. <code>maxStringLength</code> - 100 Maximum length of captured strings. Value of 0 disables the limit. <code>maxSnapshotBufferSize</code> - 65653 Maximum allowed total bytes for snapshots. This field cannot be set to <code>0</code>. Note: Introduced in version 1.16. <code>maxWatchlistVariableSize</code> - 32K The maximum size of snapshot variables that were specified via watch expressions. Note: Introduced in version 1.16."},{"location":"node/agent-configuration/#quota","title":"Quota","text":"Property name Environment variable Default value Description <code>maxConditionCost</code> - 1.0 Maximum cost in percentage of CPU consumption of condition evaluation (value between 0.1 and 1.0). <code>maxCPUCost</code> - 1.0 Maximum cost of dynamic logging in percentage of CPU consumption (value between 0.1 and 1.0). <code>maxDynamicLogRate</code> - 30 Maximum rate of dynamic log entries in this process. <code>maxDynamicLogByteRate</code> - 20480 Maximum rate of dynamic log bytes in this process. <code>ignoreQuota</code> - false Determines whether quota need to be ignored or not."},{"location":"node/agent-configuration/#extrapaths","title":"ExtraPaths","text":"<p>The Lightrun Node.js agent does not scan external files and third-party modules, i.e., <code>node_modules</code>, for Lightrun actions by default. To execute Lightrun actions in these files and modules, you have to specify the path to the files/modules using the <code>extra_path</code> parameter in your agent configuration.</p>"},{"location":"node/agent-configuration/#to-specify-extra_paths-with-the-start-method","title":"TO specify <code>extra_paths</code> with the <code>start</code> method.","text":"<p>You can specify the path to the external files/third-party modules in your <code>start</code> method using the <code>extraPath</code>parameter.</p> <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nextraPaths: ['path/to/file']\n});\n</code></pre> <p>Note</p> <p>You can add more than one path to the extraPath parameter. <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nextraPaths: ['path/to/file', 'path/to/module']\n});\n</code></pre></p>"},{"location":"node/agent-configuration/#to-specify-extra_paths-in-your-agentconfig-file","title":"To specify <code>extra_paths</code> in your <code>agent.config</code> file.","text":"<p>You can specify the path to the external files/third-party modules in your <code>agent.config</code> file using the <code>extra_path</code> parameter.</p> <pre><code>extra_paths = path/to/file, path/to/module\n</code></pre> <p>Important</p> <p>When specifying <code>extraPaths</code>, it is better to use the complete path to the <code>file/module</code>. i.e., <code>node_modules/module_name</code> instead of just <code>node_modules</code> to prevent duplicate file errors.</p>"},{"location":"node/agent/","title":"Install the Lightrun Node.js agent","text":"<p>The Lightrun agent is at the core of the Lightrun platform. It's the component that communicates requests for runtime observability to your running code, and gathers and relays the requested data back to the Lightrun Server, and eventually the developer's IDE.</p> <p>Before running the agent, it must be installed on the system where your code to be monitored is running, and its credentials must be declared either inside the application code, as environment variables, or in an <code>agent.config</code> file.</p> <p>Version Support</p> <p>The instructions below apply to Node.js v10 and higher. If you require support for earlier versions, please reach out and let us know!</p> <p>System requirements</p> <p>Please check the Node.js agent system requirements here.</p> <p>Lightrun can be installed both directly and inside of a Docker container. </p>"},{"location":"node/agent/#direct-installation","title":"Direct installation","text":"<ol> <li>Open a terminal and change to the working directory where your project is located.</li> <li>Install the Node agent by entering <code>npm install lightrun</code>.</li> <li> <p>Open your application file (for example, <code>app.js</code>) and add the following code at the beginning of the file.</p> <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nmetadata: {\nfilename: &lt;FULL_PATH_TO_METADATA_FILE&gt;\n}\n});\n</code></pre> <p>Getting Company Details</p> <p>To get your <code>&lt;LIGHTRUN_SECRET&gt;</code> key, log into the Management Portal and inspect the Set Up An Agent section, under Getting Started.</p> <p>Note</p> <p>The <code>metadata</code> block with the <code>filename</code> parameter is optional; the agent runs perfectly well without them. Using metadata nevertheless provides substantial benefits when managing your agents. See here for details, with examples, on constructing the metadata file.</p> </li> <li> <p>Enter the parameter values for <code>lightrunSecret</code> and (optionally) the <code>metadata_file</code>.</p> </li> <li> <p>Save and close the application file.</p> </li> <li> <p>From a terminal, enter the command to run your application (for example, <code>node index.js</code> or <code>npm start</code>).</p> </li> </ol>"},{"location":"node/agent/#alternative-method-providing-agent-credentials-as-environment-variables","title":"Alternative method - Providing agent credentials as environment variables","text":"<p>Note</p> <p>This method works only for Linux and MacOS.</p> <p>Info</p> <p>Although using this method allows you to avoid hard-coding your credentials into the source code, you must enter them in the run command every time your application is launched with the agent.</p> <p>Instructions</p> <ol> <li> <p>Open a terminal and change to the working directory where your project is located.</p> </li> <li> <p>Install the Node agent by entering <code>npm install lightrun</code>.</p> </li> <li> <p>Open your application file (for example, <code>app.js</code>) and add the following code to the beginning of the file:</p> <pre><code> require('lightrun').start();\n</code></pre> </li> <li> <p>Save and close the application file.</p> </li> <li> <p>From a terminal, enter the command to run your application, with the environment variables declared before the <code>node</code> command.</p> <pre><code>LIGHTRUN_SECRET=&lt;LIGHTRUN_SECRET&gt; node --require lightrun/start app.js\n</code></pre> </li> </ol>"},{"location":"node/agent/#running-the-agent-in-typescript-applications","title":"Running the agent in TypeScript applications","text":"<p>Important</p> <p>As part of Lightrun\u2019s commitment to align with industry standards, we strongly advise using the TypeScript Compiler (<code>tsc</code>) and not <code>ts-node</code> in production environments.  This choice not only ensures a more efficient memory footprint but also avoids generating unnecessary type information.</p> <p>It's essential to note that when utilizing Lightrun for TypeScript in a production setting, you must include  sourcemap files on the server where your production software is deployed. This step is crucial for seamless debugging and troubleshooting.</p> <p>Instructions</p> <ol> <li> <p>Insert the following code at the start of your application file (for example, <code>index.ts</code> or <code>app.ts</code>).</p> <pre><code>import * as lightrun from 'lightrun';\n\nlightrun.start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nfilename: &lt;full_path_to_metadata_file&gt;\n});\n</code></pre> <p>Info</p> <p>The <code>filename</code> parameter is optional. See here for details on constructing the metadata file.</p> </li> <li> <p>In the <code>compilerOptions</code> section of  the <code>tsconfig.json</code> file, set the parameter <code>\"sourceMap\"</code> to <code>\"true\"</code>.</p> </li> <li> <p>From a terminal, run the application.</p> <pre><code>node index.js\n</code></pre> </li> </ol> <p>Important</p> <p>Unless you are working within a TypeScript framework, such as Express or Koa, for the above procedure, you must compile the TypeScript application file.</p> <pre><code>tsc index.ts\n</code></pre> <p>Following compilation, another file is created that has the same name as your TypeScript application, but with the <code>.js</code> extension.</p> <p>Tip</p> <p>You can choose to provide the agent's credentials as environment variables, when running your application from the command line, instead of inserting them in the application file, as explained above (note this does not work in MS Windows).</p>"},{"location":"node/agent/#docker-installation","title":"Docker installation","text":"<p>Docker containers are ephemeral.</p> <p>If you were to create a shell into a Docker container (by <code>docker exec -it &lt;container-id&gt;</code>, for example) and add the Lightrun files there, they would disappear the next time the container would spin up due to the ephemeral nature of that container.</p> <p>Instead, we suggest you install Lightrun by adding it to the underlying Docker image directly, i.e. by \"baking\" the agent into the image.</p> <p>This is an example <code>Dockerfile</code> that installs Lightrun with a simple dummy application:</p> <pre><code>FROM node:17.5.0\nRUN npm install lightrun\nCOPY prime_main.js /app/prime_main.js\nCMD [\"node\", \"prime_main.js\"]\n</code></pre> <p>If you prefer passing the credentials via the command line, here's how to do it inside a <code>Dockerfile</code>:</p> <pre><code>FROM node:17.5.0\nRUN npm install lightrun\nCOPY prime_main.js /app/prime_main.js\nCMD [\"LIGHTRUN_SECRET=&lt;LIGHTRUN_SECRET&gt;\", \"node\", \"--require\", \"lightrun/start\", \"prime_main.js\"]\n</code></pre> <p>Important</p> <p>Installing Lightrun in this fashion does not absolve you of the need to <code>require</code> Lightrun in your application. Please make sure to add Lightrun as an <code>require</code> to your application file.</p>"},{"location":"node/agent/#running-the-agent-with-express-or-koa","title":"Running the agent with Express or Koa","text":"<p>If you are using Express or Koa frameworks in your application, refer to the instructions linked below:</p> <ul> <li>Express</li> <li>Koa</li> </ul>"},{"location":"node/metadata-and-tagging/","title":"Manage the Node.js agent metadata and tagging","text":""},{"location":"node/metadata-and-tagging/#overview","title":"Overview","text":"<p>Metadata and tags allow you to locate agents more easily; for instance, agents performing the same type of task or running on the same server, or company site. Tags also allow you to group agents with labels for bulk actions across multiple applications (running on the same server, or even on different servers).</p> <p>Running agents with Node.js allows for two types of metadata to be specified, which can be included in either the metadata file or the application file, or entered as environment variables from the command line.</p> <ul> <li><code>displayName</code> - identifies the application instance (for example, server name, company site)</li> <li><code>tags</code> - groups the agents according to context (for example, staging, production, server, QA)</li> </ul>"},{"location":"node/metadata-and-tagging/#agent-tags","title":"Agent tags","text":"<p>Tags are a powerful feature of the Lightrun agent. Applying tags enables you to group agents together with meaningful labels, typically based on common functionality.</p> <p>For example, you can use tags to identify the location and purpose of each agent: database servers, staging, QA, and so on. You can apply multiple tags to each agent, in any combination. Similarly, adding a single tag to multiple deployments of the same application allows you to add a log action to all of the instances at once.</p> <p>By applying multiple tags, you can bind actions to an agent even before the agent is launched, and you can apply actions to multiple applications regardless of where they are running. Once an action is bound to a tag, it is implicitly added to all agents that possess that tag.</p> <p>Example</p> <ul> <li>Create a tag named Integration.</li> <li>Add that tag to relevant agents where you're running your application for integration testing.</li> <li>Set integration tests to execute with the Integration tag in order to debug an integration test failure.</li> <li>You can now filter all agents in the plugin and display only those with the Integration tag. The output lists all actions you inserted for integration testing across all of your agents.</li> </ul> <p>Out-of-the-box, agents include a single Production tag. You can:</p> <ul> <li>Create and manage tags</li> </ul> <ul> <li>View all tags</li> </ul> <ul> <li>View tags and their details from the CLI</li> </ul>"},{"location":"node/metadata-and-tagging/#managing-tags","title":"Managing tags","text":"<p>Metadata and tags are specified within the code or in the <code>agent.metadata.json</code> file.</p>"},{"location":"node/metadata-and-tagging/#specifying-agent-metadata-and-tags-within-the-code","title":"Specifying agent metadata and tags within the code","text":"<p>The metadata properties can be declared in the <code>start</code> method, as follows.</p> <pre><code>require('lightrun').start({\ncompany: '&lt;COMPANY_NAME&gt;',\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nmetadata: {\nregistration: {\ndisplayName: \"Pilot site\",\ntags: ['Production', 'Main', 'EastUS']\n}\n}\n}\n</code></pre>"},{"location":"node/metadata-and-tagging/#specifying-agent-tags-using-environment-variable","title":"Specifying agent tags using environment variable","text":"<p>You can use the <code>LIGHTRUN_TAGS</code> environment variable to set agent's tags dynamically.</p> <p>For example,</p> <pre><code>LIGHTRUN_TAGS=Production,Main,EastUS\n</code></pre>"},{"location":"node/metadata-and-tagging/#specifying-agent-metadata-and-tags-within-a-json-file","title":"Specifying agent metadata and tags within a JSON file","text":"<ol> <li> <p>From the relevant server where the agent is installed, go to the <code>agent.metadata.json</code> file (see a typical example here) and open it.  </p> </li> <li> <p>Insert the following JSON (replace the dummy parameters and values as required):</p> <pre><code> {\n\"registration\": {\n\"displayName\": \"&lt;DISPLAY_NAME&gt;\",\n\"tags\": [\n{\n\"name\": \"&lt;Tag1&gt;\"\n},\n{\n\"name\": \"&lt;Tag2&gt;\"\n},\n{\n\"name\": \"&lt;Tag3&gt;\"\n}\n]\n}\n}\n</code></pre> </li> <li> <p>Open your application file (for example, <code>app.js</code>).</p> </li> <li> <p>At the top of the file, within the <code>start</code> method, include a reference to the metadata JSON file.</p> <pre><code>require('lightrun').start({\ncompany: '&lt;COMPANY_NAME&gt;',\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nmetadata: {\nfilename: '&lt;FULL_PATH_TO_METADATA_FILE&gt;'\n}\n});\n</code></pre> </li> <li> <p>Restart the application.</p> <p>Important</p> <p>Changes to the <code>agent.metadata.json</code> file do not take effect until the application is restarted.</p> </li> </ol> <p>Alternatively, you can use the environment variable <code>LIGHTRUN_METADATA_FILE</code> to pass the path for the metadata json file.</p>"},{"location":"node/metadata-and-tagging/#example","title":"Example","text":"<p>The following JSON provides to the <code>displayName</code> parameter a value that indicates a pilot site deployment. Tag labels are included for Production, main, and East US.</p> <pre><code>{\n\"registration\": {\n\"displayName\": \"Pilot site\",\n\"tags\": [\n{\n\"name\": \"Production\"\n},\n{\n\"name\": \"Main\"\n},\n{\n\"name\": \"EastUS\"\n}\n]\n}\n}\n</code></pre> <p>Additional metadata configuration examples can be found here.</p>"},{"location":"node/metadata-and-tagging/#viewing-tags","title":"Viewing tags","text":"<p>Tags assigned to agents can be viewed from the Management Portal.</p>"},{"location":"node/metadata-and-tagging/#view","title":"To view tag details from the Management Portal","text":"<p>Log in to your Lightrun account and navigate to Entities-&gt;Tags. The Tags screen appears, similar to the following:</p> <p></p> <p>The following details are displayed:</p> Column Description Name The name of the tag. Actions The list of actions currently attached to this tag. Agents The list of agents to which this tag has been associated."},{"location":"node/system-requirements/","title":"Lightrun Node.js agent system requirements","text":"<p>The following page describes the IDE and operating system requirements for running the Lightrun Node agent.</p>"},{"location":"node/system-requirements/#supported-operating-systems","title":"Supported operating systems","text":"OS Requirements Linux - Node versions 12.0.0 and later - Alpine Linux versions 3.16, 3.17, 3.18, and 3.19- Ubuntu LTS releases versions 20.04, and 22.04. (Linux with GLIBCXX_3.4.19 and later) - CentOS versions 7, 8, and 9 (Linux with GLIBCXX_3.4.19 and later) Windows OS - Node versions 12.0.0 and later - Windows Server versions 2016 (limited), 2019, and 2022 macOS - Node versions 12.0.0 and later  - macOS versions 12.O and higher for Apple Chipset based Macs AWS Lambda - Node versions 12.0.0 and later"},{"location":"node/system-requirements/#lightrun-ide-plugins","title":"Lightrun IDE Plugins","text":"<ul> <li>VSCode (Versions 1.72 and later)</li> <li>IntelliJ IDEA, WebStorm (Versions 2022.3.0 and later)</li> <li>VSCode.dev</li> <li><code>code-server</code></li> </ul>"},{"location":"node/frameworks/express/","title":"Express","text":""},{"location":"node/frameworks/express/#lightrun-for-express","title":"Lightrun for Express","text":"<p>To use Lightrun with a Express application:</p> <ol> <li> <p>In your project's folder, install the node agent by running <code>npm install lightrun</code>.</p> </li> <li> <p>Import Lightrun at the start of your application file (for example,  <code>app.js</code>) by adding the following code:</p> <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;'\n});\n</code></pre> </li> <li> <p>Run the application as you normally would; for example, <code>node index.js</code> or <code>npm start</code>.</p> </li> </ol> <p>Getting Company Details</p> <p>To get your <code>&lt;LIGHTRUN_SECRET&gt;</code> key, log into the Management Portal and inspect the Set Up An Agent section, under Getting Started.</p>"},{"location":"node/frameworks/express/#running-the-agent-in-typescript-applications","title":"Running the agent in TypeScript applications","text":"<p>Important</p> <p>As part of Lightrun\u2019s commitment to align with industry standards, we strongly advise using the TypeScript Compiler (<code>tsc</code>) and not <code>ts-node</code> in production environments.  This choice not only ensures a more efficient memory footprint but also avoids generating unnecessary type information.</p> <p>It's essential to note that when utilizing Lightrun for TypeScript in a production setting, you must include  sourcemap files on the server where your production software is deployed. This step is crucial for seamless debugging and troubleshooting.</p> <p>Instructions</p> <ol> <li> <p>Insert the following code at the start of your application file (for example, <code>index.ts</code> or <code>app.ts</code>).</p> <pre><code>import * as lightrun from 'lightrun';\n\nlightrun.start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nfilename: &lt;full_path_to_metadata_file&gt;\n});\n</code></pre> <p>Info</p> <p>The <code>filename</code> parameter is optional. See here for details on constructing the metadata file.</p> </li> <li> <p>In the <code>compilerOptions</code> section of  the <code>tsconfig.json</code> file, set the parameter <code>\"sourceMap\"</code> to <code>\"true\"</code>.</p> </li> <li> <p>From a terminal, run the application.</p> <pre><code>node index.js\n</code></pre> </li> </ol>"},{"location":"node/frameworks/koa/","title":"Koa","text":""},{"location":"node/frameworks/koa/#lightrun-for-koa","title":"Lightrun for Koa","text":"<p>To use Lightrun with a Koa application:</p> <ol> <li> <p>In your project's folder, install the node agent by running <code>npm install lightrun</code>.</p> </li> <li> <p>Import Lightrun at the start of your application file (for example, <code>app.js</code>) by adding the following code:</p> <pre><code>require('lightrun').start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;'\n});\n</code></pre> </li> <li> <p>Run the application, e.g., <code>node index.js</code> or <code>npm start</code>.</p> </li> </ol> <p>Getting Company Details</p> <p>To get your <code>&lt;LIGHTRUN_SECRET&gt;</code> key, log into the Management Portal and inspect the Set Up An Agent section, under Getting Started.</p>"},{"location":"node/frameworks/koa/#running-the-agent-in-typescript-applications","title":"Running the agent in TypeScript applications","text":"<p>Important</p> <p>As part of Lightrun\u2019s commitment to align with industry standards, we strongly advise using the TypeScript Compiler (<code>tsc</code>) and not <code>ts-node</code> in production environments.  This choice not only ensures a more efficient memory footprint but also avoids generating unnecessary type information.</p> <p>It's essential to note that when utilizing Lightrun for TypeScript in a production setting, you must include  sourcemap files on the server where your production software is deployed. This step is crucial for seamless debugging and troubleshooting.</p> <p>Instructions</p> <ol> <li> <p>Insert the following code at the start of your application file (for example, <code>index.ts</code> or <code>app.ts</code>).</p> <pre><code>import * as lightrun from 'lightrun';\n\nlightrun.start({\nlightrunSecret: '&lt;LIGHTRUN_SECRET&gt;',\nfilename: &lt;full_path_to_metadata_file&gt;\n});\n</code></pre> <p>Info</p> <p>The <code>filename</code> parameter is optional. See here for details on constructing the metadata file.</p> </li> <li> <p>In the <code>compilerOptions</code> section of  the <code>tsconfig.json</code> file, set the parameter <code>\"sourceMap\"</code> to <code>\"true\"</code>.</p> </li> <li> <p>From a terminal, run the application.</p> <pre><code>node index.js\n</code></pre> </li> </ol>"},{"location":"node/frameworks/serverless/","title":"Lightrun for Serverless Functions","text":"<p>To run a Serverless function with the Lightrun Node.js agent,</p> <ol> <li> <p>Wrap your serverless function source code with the <code>lightrun/lambda</code> module.</p> <pre><code>const lightrun = require(\"lightrun/lambda\");\n\nexports.handler = lightrun.wrap( async (event, context) =&gt; {\n&lt;lambda function source code here&gt;\n}, {\nlightrunSecret: process.env.LIGHTRUN_SECRET,\nagentLog: {\nlogsPath: \"\",\nlevel: \"debug\"\n},\nlightrunWaitForInit: true, lightrunInitWaitTimeMs: 10000,\nmetadata: {\nregistration: {\ndisplayName: \"&lt;lambda_function_name&gt;\",\ntags: ['&lt;lamda_function_name&gt;']\n}\n}\n}\n);\n</code></pre> <p>Note</p> <p>The <code>lightrun/lambda</code> module wraps around your serverless function and ensures that the Lightrun agent is enabled before calling the serverless function. It also disables the Lightrun agent when the function call finishes so that it can properly handle the next call to the serverless function.</p> </li> <li> <p>Package and deploy your serverless function with the Lightrun agent. For example, to deploy a Lightrun agent with an AWS Lambda function, you must package the Lightrun agent into a Lambda layer for use by the Lambda function or package the Lightrun agent and Lambda function together into a container image for deployment on Amazon ECR.</p> </li> </ol>"},{"location":"piiredaction/configure-pii-redaction/","title":"Configuring PII Redaction in Lightrun","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>In the process of setting up PII Redaction, begin by configuring templates that contain patterns serving as rules to specify which data should undergo redaction. For an overview on PII Redaction in Lightrun, see PII Redaction in Lightrun. Note that if you are working with multiple Agent Pools, see Manage PII Redaction Templates for Agent Pools.</p> <p>The following table highlights the various data redaction methods supported by Lightrun, assisting you in choosing that most suitable approach for your requirements. For detailed insights into creating redaction patterns, see PII Redaction Best Practices.</p> Redaction Type Description Example Variable name Data is redacted based on a variable name. Any variables which match the supplied pattern will be excluded from the data Lightrun captures. Adding a pattern <code>apiToken</code> will prevent Lightrun from logging data from any variable which includes <code>apiToken</code> in the variable name. So variables <code>my_apiToken</code>, <code>theOtherapiToken</code>, and <code>someapiTokenVariable</code> will all be redacted. Variable value Data is redacted based on a variable value. The regex pattern is matched to a value, not a variable name. The regex pattern <code>\\b5[1-5]\\d\\d([\\-\\]?)(?:\\d{4}\\1){2}\\d{4}\\b</code> will redact all Mastercard debit or credit card data from Lightrun. <p>Lightrun supports creating PII redaction using one of the following methods:</p> <ul> <li>Configure custom PII redaction patterns:    Depending on your Lightrun subscription, you can apply a single pattern to the default agent pool or create templates for multi-agent environments.<ul> <li>Configure PII Redaction for a single Agent Pool environment: To configure PII redaction in a single-agent pool environment, see Configure PII Redaction.</li> <li>Configure PII Redaction templates for multiple Agent Pools (RBAC required): You have the flexibility to either apply a single template across all agent pools or create specific patterns for individual agent pools. For environments with multiple agent pools, see Manage PII Redaction templates for Agent Pools.</li> </ul> </li> </ul> <ul> <li>Configure PII Redaction pattern using predefined patterns from a library: You can leverage predefined patterns from a library to configure PII redaction. This approach simplifies the process by providing a set of established patterns that cover common types of PII, ensuring a convenient and standardized way to handle sensitive information. This feature is supported from Lightrun version 1.22.</li> </ul> <p>Note</p> <p>PII redaction is not supported on the following platforms:</p> <ul> <li>Python version 3.8 and lower</li> <li>Node version 10.0.0 on ARM</li> </ul>"},{"location":"piiredaction/configure-pii-redaction/#configure-a-custom-pii-redaction-pattern","title":"Configure a custom PII redaction pattern","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Select PII Redaction under Security in the Settings dashboard sidebar.</p> <p>The Data Redaction window opens with a table of existing patterns.</p> <p></p> </li> <li> <p>To add a new pattern for redaction, click + Add pattern.</p> <p>The Add Pattern dialog opens.</p> <p></p> </li> <li> <p>In the Name text field, enter a unique name for the added pattern.</p> </li> <li>Select your preferred data redaction type:<ul> <li>Redact by variable name</li> <li>Redact by variable value</li> </ul> </li> <li>Enter the Regex pattern depending on the mode you selected.</li> <li>(Optional) Enable the Make case insensitive option to support case insensitive values. The default  is set as case sensitive.     From Lightrun version 1.14, the Variable name pattern is set by default as case sensitive. By enabling the Make Case Insensitive field when specifying accountName, data will be redacted from <code>ACCOUNTNAME</code>, <code>accountname</code>, and <code>AccountName</code> variables.</li> <li>To verify the pattern, in the Regex Tester field, enter a test string corresponding to the pattern specified in the previous step. Pattern verification is confirmed when the MATCH button is active.</li> <li>Click Save.<p>The dialog box closes and the list of redacted character string patterns updates to include the newly added pattern.   Lightrun agents will fetch updated PII filters when they start up. To apply new filters to your existing agents you'll need to restart those agents.</p> </li> </ol>"},{"location":"piiredaction/configure-pii-redaction/#configure-a-pii-redaction-pattern-using-predefined-patterns","title":"Configure a PII redaction pattern using predefined patterns","text":"<p>To help you easily configure PII redaction patterns, Lightrun has created a dedicated Regex Patterns library containing a set of predefined common PII patterns that conform with RE2 Google-compliant Regex expressions. The option to use predefined patterns from the Patterns library offers a practical advantage. This approach eliminates the need for custom pattern creation, saving time and effort. The library provides tested patterns, ensuring reliability in PII redaction. </p> <p>In the Patterns library, the patterns are grouped into main categories such as Credit Cards, Financials, General and Network. These categories help streamline the process of locating specific PII patterns based on their characteristics.</p> <p></p> <p>Adding a pattern creates a local copy which can be modified. It\u2019s important to note that the changes made to your local version do not affect the original pattern located in the library and vice versa as the patterns in the library are read-only and cannot be modified. Additional predefined patterns will be incorporated into the central library over time.</p>"},{"location":"piiredaction/configure-pii-redaction/#configure-pii-redaction-using-predefined-regex-patterns","title":"Configure PII Redaction using predefined Regex patterns","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Select PII Redaction under Security in the Settings dashboard sidebar.     The Data Redaction window opens with a table of existing patterns.</p> <p></p> </li> <li> <p>Click +Add Patterns from library.</p> <p>The Add Patterns from Library dialog opens.</p> <p></p> </li> <li> <p>From the list, select the patterns you would like to add to your local patterns, and click Add selected patterns.</p> <p>The patterns are added to the patterns list.</p> </li> <li> <p>Select your required pattern.</p> <p>The Edit Pattern dialog opens to the right and you can proceed to configure the pattern settings.</p> <p> 7. Apply you changes and click Save.</p> </li> </ol>"},{"location":"piiredaction/overview/","title":"Lightrun PII Redaction","text":"<p>The Lightrun PII (Personal Identifiable Information) redaction feature protects user privacy and improves data security within Production environments. By preventing the exposure of sensitive data in snapshots and dynamic logs this feature not only supports individual\u2019s privacy but also ensures compliance with data protection regulations. Organizations applying PII redaction demonstrate a commitment to data privacy, thereby enhancing trust and reputation. During the debugging process, it is important that Personally Identifiable Information (PII) is not exposed to users in snapshots or logs in IDE plugins. Such sensitive information includes email addresses, credit card data, passwords, personal mobile numbers, and social security numbers.</p> <p>Lightrun supports the redaction of PII in various data structures, including strings, arrays, and nested objects, within both snapshots and dynamic logs. This is achieved through patterns formulated using regular expressions, specifically supporting Google's RE2 regular expressions engine. When the redaction patterns are activated, lightrun takes charge of processing them. It applies redaction rules to the data, ensuring sensitive information is masked on all outputs.</p> <p>Note</p> <p>Starting from Lightrun version 1.22, PII Redaction patterns can now be created using Google's RE2. Customers are not required to install anything when upgrading to this latest version. Although older Regex patterns will be automatically RE2 specification compliant across various runtime languages, it is highly recommended to validate the functionality of PII Redaction for your desired patterns to ensure proper behavior.</p>"},{"location":"piiredaction/overview/#get-started-with-pii-redaction","title":"Get started with PII Redaction","text":"<p>To start using PII redaction, you are required to configure patterns with rules governing the redaction functionality. These rules are defined using Regex 2.0 regular expressions.  Start by reviewing the Lightrun PII Redaction Best Practices.</p> <p>Lightrun supports two methods for setting patterns. You have the flexibility to create custom templates tailored to your specific requirement and to simplify this setup, Lightrun provides access to a library of predefined patterns.</p> <ul> <li> <p>Configure custom PII Redaction patterns</p> <p>Depending on your Lightrun subscription, you can apply a single pattern to the default agent pool or create templates for multi-agent environments.</p> <ul> <li>Configure PII Redaction for a single Agent Pool environment: Follow the step-by-step Configure PII Redaction guide to set up PII redaction in a single-agent pool environment.</li> </ul> <ul> <li>Configure PII Redaction templates to be used accross multiple Agent Pools (RBAC required): You have the flexibility to either apply a single template across all agent pools or create specific patterns for individual agent pools.  For environments with multiple agent pools, see manage PII Redaction templates for Agent Pools.</li> </ul> </li> </ul> <ul> <li> <p>Apply a predefined PII Redaction pattern from the pattern library</p> <p>The option to use predefined Personally Identifiable Information (PII) Redaction patterns from the Patterns library offers a practical advantage. This approach eliminates the need for custom pattern creation, saving time and effort. The library provides tested patterns, ensuring reliability in PII redaction. Once selected, these patterns are integrated into the user's set of PII rules/templates based on their license, enhancing convenience.  For more information, see Set a PII Redaction Pattern Using Predefined Patterns.</p> </li> </ul>"},{"location":"piiredaction/pii-redaction-best-practices/","title":"Lightrun PII Redaction best practices","text":"<p>To protect user privacy and improve data security, it is important that Personally Identifiable Information (PII) is not included in snapshots or logged in IDE plugins. This includes information such as email addresses, credit card data, passwords, personal mobile numbers, social security numbers, etc.</p> <p>When implementing PII redaction with Lightrun, we recommend using the following best practices to reduce the risk of exposing sensitive data through Lightrun.</p>"},{"location":"piiredaction/pii-redaction-best-practices/#restrict-admin-roles-to-enhance-security","title":"Restrict Admin roles to enhance security","text":"<p>Ensure that only trusted users in your organization have access to specific roles and permissions in Lightrun. Only users with role_manager or System administrator permissions can specify or remove PII redaction patterns from Lightrun. For more information on how to manage users and user permissions, see Manage Users and Roles.</p>"},{"location":"piiredaction/pii-redaction-best-practices/#apply-case-insensitivity","title":"Apply case insensitivity","text":"<p>Patterns are initially set as case-insensitive by default, and it is advisable to retain this default setting. Default code identifiers, such as variable names, classes, and packages, are inherently case-insensitive. Consequently, redaction will apply to all variations, whether uppercase or lowercase, of the identifier.</p>"},{"location":"piiredaction/pii-redaction-best-practices/#update-pii-redaction-filters-on-existing-agents","title":"Update PII Redaction filters on existing agents","text":"<p>Lightrun agents fetch updated PII filters during startup. To apply the new filters on your existing agents, simply restart them.</p>"},{"location":"piiredaction/pii-redaction-best-practices/#use-patterns-from-lightruns-dedicated-patterns-library","title":"Use patterns from Lightrun's dedicated patterns library","text":"<p>To reduce the risk of errors due to patterns containing incorrect syntax compared to the time consuming process of manual creation, Lightrun provides a dedicated Regex Patterns library containing a set of predefined common PII patterns that conform with RE2 Google-compliant Regex expressions.  In the Patterns library, the patterns are grouped according to these main categories:  Credit Cards, Financials, General and Network. These categories help streamline the process of locating specific PII patterns based on their characteristics. For more information, see Set a pii redaction pattern using predefined patterns.</p>"},{"location":"piiredaction/pii-redaction-best-practices/#test-your-pii-redaction-are-working-correctly","title":"Test your PII Redaction are working correctly","text":"<p>It is highly recommended to validate the functionality of PII Redaction for your desired patterns to ensure proper behavior. Only you know the format in which your system stores potentially sensitive data. It's crucial to test and tune PII patterns to ensure they effectively redact all sensitive data.</p>"},{"location":"public_api/introduction/","title":"Lightrun REST API","text":""},{"location":"public_api/introduction/#introduction","title":"Introduction","text":"<p>The Lightrun API is an HTTP REST API. From Lightrun version 1.29, you can configure REST API commands for the Runtime Reachability feature.</p> <p>This is how you use the Lightrun REST API using cURL as an example.</p> <pre><code>/api/v&lt;number&gt;/&lt;entity&gt;/....\n</code></pre> <p>You can download cURL here. For information on how to configure and use cURL, click here. </p>"},{"location":"public_api/introduction/#availability","title":"Availability","text":"<p>From Lightrun version 1.29, the Lightrun APIs are available as part of the Lightrun Server.</p>"},{"location":"public_api/introduction/#authentication","title":"Authentication","text":"<p>Lightrun uses API keys to authenticate REST API requests. You manage your API keys directly in the Lightrun Management Portal.</p> <p>All APIs require authentication. The api-key will be passed via an http header.</p> <pre><code>curl --header \"Authorization: Bearer API-KEY\" url\n</code></pre> <p>Lightrun returns the following error message with a status code of 401 if authentication information is not valid or missing.</p> <pre><code>{\n\"message\": \"401 Unauthorized\"\n}\n</code></pre>"},{"location":"public_api/introduction/#data-encryption","title":"Data Encryption","text":"<p>The communication is encrypted at transit via TLS 1.2 or higher.</p>"},{"location":"public_api/introduction/#pagination","title":"Pagination","text":"<p>Lightrun supports offset-based pagination, where the default number of records on a page is 10, with a maximum limit of 1000 records.</p> <p>To modify pagination when listing resources, you can use the offset and limit parameters.</p> <p>For example, the command to retrieve records 51 through 75, would be:</p> <pre><code>curl \"https://lightrun.com/api/v1/reports?offset=50&amp;limit=25\"\n</code></pre>"},{"location":"public_api/introduction/#http-response-codes","title":"HTTP Response Codes","text":"<p>Lightrun uses standard HTTP response codes to indicate the success or failure of an API request. The following table provides a list of return codes along with an explanation for each code.</p> Number Type Description 200 OK Successful transition. 201 Package added to the watch list. Package successfully added to watchlist. 400 Invalid input, object invalid parameters The request failed because it didn't include all the information. 401 Unauthorized API Key is invalid. 402 Request Failed The request failed but the parameters are valid. 409 Watched package already exists The package added to the watch list already is set as watched."},{"location":"public_api/introduction/#get-started","title":"Get Started","text":"<p>To access the Lightrun API, click here.</p>"},{"location":"python/agent-configuration/","title":"Customize the Lightrun Python agent","text":"<p>According to the Lightrun actions you specify, the agent dynamically inserts logs and snapshots in the target environment. The agent's behavior when performing these tasks is governed by a set of user-configurable properties.</p>"},{"location":"python/agent-configuration/#agent-properties","title":"Agent properties","text":"<p>You can specify the agent properties within the code or by using a config file.</p>"},{"location":"python/agent-configuration/#specifying-agent-properties-within-the-code","title":"Specifying agent properties within the code","text":"<p>You set agent configuration properties by entering keyword arguments in the <code>lightrun.enable()</code> call function. For example:</p> <pre><code>lightrun.enable(server_url=\"https://mycompany.com/myserver\", company_key=\"123456-abcde\")\n</code></pre> <p>The <code>server_url</code> keyword is required only if Lightrun is used as an on-premise deployment.</p>"},{"location":"python/agent-configuration/#specifying-agent-properties-using-a-config-file","title":"Specifying agent properties using a config file","text":"<p>When using <code>lightrun.enable</code>, you can either pass the <code>company_key</code> parameter (as above), or use the <code>agent_config</code> parameter as shown in this example.</p> <p>The <code>agent_config</code> keyword must reference the full path to a user-created <code>agent.config</code> file.</p> <p>You can see this an example <code>agent.config</code> file. The default parameter values can be modified for your own applications.</p> <p>Note</p> <p>The above methods for passing keywords can be combined. However, configuration parameters passed as keyword arguments override the parameter values in <code>agent.config</code> (if provided).</p>"},{"location":"python/agent-configuration/#configuration-parameters","title":"Configuration parameters","text":"<p>The following table lists the configuration parameters that can be set in both the <code>agent.config</code> file and the <code>lightrun.enable()</code> call function.</p> Flag name Description Default value <code>company</code> Company name. - <code>server_url</code> The URL of the Lightrun backend server (default: https://app.lightrun.com/ should only be changed when using Lightrun on-premise. - <code>com_lightrun_server</code> Combined URL of of the company and the Lightrun backend server. This single parameter can be used instead of the combination of <code>company</code> and <code>server_url</code>. - <code>company_key</code> The company's secret API key. - <code>breakpoint_expiration_sec</code> The default expiration time for Lightrun actions. - <code>ignore_quota</code> Whether or not to disable all performance safety measures.  Warning: Use with caution. - <code>agent_regmetadata_file</code> Path to a JSON file containing the agent's registration metadata (such as tags, and display name). - <code>metadata_registration_tags</code> Array of tags for the agent, can be used when there is no metadata file. You set agent tags by entering <code>metadata_registration_tags</code> argument in the <code>lightrun.enable()</code> call function. For example: <code>lightrun.enable(company_key=\"&lt;COMPANY_SECRET&gt;\", metadata_registration_tags='[{\"name\": \"Production\"},{\"name\": \"EastUS\"}]')</code> - <code>dynamic_log_console_handler_format</code> The format for the logs to be printed by inserted logpoints to the console. For example: <code>'%(levelname)s: %(message)s'</code>. - <code>dynamic_log_file_handler_file_pattern</code> The pattern for writing logpoints to a file. If this parameter is left empty, logs from inserted actions are not written to a file. - <code>dynamic_log_file_handler_format</code> The format for logs from inserted log points to be printed to the file specified in the <code>dynamic_log_file_handler_file_pattern</code> - <code>base_dir</code> Files from this directory will have a higher priority in the case of name conflicts. sys.path[0] <code>lightrun_wait_for_init</code> Block the application until the first time breakpoints are fetched from the server. This option is intended for short-running applications like serverless functions, and it ensures that the Lightrun agent has time to communicate with the Lightrun server before the short-running application disconnects. Note: Using <code>lightrun_wait_for_init</code> in a cloud environment will likely incur additional costs from the cloud provider due to a longer application runtime. <code>False</code> <code>lightrun_init_wait_time_seconds</code> Timeout in seconds for wait if <code>lightrun_wait_for_init</code> is set. - <code>max_condition_cost</code> Maximum allowed additional CPU load when inserting actions during condition evaluation (value between 0.1 and 1.0). 1.0 <code>max_log_cpu_cost</code> Maximum allowed additional CPU load when logging (value between 0.1 and 1.0). 1.0 <code>max_snapshot_buffer_size</code> <code>max_snapshot_buffer_size_in_bytes</code> Maximum allowed total bytes for snapshots. Introduced in version 1.16, and replaces <code>max_snapshot_buffer_size_in_bytes</code>.  Deprecation note: From version 1.16, This field is deprecated and replaced by <code>max_snapshot_buffer_size</code>.  65653  32768 <code>max_variable_size</code> Maximum snapshot variable string size. To retrieve large values, add them as watch expressions to a snapshot.  Note: Introduced in version 1.16 256 <code>max_watchlist_variable_size</code> Maximum size of snapshot variables that were specified via watch expressions. Note: Introduced in version 1.16. 32768 <code>max_collection_size</code> Controls the number of items captured for a collection.  Note: Introduced in version 1.36. 25 <code>max_watchlist_collection_size</code> Controls the number of items captured for a collection in a watch expression. Note: Introduced in version 1.36. 1024 <code>max_frames_with_vars</code> Controls the number of top stack frames for which to read values of local variables. Note: Introduced in version 1.36. 4 <code>max_object_members</code> Controls the number of properties captured in an object.  Note: Introduced in version 1.36. 100 <code>default_certificate_pinning_enabled</code> Enable/disable certificate pinning. Setting to <code>false</code> skips certificate checking. True <code>enable_pii_redaction</code> Enable personally identifiable information (PII) redaction at the agent's side (may affect the application's performance) False <code>alsologtostderr</code> Sends the logs to <code>STDERR</code> standard file as opposed to typically sending them over to <code>STDOUT</code>. True <code>agent_log_max_file_size_mb</code> Maximum size in MB that a log file can reach before being rotated. 10 <code>agent_log_max_file_count</code> Maximum number of rotated log files to keep. Note that old files get deleted when this number of log files is reached. 5 <code>agent_log_target_dir</code> Sets the target directory for storing agent logs, which defaults to the operating system's temporary folder. From version 1.34, the log filename will be generated automatically according to the format: <code>lightrun_python_agent.&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log</code>. For example: <code>lightrun_python_agent.22840.20240513-153557.1.log</code>. String <code>agent_log_level</code> Minimum log level that is written to the log file. Available levels of severity, from the highest to lowest (not case sensitive): <code>None</code>, <code>Fatal</code>, <code>Error</code>, <code>Warning</code>, <code>Info</code>, <code>Debug</code>, and <code>Verbose</code>. Info <p>Info</p> <p>Except for the parameter <code>company_key</code>, all other configuration options have default values.</p>"},{"location":"python/agent/","title":"Install the Lightrun Python agent","text":"<p>The Lightrun agent is at the core of the Lightrun platform. It's the component that communicates requests for runtime observability to your running code, and gathers and relays the requested data back to the Lightrun Server, and eventually the developer's IDE.</p> <p>Before running the agent, it must be installed on the system where your code to be monitored is running, and its credentials must be declared either inside the application code, or in an <code>agent.config</code> file.</p> <p>Version Support</p> <p>The instructions below apply to Python v3.8 to 3.11. If you're interested in support for other versions, please reach out and let us know!</p> <p>System requirements</p> <p>Please check the Python agent system requirements here.</p> <p>Lightrun can be installed both directly and inside of a Docker container. </p>"},{"location":"python/agent/#direct-installation","title":"Direct installation","text":"<ol> <li> <p>Install the python agent by running <code>python -m pip install lightrun</code>.</p> </li> <li> <p>Import Lightrun inside your <code>main</code> function, by adding the following code at the beginning of the function.</p> <pre><code>try:\n     import lightrun\n     lightrun.enable(company_key=\"&lt;COMPANY_SECRET&gt;\")\nexcept ImportError as e:\n     print(\"Error importing Lightrun: \", e)\n</code></pre> <p>Getting Company Details</p> <p>You can get your <code>&lt;COMPANY_SECRET&gt;</code> and <code>&lt;server_url&gt;</code> key by logging into the Management Portal and inspecting the Set up an agent section.</p> <p>Note</p> <p>Other configuration parameters can also be passed here. For example, add the <code>server_url</code> parameter to the <code>lightrun.enable</code> command when using Lightrun on-prem.</p> <pre><code>try:\n    import lightrun\n    lightrun.enable(company_key=\"&lt;COMPANY_SECRET&gt;\", com_lightrun_server=\"&lt;server_url&gt;\")\nexcept ImportError as e:\n    print(\"Error importing Lightrun: \", e)\n</code></pre> </li> <li> <p>Run the application as you normally would; for example, <code>python app.py</code>.</p> </li> </ol> <p>Important</p> <ul> <li>Lightrun actions in Python must only be applied to a function before the function is called. Actions inserted into a Python function while the function is currently executing will only take effect once the function is exited and called again. This also means that you can not use Lightrun actions in a Python program's <code>__main__</code> method as it is already running when the Lightrun agent initializes. </li> </ul> <ul> <li> <p>If your Python program doesn\u2019t have a <code>main()</code> method and all the code is in one scope, you will not be able to use Lightrun effectively. It is necessary to introduce a <code>main()</code> method that triggers the other methods that you want to debug with Lightrun.</p> <p>For example, you won't be able to debug with Lightrun in the following code:</p> <pre><code>def main():\n    // code which does not include calls to other methods -- Lightrun actions won't work\n\n    // ONLY code in methods which are called anew after the Lightrun action has been placed will have a chance to be observed\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>To use Lightrun, you need to have other methods that are triggered by the <code>main()</code> method.</p> <pre><code>def echo():\n    //  some logic/algorithm\n    // Lightrun actions will work in this method, for invocations of this method that happen AFTER the Lightrun action is created\n\ndef main():\n    // Lightrun actions won't work in this method\n    echo()\n\nif __name__ == '__main__':\n    main()\n</code></pre> </li> </ul>"},{"location":"python/agent/#run-as-command-line-argument","title":"Run as command line argument","text":"<p>You can also install a Lightrun agent to your application by specifying your Lightrun credentials as environment variables when you start your Python application from your command-line interface (CLI).</p> <p>Note</p> <p>This option does not work for Gunicorn applications.</p> <ol> <li>\u200bOpen a terminal and change to the working directory where your project is located.</li> <li> <p>Install Lightrun in your application\u2019s folder.</p> <pre><code>python -m pip install lightrun\n</code></pre> </li> <li> <p>Run your application with your Lightrun credentials.</p> <pre><code>python -m lightrun --com_lightrun_server=&lt;server_url&gt; --company_key=&lt;COMPANY_SECRET&gt; -- app.py\n</code></pre> </li> </ol> <p>Change <code>&lt;server_url&gt;</code> to your Lightrun server URL, <code>app.py</code> to the name of your python file, and <code>&lt;COMPANY_SECRET&gt;</code> to your Lightrun company key.</p> <p>Getting Company Details</p> <p>You can get your <code>&lt;COMPANY_SECRET&gt;</code> and <code>&lt;server_url&gt;</code> key by logging into the Management Portal and inspecting the Set up an agent section.</p>"},{"location":"python/agent/#docker-installation","title":"Docker installation","text":"<p>Docker containers are ephemeral.</p> <p>If you were to create a shell into a Docker container (by <code>docker exec -it &lt;container-id&gt;</code>, for example) and add the Lightrun files there, they would disappear the next time the container would spin up due to the ephemeral nature of that container.</p> <p>Instead, we suggest you install Lightrun by adding it to the underlying Docker image directly, i.e. by \"baking\" the agent into the image.</p> <p>This is an example <code>Dockerfile</code> that installs Lightrun with a simple dummy application, assuming the credentials were added to the source code of your application as shown above:</p> <pre><code>FROM python:3.8\nRUN pip install lightrun\nCOPY prime_main.py /app/prime_main.py\nCMD [\"python\", \"/app/prime_main.py\"]\n</code></pre> <p>If you prefer passing the credentials via the command line, here's how to do it inside a <code>Dockerfile</code>:</p> <pre><code>FROM python:3.8\nRUN pip install lightrun\nCOPY prime_main.py /app/prime_main.py\nCMD [\"python\", \"-m\", \"lightrun\", \"--company_secret=&lt;COMPANY_SECRET&gt;\", \"--\", \"app/prime_main.py\"]\n</code></pre> <p>Note: Add the <code>server_url</code> parameter when using Lightrun on-prem.</p> <p>Important</p> <p>Installing Lightrun in this fashion does not absolve you of the need to <code>import</code> Lightrun to your application. Please make sure to add Lightrun as an <code>import</code> to your application file.</p>"},{"location":"python/agent/#lightrun-in-alpine-linux","title":"Lightrun in Alpine Linux","text":"<p>Prerequisites</p> <p>Before installing the Lightrun Python agent on Alpine Linux, ensure that the following dependencies are installed. <pre><code>apk add --no-cache libstdc++ gcompat libgcc build-base py3-pybind11-dev abseil-cpp-dev re2-dev </code></pre> [Optional] <pre><code>pip install google-re2==1.0\n</code></pre></p> <p>To install a Lightrun agent in Alpine Linux:</p> <ol> <li> <p>Create a Dockerfile. </p> <p>Note that the following dockerfile serves as a sample file and should be adjusted to your envirorment. It should not be used in Production.</p> <pre><code># Sample Dockerfile. Not to be used in Production.\n# Stage 0 - base alpine to create a .whl from requirements\nARG PYTHON_BASE_REPO='python'\nARG PYTHON_BASE_TAG='3.10-alpine3.19'\n\nFROM ${PYTHON_BASE_REPO}:${PYTHON_BASE_TAG} as build\nARG LIGHTRUN_KEY='xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx2b'\nARG SERVER_URL='https://app.lightrun.com'\nARG INSTALL_SCRIPT='python-install-agent.sh'\nARG COMPANY_ID='xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\nWORKDIR /wheel\n\n# Install all the build requirements and build the wheel files\n# Any dpenedncy requiring compilation will be built from source\nRUN apk add --update --no-cache \\\nabseil-cpp-dev \\\nbuild-base \\\ncurl\\\ngcompat \\\nlibffi-dev \\\nlibgcc \\\nlibstdc++ \\\nlinux-headers \\\npy3-pybind11-dev \\\nre2-dev &amp;&amp; \\\nLIGHTRUN_KEY=${LIGHTRUN_KEY} sh -c \"$(curl -k -L \"${SERVER_URL}/public/download/company/${COMPANY_ID}/${INSTALL_SCRIPT}?platform=alpine\")\" &amp;&amp; \\\nwhl_ver=`python --version | grep -oE [3]\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3} | cut -d. -f1,2 | tr -d '.'` &amp;&amp; \\\nwhl_file=`basename agent/lightrun-*${whl_ver}*.whl` &amp;&amp; \\\nmkdir ./wheels &amp;&amp; \\\ncp -vfp agent/${whl_file} ./wheels &amp;&amp; \\\npython -m pip install --no-cache --upgrade pip johnnydep setuptools &amp;&amp; \\\njohnnydep ./wheels/${whl_file} --verbose 0 | tail -n +3 | grep -v lightrun | tr -cd '\\11\\12\\15\\40-\\176' | awk '{print $1}' &gt; requirements.txt &amp;&amp; \\\npython -m pip wheel -r requirements.txt --wheel-dir=/wheel/wheels\n\n# Copy wheels from the build stage and install Lightrun's agent\n# The agent's installation is done using the built wheels (and not from PyPI)\nFROM ${PYTHON_BASE_REPO}:${PYTHON_BASE_TAG}\nARG ARG_USERNAME='lightrun'\nARG ARG_UID=10001\nARG ARG_GID=10002\n\n# Copy all the compiled wheel dependencies\nCOPY --from=build --chown=$UID:0 --chmod=g=u,+x /wheel /wheel\n\n# Install C/ C++ libraries and create a user and a group\nRUN apk add --update --no-cache \\\nlibc6-compat \\\nlibstdc++ &amp;&amp; \\\nrm -rf /var/cache/apk/* &amp;&amp; \\\naddgroup -g ${ARG_GID} \"${ARG_USERNAME}\" &amp;&amp; \\\nadduser -h /home/${ARG_USERNAME} -u $ARG_UID -D -s /bin/false -G \"${ARG_USERNAME}\" ${ARG_USERNAME}\n\nWORKDIR /home/${ARG_USERNAME}\nRUN chown -R $UID:0 /home/${ARG_USERNAME}\nUSER $ARG_UID\n\n# Create and activate a virtual environment, as a non-root user\nENV VIRTUAL_ENV=/home/${ARG_USERNAME}/venv\nRUN python3 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\nRUN python -m pip install --no-cache --upgrade \\\npip \\\nsetuptools &amp;&amp; \\\npython -m pip install --no-cache \\\n--no-cache-dir \\\n--no-index \\\n--find-links=/wheel/wheels \\\n/wheel/wheels/lightrun*.whl\n\nENV PYTHONUNBUFFERED=1\nCMD [\"python\"]\n</code></pre> </li> <li> <p>Build the Dockerfile with the following command.          <pre><code>   docker build \\\n--build-arg LIGHTRUN_KEY=\"&lt;lightrun_secret_key&gt;\" \\\n--build-arg COMPANY_ID=\"&lt;lightrun_company_id&gt;\" \\\n--build-arg PYTHON_BASE_TAG=\"&lt;python_base_tag&gt;\" \\\n-t python-alpine-lightrun .\n</code></pre></p> <ul> <li>Change <code>&lt;lightrun_secret_key&gt;</code> to your Lightrun company key</li> </ul> <ul> <li>Change <code>&lt;lightrun_company_id&gt;</code> to your Lightrun company ID</li> </ul> <ul> <li> <p>Change  <code>&lt;python_base_tag&gt;</code> to your preferred Python Alpine tag.</p> <p>How to get your company details? </p> <p>a. You can get your <code>&lt;COMPANY_SECRET&gt;</code> (<code>&lt;lightrun_secret_key&gt;</code>) key by logging into the Management Portal and inspecting the Set up an agent section.</p> <p>b. You can get your <code>&lt;lightrun_company_id&gt;</code> by inspecting your Management Portal dashboard URL.          <pre><code>https://app.lightrun.com/company/&lt;lightrun_company_id&gt;\n</code></pre></p> <p>c. Configure the <code>server_url</code> build arg when using Lightrun on-prem.          <pre><code>--build-arg server_url=\"&lt;server_url&gt;\" \\\n</code></pre></p> </li> </ul> </li> <li> <p>Run the Docker container.         <pre><code>docker run \\\n--rm \\\n-it \\\n--name alpine-agent \\\npython-alpine-lightrun \\\n/bin/sh\n</code></pre></p> </li> <li> <p>Put your source code into the Docker container.</p> </li> <li>Add the Lightrun agent to your source code by following the instructions in your Lightrun Management Portal.</li> </ol> <p>Note</p> <p>Installing the Lightrun agent is not required.</p> <p></p>"},{"location":"python/metadata-and-tagging/","title":"Manage Lightrun Python agent metadata and tags","text":""},{"location":"python/metadata-and-tagging/#overview","title":"Overview","text":"<p>Running agents with Python allows for two types of metadata to be specified, which can be included in either the metadata file or the application file, or entered as environment variables from the command line.</p> <ul> <li>DisplayName - identifies the deployment instance (for example, server name, company site)</li> <li>Tags - groups the agents according to context (for example, staging, production, server, QA)</li> </ul>"},{"location":"python/metadata-and-tagging/#agent-tags","title":"Agent tags","text":"<p>Tags are a powerful feature of the Lightrun agent. Applying tags enables you to group agents together with meaningful labels, typically based on common functionality. For example, you can use tags to identify the location and purpose of each agent: database servers, staging, QA, and so on. You can apply multiple tags to each agent, in any combination. Similarly, adding a single tag to multiple deployments of the same application allows you to add a log action to all of the instances at once.</p> <p>By applying multiple tags, you can bind actions to an agent even before the application is launched, and you can apply actions to multiple applications regardless of where they are running. Once an action is bound to a tag, it is implicitly added to all agents that possess that tag.</p> <p>Out-of-the-box, agents include a single Production tag. Users can:</p> <ul> <li>Define and manage tags</li> </ul> <ul> <li>View all tags</li> </ul>"},{"location":"python/metadata-and-tagging/#managing-tags","title":"Managing tags","text":"<p>Metadata and tags are specified within the code, in the <code>agent.metadata.json</code> file, or you can pass tags using an environment variable. Use one of the methods below to specify the agent's tags.</p>"},{"location":"python/metadata-and-tagging/#specifying-agent-tags-within-the-code","title":"Specifying agent tags within the code","text":"<p>You set agent tags by entering <code>metadata_registration_tags</code> argument in the <code>lightrun.enable()</code> call function. For example:</p> <pre><code>lightrun.enable(company_key=\"&lt;COMPANY_SECRET&gt;\", metadata_registration_tags='[{\"name\": \"Production\"},{\"name\": \"EastUS\"}]')\n</code></pre>"},{"location":"python/metadata-and-tagging/#specifying-agent-tags-using-environment-variable","title":"Specifying agent tags using environment variable","text":"<p>You can use the <code>LIGHTRUN_TAGS</code> environment variable to set agent's tags dynamically. For example:</p> <pre><code>LIGHTRUN_TAGS=Production,Main,EastUS\n</code></pre>"},{"location":"python/metadata-and-tagging/#specifying-agent-metadata-and-tags-within-a-json-file","title":"Specifying agent metadata and tags within a JSON file","text":"<ol> <li> <p>From the relevant server where the agent is installed, create a file named <code>agent.metadata.json</code> file and open it.</p> </li> <li> <p>Insert the following JSON (replace the dummy parameters and values as required):</p> <pre><code> {\n\"registration\": {\n\"DisplayName\": \"&lt;DISPLAY_NAME&gt;\",\n\"tags\": [\n{\n\"name\": \"Tag1\"\n},\n{\n\"name\": \"Tag2\"\n},\n{\n\"name\": \"Tag3\"\n}\n]\n}\n}\n</code></pre> <p>Info</p> <p>With no entered value, <code>displayName</code> will show the hostname of the machine running the application and the application's process identifier.</p> </li> <li> <p>Open your application file (for example, main.py, app.py).</p> </li> <li> <p>Within the <code>enable()</code> function, include a reference to the metadata JSON file.</p> <pre><code>try:\n import lightrun\n lightrun.enable(agent_config=\"/path/to/agent.config\" , agent_regmetadata_file=\"/path/to/agent.metadata.json\")\nexcept ImportError as e:\n  print(\"Error importing Lightrun: \", e)\n</code></pre> </li> <li> <p>Restart the application.</p> <p>Important</p> <p>Changes to the <code>agent.metadata.json</code> file do not take effect until the application is restarted.</p> </li> </ol> <p>Example </p> <p>The following JSON provides to the <code>displayName</code> parameter a value that indicates a pilot site deployment. Tag labels are included for Production, main, and East US.</p> <pre><code>{\n\"registration\": {\n\"displayName\": \"Pilot site\",\n\"tags\": [\n{\n\"name\": \"Production\"\n},\n{\n\"name\": \"Main\"\n},\n{\n\"name\": \"EastUS\"\n}\n]\n}\n}\n</code></pre>"},{"location":"python/metadata-and-tagging/#viewing-tags","title":"Viewing tags","text":"<p>Tags assigned to agents can be viewed from the Management Portal.</p>"},{"location":"python/metadata-and-tagging/#view","title":"To view tag details from the Management Portal","text":"<p>Log in to your Lightrun account and navigate to Entities-&gt;Tags. The Tags screen appears, similar to the following:</p> <p></p> <p>The following details are displayed:</p> Column Description Name The name of the tag. Actions The list of actions currently attached to this tag. Agents The list of agents to which this tag has been associated."},{"location":"python/system-requirements/","title":"Lightrun Python agent system requirements","text":"<p>The following page describes the IDE and operating system requirements for running the Lightrun Python agent.</p>"},{"location":"python/system-requirements/#supported-operating-systems","title":"Supported operating systems","text":"OS Requirements Linux - Python versions 3.8 to 3.11 - Alpine Linux versions 3.16, 3.17, 3.18 and 3.19 (libstdc++ is required to use Lightrun in Alpine Linux) - Ubuntu LTS versions 20.04, and 22.04. (Linux with GLIBCXX_3.4.19 and later) - CentOS versions 7, 8, and 9 versions (Linux with GLIBCXX_3.4.19 and later) Windows OS - Python versions 3.8 to 3.11 - Windows Server versions 2016 (limited), 2019, and 2022 macOS - Python versions 3.8 to 3.11 - macOS versions 12.O and higher for Apple Chipset based Macs AWS Lambda Python versions 3.8 to 3.11"},{"location":"python/system-requirements/#lightrun-ide-plugins","title":"Lightrun IDE Plugins","text":"<ul> <li>VSCode (Versions 1.72 and later)</li> <li>PyCharm (Versions 2022.3.0 and later)</li> <li>VSCode.dev</li> <li><code>code-server</code></li> </ul>"},{"location":"python/frameworks/airflow/","title":"Lightrun for Apache Airflow","text":"<p>To run Lightrun for Python with Apache Airflow you must select one or more  tasks in the DAG that you want to debug.</p> <p>Instructions</p> <ol> <li>With the same Python interpreter used by Airflow, install the Python agent, by running <code>python -m pip install lightrun</code>.</li> <li>Within your Airflow task definition, add the <code>@lightrun_airflow_task</code> decorator; for example:<pre><code>@lightrun_airflow_task(company_key=\"1111-2222-3333\")\ndef foo():\n    # Do something\n    pass\n</code></pre> </li> </ol> <p>Note</p> <p>To import the decorator, add following line:</p> <pre><code>from lightrun.decorators import lightrun_airflow_task\n</code></pre>"},{"location":"python/frameworks/airflow/#decorator-parameters","title":"Decorator parameters","text":"<p>The following table lists the available parameters for the <code>lightrun_airflow_task</code> decorator.</p> Parameter Explanation <code>company</code> The Lightrun registered company to which the user belongs. Must be supplied with either this parameter or the <code>LIGHTRUN_COMPANY</code> environment variable. <code>company_key</code> The company's secret API key. Must be supplied  with either this parameter or the <code>LIGHTRUN_KEY</code> environment variable. <code>config_path</code> [Optional] The filesystem path of a configuration for the lightrun agent <code>initial_sleep_ms</code> The time, in milliseconds, to sleep after initializing the agent. If this parameter is set to a low value, the agent might have insufficient time to initialize before the task begins execution, which will result in missing breakpoints inserted in lines that are executed before the agent finishes initialization. <p>You may need more agents</p> <p>A separate agent is required for each Airflow task that you want to apply simultaneously with other tasks.  Contact us if you need more agents.</p>"},{"location":"python/frameworks/celery/","title":"Lightrun for Celery","text":"<p>To run Celery with the Lightrun agent, follow these steps:</p> <ol> <li>In your application folder, install the Python agent by running <code>python -m pip install lightrun</code>.</li> <li>Add the following to the <code>.py</code> file where Celery is initiated (where there is a call to <code>Celery()</code>, usually <code>celery.py</code>).     <pre><code>from celery.signals import task_prerun\n\n@task_prerun.connect()\ndef task_prerun(**kwargs):\n    try:\n        import lightrun\n        lightrun.enable(company=\"&lt;COMPANY_NAME&gt;\" , company_key=\"&lt;COMPANY_SECRET&gt;\")\n    except ImportError as e:\n        print(\"Error importing Lightrun: \", e)\n</code></pre></li> <li>Run your Celery processes as normal.</li> </ol> <p>Note</p> <p>The Celery <code>task_prerun</code> signal dispatch before a task is executed. This signal ensures that a Lightrun agent has been created before the Celery task is executed.</p> <p>Imp</p> <p>You might need to provide the <code>lightrun_extra_class_path</code> configuration parameter to ensure that Lightrun is able to index all the functions.</p>"},{"location":"python/frameworks/django/","title":"Lightrun for Django","text":"<p>To run a Django web server with the Lightrun agent, follow these steps:</p> <ol> <li>In your application folder, install the Python agent by running <code>python -m pip install lightrun</code></li> <li> <p>Add the following code to your\u00a0<code>manage.py</code>\u00a0file:</p> <pre><code>try:\n    if os.environ.get('RUN_MAIN') or '--noreload' in sys.argv:\n        import lightrun\n         lightrun.enable(company_key=\"&lt;COMPANY_SECRET&gt;\")\nexcept ImportError as e:\n    print(\"Error importing Lightrun: \", e)\n</code></pre> </li> <li> <p>Run your Django application as normal.</p> </li> </ol> <p>Info</p> <p>An alternative <code>enable()</code> argument is: </p> <pre><code>lightrun.enable(com_lightrun_server=\"https://&lt;SERVER_DOMAIN&gt;/\")/company_key&lt;COMPANY_SECRET&gt;\n</code></pre>"},{"location":"python/frameworks/flask/","title":"Lightrun for Flask","text":"<p>To run a Flask web app with the Lightrun agent, follow these steps:</p> <ol> <li>In your application folder, install the Python agent by running <code>python -m pip install lightrun</code></li> <li> <p>Add the following code to your application's main <code>init.py</code> or <code>app.py</code> (The import statement must be added to  the main code, not to a specific routed method):</p> <pre><code>try:\n    import lightrun\n    lightrun.enable(company_key=\"&lt;COMPANY_SECRET&gt;\")\nexcept ImportError as e:\n    print(\"Error importing Lightrun: \", e)\n\n# Example route\n@app.route(\"/\")\ndef hello_world():\nreturn \"Hello world!\"\n</code></pre> </li> </ol>"},{"location":"python/frameworks/gunicorn/","title":"Lightrun for Gunicorn","text":"<p>To run a Gunicorn WSGI HTTP server with the Lightrun agent, follow these steps:</p> <ol> <li>In your application folder, install the Python agent by running <code>python -m pip install lightrun</code>.</li> <li>Add the following code to your application's <code>.py</code> file.     <pre><code>try:\n    import lightrun\n    lightrun.enable(com_lightrun_server=&lt;company_url&gt;, company_key=&lt;company_key&gt;)\nexcept ImportError as e:\n        print(\"Error importing Lightrun: \", e)\n</code></pre></li> <li>Run your Gunicorn application as normal.</li> </ol> <p>Important</p> <p>The Lightrun import statement must be outside your function but in the same file.</p> <p>Note</p> <p>If you are running Gunicorn inside a framework, add the Lightrun import statement to your <code>wsgi.py</code> file and run the file with Gunicorn.</p>"},{"location":"python/frameworks/serverless/","title":"Lightrun for Serverless Functions","text":"<p>To run a Serverless function with the Lightrun Python agent, follow these steps: </p> <ol> <li>Ensure that the Lightrun agent has been configured to work with your serverless function. For example, to use Lightrun with an AWS Lambda function, you must first package the Lightrun agent into an AWS Lambda Layer. Follow the instructions here to setup a lambda layer for your Lightrun Python agent.</li> <li>Add the following to your function code.     <pre><code>from lightrun.decorators import lightrun_serverless\n\n@lightrun_serverless(company_key = 'aaaaaa-bbbb-cccc-dddd-eeeeeeeeeee', lightrun_tags = ['tag1', 'tag2'])\ndef serverless_func():\n\"\"\"Code\"\"\"\n</code></pre></li> <li>Run your serverless function as normal.</li> </ol> <p>Note</p> <p>The Lightrun serverless decorator wraps around your serverless function and ensures that the Lightrun agent is enabled before calling the serverless function. It also disables the Lightrun agent when the function call finishes so that it can properly handle the next call to the serverless function.</p>"},{"location":"rbac/agent-pool-pii-redaction/","title":"Manage PII Redaction templates for Agent Pools","text":""},{"location":"rbac/agent-pool-pii-redaction/#overview","title":"Overview","text":"<p>Note</p> <p>The Lightrun PII Redaction Templates for Agent Pools feature is only available to users on our Enterprise plan; please contact our support team for more information.</p> <p>Lightrun promotes data security through the utilization of PII (Personally Identifiable Information) Redaction. This feature allows you to control retrieval of sensitive data in instrumented code using predefined patterns. For best practices on setting up PII Redaction, see Lightrun PII Redaction Best Practices.</p> <p>Lightrun supports creating a list of PII Redaction patterns on all your agents or alternatively creating and assigning different PII Redaction templates to different agent pools. For example, if you would like to apply PII Redaction only on a Production environment and not on Development or Staging.</p> <p>To help you get started with configuring your PII redaction on agent pools, we provide a single Default template on the PII Redaction page which serves as a starting point for creating your templates. Note that it does not contain any predefined patterns and is not assigned to any agent pools.</p> <p>The process of assigning PII Redaction to an agent pool includes these steps:</p> <ol> <li>Create your PII Redaction template.</li> <li>Create or access an existing agent pool and assign the PII Redaction template to the agent pool.</li> </ol>"},{"location":"rbac/agent-pool-pii-redaction/#set-up-your-pii-redaction-templates","title":"Set up your PII Redaction templates","text":"<p>You can set up your PII Redaction template using one of the following:</p> <ul> <li>Edit and save the default template and use it as a basis for all future templates.</li> <li>Create a new template from scratch.</li> <li>Clone an existing template, apply changes and rename with an intuitive name.</li> </ul>"},{"location":"rbac/agent-pool-pii-redaction/#to-create-a-pii-redaction-template","title":"TO CREATE A PII REDACTION TEMPLATE","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li>Select PII Redaction under Security in the Settings dashboard sidebar.    The Data Redaction window opens.</li> <li>To help you create your initial template, you can set the patterns on the default data redaction template or you can click Create new template.           The PII Redaction template opens.</li> <li> <p>Provide a name for your template and click Add Pattern.          The Add Pattern dialog box opens.</p> <p></p> </li> <li> <p>In the Name text field, enter a unique name for the added pattern.</p> </li> <li>Select your preferred data redaction type:<ul> <li>Redact by variable name: Data is redacted based on variable name. Any variables which match the supplied pattern will be excluded from the data Lightrun captures. For example, adding a pattern apiToken will prevent Lightrun from logging data from any variable which includes apiToken in the variable name. So variables <code>my_apiToken</code>, <code>theOtherapiToken</code>, and <code>someapiTokenVariable</code> will all be redacted.</li> <li>Redact by variable value: Data is redacted based on a specified regex pattern. The regex pattern is matched to a value, not a variable name. For example, the following regex pattern<code>\\b5[1-5]\\d\\d([\\-\\ ]?)(?:\\d{4}\\1){2}\\d{4}\\b</code> will redact all Mastercard debit or credit card data from Lightrun.</li> </ul> </li> <li>Enter Regex pattern depending on the mode you selected.</li> <li>(Optional) Enable the Make case insensitive option to support case insensitive values. The default  is set as case sensitive.     From Lightrun version 1.14, the Variable name pattern is set by default as case sensitive. By enabling the Make Case Insensitive field when specifying accountName, data will be redacted from <code>ACCOUNTNAME</code>, <code>accountname</code>, and <code>AccountName</code> variables.</li> <li>To verify the pattern, in the Regex Tester field, enter a test string corresponding to the pattern specified in the previous step. Pattern verification is confirmed when the MATCH button is active.</li> <li>Click Save.</li> </ol>"},{"location":"rbac/agent-pool-pii-redaction/#clone-an-existing-pii-redaction-template","title":"Clone an existing PII Redaction template","text":"<p>Cloning an existing PII Redaction template is useful if you would like to create multiple templates with minor variations, such as changes to the patterns or the environments in which the PII redaction occurs.</p>"},{"location":"rbac/agent-pool-pii-redaction/#to-clone-an-existing-pii-redaction-template","title":"TO CLONE AN EXISTING PII REDACTION TEMPLATE","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li>Select PII Redaction under Security in the Settings dashboard sidebar.    The Data Redaction window opens.</li> <li>Select an existing PII Redaction template and click Clone template.    </li> <li>Apply your changes and click Save.</li> </ol>"},{"location":"rbac/agent-pool-pii-redaction/#assign-a-pii-redaction-template-to-an-agent-pool","title":"Assign a PII Redaction template to an Agent Pool","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li>Select Agent pools in the Settings dashboard sidebar to open the Agent Pools page.</li> <li>Click the + Create new agent pool button on the top right-hand side.</li> <li>In the Create agent pool dialog, click Show advanced settings and from the PII Redaction list, select your predefined PII Redaction template.     </li> <li>Click Create agent pool and select your predefined PII redaction template from the PII redaction list. </li> </ol>"},{"location":"rbac/agent-pool-pii-redaction/#manage-pii-redaction-templates-on-agent-pools","title":"Manage PII Redaction templates on Agent Pools","text":"<p>You can view and/or change the PII template assigned to an agent pool in the Management tab located under the agent pool.</p> <ol> <li>From the Agent Pool list, click anywhere in the line to select an agent pool.    The Edit Agent Pool dialog opens.</li> <li>Click the Management tab, and select an alternate option from the PII Redaction list.    </li> <li>Click Save and close.  </li> <li>(Optional) Navigate to Security &gt; PII Redaction page, to verify that your agent pool was assigned to the modified PII redaction template.</li> </ol>"},{"location":"rbac/manage-groups/","title":"Manage groups in Lightrun with RBAC","text":"<p>In Lightrun, a group represents a collection of users who share specific permissions and access to resources. Groups are a fundamental part of Role-Based Access Control (RBAC), enabling administrators to efficiently manage user permissions.</p>"},{"location":"rbac/manage-groups/#what-are-groups-in-lightrun","title":"What are groups in Lightrun?","text":"<p>Groups in Lightrun allow administrators to assign and manage permissions for multiple users at once. Instead of setting permissions for each user individually, you create a group and grant it access to specific resources, such as agent pools. This simplifies the process of managing access controls, especially for teams that require the same level of access.</p> <p>When you create a Lightrun account for your organization, a default group is created, comprising all users within your organization. Users with the System Admin role have the authority to create, manage, and delete groups. They can also delegate group management by assigning Group Admin roles to other users, who can then help manage specific groups.</p>"},{"location":"rbac/manage-groups/#group-related-roles-overview","title":"Group related-roles overview","text":"<p>Before a user can access agents in an agent pool, they must be part of a group that has access to that agent pool. The level of access a user has depends on the role assigned to their group. In Lightrun, there are two roles: </p> <ul> <li>Standard Role - The standard role grants regular access to an agent pool. This includes creating Lightrun actions with the agents in the agent pool, full access to action data, etc. </li> </ul> <ul> <li>Privileged Role - The privileged role grants a group the ability to ignore agent quota limitations in addition to the permissions granted by the Standard role. </li> </ul> <p>Note</p> <p>Lightrun roles are predefined and are not editable.</p> <p>As illustrated in the following example, all the users in the organization belong to the Default Agent Pool and are granted the Standard privilege role. However, developers also possess access to Dev- Non-Prod with the Privileged role. Meanwhile, team leaders (TLs) hold the standard role in the Default agent pool but also hold priviledged roles for both Dev-Non-Production and TL-Non-Production enviroments simultaneously. </p> <p>In addition to the role assigned to a group, individual users can also be assigned elevated roles. Elevated roles grant group members more privileges than others. A DevOps group might have a standard role, but a single user can be granted an elevated privileged role. This elevated privileged role allows them to perform certain actions, like ignoring the preset agent quota limitations, which other group members cannot.</p>"},{"location":"rbac/manage-groups/#create","title":"Create a group","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click the + Create new group button to open the Create group dialog.</p> <p></p> </li> <li> <p>Complete the fields with the relevant details.</p> <ul> <li>Name: Enter a unique name for the new group.</li> <li>Role: Select the group\u2019s role. A role determines what permissions a group has to its agent pools.</li> <li>Agent Pools: Allow access to one or more agent pools.</li> <li>Group members: Optional, Add users to the group.</li> </ul> </li> <li> <p>Click Save to create the group.</p> </li> </ol>"},{"location":"rbac/manage-groups/#manage-groups","title":"Manage groups","text":""},{"location":"rbac/manage-groups/#edit","title":"Edit a group","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group you want to edit to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Complete the fields with relevant details.</p> </li> <li>Click Save to save your changes.</li> <li>Click the Delete group button on the bottom left corner of the side sheet to delete the group.</li> </ol>"},{"location":"rbac/manage-groups/#add-or-remove","title":"Add users or remove users from a group","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Click + Add member on the right-hand side of the Group members label to open the Add members dialog.</p> <p></p> </li> <li> <p>Enter the user name or email in the search field. </p> </li> <li>Tick the checkbox next to the user, and click Add members to add the selected user to the group.</li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/manage-groups/#to-remove-a-user-from-a-group","title":"To remove a user from a group","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Click the vertical ellipsis icon next to a user.</p> </li> <li>Click Remove in the dialog that appears to remove the user from the group.</li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/manage-groups/#promote-or-remove","title":"Promote or remove users as a Group Admin","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Click the vertical ellipsis icon next to a user.</p> </li> <li>Click Promote as a Group Admin or Remove as Group Admin in the dialog that appears to promote or remove a user from the group admin role.</li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/manage-groups/#grant","title":"Grant a group access to an agent pool","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Select the preferred agent pool in the Agent pools dropdown.</p> </li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/manage-pools/","title":"Manage Agent Pools","text":"<p>Lightrun users with the System administrator or Group administrator role can:</p> <ul> <li>Create agent pools</li> <li>Manage agent pools</li> <li>Agent Pool Key Rotation</li> </ul> <p>Note</p> <p>Users with Group administrator role can only create or manage agent pools assigned to groups they are associated with.</p>"},{"location":"rbac/manage-pools/#create","title":"Create agent pools","text":""},{"location":"rbac/manage-pools/#to-create-a-new-agent-pool","title":"To create a new agent pool","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li>Select Agent Pools to open the Agent Pools page.</li> <li> <p>Click the + Create new agent pool button on the top right-hand side of your screen to open the Create agent pool dialog.</p> <p></p> </li> <li> <p>Complete the fields with the relevant details.</p> <ul> <li>Name: Enter a unique name for the agent pool.</li> <li>Description Optional, Enter a description for the agent pool.</li> </ul> </li> <li> <p>Click Create Agent Pool to create the new agent pool.</p> </li> </ol>"},{"location":"rbac/manage-pools/#manage","title":"Manage Agent Pools","text":""},{"location":"rbac/manage-pools/#to-edit-an-agent-pool","title":"To edit an agent pool","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li>Select Agent Pools to open the Agent Pools page.</li> <li> <p>Click on the agent pool you want to edit to open the Edit agent pool side sheet.</p> <p></p> </li> <li> <p>Complete the fields with relevant details.</p> </li> <li>Optional, click the Detach agents button to disable all agents currently associated with the agent pool. </li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/manage-pools/#key-rotation","title":"Agent Pool Key Rotation","text":"<p>Lightrun supports rotating Agent Pool API keys to improve security and protect agent data. When an Agent Pool API key is rotated, a new API key is generated, and the old key is deprecated. This allows admins enough time to replace the old key with the new API key across their systems, after which the old key is revoked.</p> <p></p>"},{"location":"rbac/manage-pools/#to-initiate-agent-pool-key-rotation","title":"To initiate Agent Pool Key rotation","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard &gt; Identity and Access Management tab.</li> <li>Select Agent Pools to open the Agent Pools page.</li> <li>Click on the agent pool whose API key you want to rotate to open the Edit agent pool side sheet.</li> <li>Click the Management tab to display the Agent Pool's active API key.</li> <li> <p>Click Rotate on the right side of the active API key.</p> <p>The Intiate Key Rotation dialog opens.   </p> </li> <li> <p>Click Rotate to start the API key rotation process.</p> </li> </ol> <p>A new API Key will be generated, while the former active key will be deprecated and scheduled for revocation. Note that your deprecated API key is still effective until revocation; this is to allow admins enough time to replace the old key with the new API key across their systems.</p>"},{"location":"rbac/manage-pools/#to-reschedule-your-api-key-revocation","title":"To reschedule your API key revocation","text":"<ol> <li> <p>Click Reschedule to open the Set the auto-revoke date dialog     </p> </li> <li> <p>Select a specific date and time.     </p> </li> <li> <p>Click Save to reschedule the deprecated key revocation.</p> </li> </ol> <p>Note</p> <p>Once a deprecated agent key has been revoked, agents using the deprecated key will no longer be able to connect to the Lightrun server.</p>"},{"location":"rbac/manage-pools/#to-manually-revoke-your-deprecated-api-key","title":"To manually revoke your deprecated API key","text":"<ol> <li>Update your servers with the new API key.</li> <li>Click the Revoke Deprecated button to revoke the deprecated API key manually.</li> </ol>"},{"location":"rbac/manage-pools/#to-revert-key-rotation","title":"To revert key rotation","text":"<ul> <li> <p>Click Revert Rotation to revert the key rotation process.</p> <p>When you revert your API Key rotation:</p> <ul> <li>The new active key is revoked, and agents using it can no longer connect to the Lightrun server.</li> <li>The deprecated key reverts to the active key.</li> </ul> </li> </ul>"},{"location":"rbac/manage-users/","title":"Manage users with RBAC","text":"<p>Permissions</p> <p>Only users with <code>ROLE_MANAGER</code> permissions can perform these actions.</p> <p>Note</p> <p>This topic pertains to users operating in an RBAC environment. For information on configuring users in a non-RBAC environment, see Manage Users with Basic Access.</p> <p>Lightrun Role-Based Access Control (RBAC) helps you manage how users in the organization access resources and use Lightrun. With RBAC, you can control who has access to your Lightrun resources (such as agents), what level of access they have (e.g, setting agent quota limitations), and which resources they can access. </p> <p>When you add and activate a user, they are associated with the default group. This group is linked to the default Agent Pool and inherits its associated roles. To grant users additional permissions to a user, add them to a predefined group that includes the desired roles. For more information, see Manage groups using RBAC.</p>"},{"location":"rbac/manage-users/#create-a-new-user","title":"Create a new user","text":"<p>You can manually add users to your Lightrun organization, one at a time. This is suitable for scenarios where you need to add a small number of users, such as when you're working in a small organization or when you want to add specific individuals. Lightrun also supports adding multiple to your organization using an email invite or a dedicated URL. For more information, see Invite a New User.</p> <p>When adding users manually, you would typically enter the user's details, such as their name, email address, and any other required information, directly in the Lightrun Management Portal . The user will then receive an email requiring them to verify their credentials.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings located at the bottom left corner of your Management Portal.</li> <li> <p>Select Users under Identity and Access Management.     The Users Management page opens.</p> <p></p> </li> <li> <p>Click + Create a user.</p> <p>The Create user dialog opens.</p> <p></p> </li> <li> <p>Complete the fields with the relevant details.</p> </li> <li>Toggle the Active button to green to enable the new user.</li> <li>(Optional) Toggle the System admin button to green to grant the new user system administrator privileges.</li> <li> <p>(Optional) Click + Add group and select a group from the dropdown menu that appears to add the new user to an existing group. For more information, [Manage groups using RBAC)(/rbac/manage-groups.md)</p> </li> <li> <p>Click Create.    The user is added to the management user list and an email will be sent to the user to verify the account and then proceed to log in to Lightrun.</p> </li> </ol>"},{"location":"rbac/manage-users/#manage-users","title":"Manage users","text":"<p>You can perform the following administrative tasks including viewing the status of your users, editing, or removing a user.</p>"},{"location":"rbac/manage-users/#view-user-status","title":"View user status","text":"<p>In the User Management page, the following status indicators for each of the users is displayed to help know if your users are registered or not.</p> Status Description Active The user is active and completed the activation process. Deactivated The user was disabled. The Active toggle is disabled in the User Details page. Pending The user is active but has not yet completed the activation process."},{"location":"rbac/manage-users/#edit-a-user","title":"Edit a user","text":"<ol> <li> <p>In the User Management page, click the required user in the user list.</p> <p>The User details pane opens.</p> <p></p> </li> <li> <p>Apply the changes and click Save.</p> </li> </ol>"},{"location":"rbac/manage-users/#delete-a-user","title":"Delete a user","text":"<ol> <li> <p>In the User Management page, click the required user in the user list.</p> <p>The User details pane opens.</p> </li> <li> <p>Click the Active toggle to deactivate the user, and click Save.</p> </li> <li> <p>Access the User details pane again.</p> <p>The Delete User option is active and appears in red.</p> </li> <li> <p>Click Delete User.</p> </li> <li>Click Save.</li> </ol>"},{"location":"rbac/manage-users/#next-steps","title":"Next steps","text":"<p>Add users to groups to assign roles beyond the standard ones. For more information, see Manage groups using RBAC.</p>"},{"location":"rbac/organization/","title":"Set up your Lightrun organization","text":"<p>This tutorial will walk you through setting up a Lightrun account for your organization.</p>"},{"location":"rbac/organization/#before-you-begin","title":"Before you begin","text":"<ul> <li>This guide is for managing users with the Lightrun Role-based access control feature.</li> <li>The Lightrun Role-based access control feature is only available to users on our Enterprise plan; please contact our support team for more information. </li> <li>Make sure to read the User management concepts guide before starting this tutorial to have a basic understanding of how user management works in Lightrun.</li> </ul>"},{"location":"rbac/organization/#get-your-lightrun-account","title":"Get your Lightrun account","text":"<p>The first step in this tutorial is to get a Lightrun account set up for your organization by a Lightrun representative.</p> <p>You are assigned a default group and agent pool when you set up your Lightrun account. The default group has a standard role with access to the default agent pool. When you add a new user to your organization, the users are automatically assigned to the default group. The guide will teach you how to create more groups and agent pools.</p>"},{"location":"rbac/organization/#add-users-to-your-lightrun-organization","title":"Add users to your Lightrun Organization","text":"<p>The next step after getting a Lightrun account for your organization is to add your team members to the Lightrun organization. You can create a user for each team member or send them an email invite.</p> Create a user<p>To create a new user:</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen and navigate to the Identity and Access Management tab.</li> <li> <p>Select Users.</p> <p>The User Management page opens with a list of existing users.</p> </li> <li> <p>Click the + Create a user button to open the Create User side sheet.</p> <p></p> </li> <li> <p>Complete the fields with the relevant details.</p> <ul> <li>First name - The first name of the new user.</li> <li>Last name - The last name of the new user.</li> <li>Email address - The email address of the new user.</li> <li>Password - A secured password for the new user. Note - The password must have eight characters, and at least three characters must be a lowercase letter, uppercase letter, number, and special character.</li> <li>Optional, Toggle the Active button to green to enable the new user.</li> <li>Optional, Toggle the System admin button to green to grant the new user system administrator privileges.</li> <li>Optional, Click the + Add group button and select a group from the dropdown menu that appears to add the new user to an existing group.</li> </ul> </li> <li> <p>Click Create to create the user.</p> </li> </ol> Invite a user<p>You can access the Invite new users page in two ways:</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Invite member at the bottom left corner of your Management Portal to open the Invite new users page.</li> </ol> <p>OR</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen and navigate to the Identity and Access Management tab.</li> <li>Select Users.</li> </ol> <p>The User Management page opens with a list of existing users.</p> <ol> <li>Click the + Invite users button to open the Invite new users page.</li> </ol> <p></p> <p>The invite new users page has two sections.</p> <ul> <li>Invite new users</li> <li>Pending Invites</li> </ul> <ol> <li>Copy and send the invite link to the users in a secure manner of your choice, or</li> <li>Enter the intended email addresses separated by commas and then click Send</li> </ol> <p>Once the user receives the invitation, by mail or through the invite link, they will be redirected to a registration page. They can create their account and log in to access their Management Portal.</p> <p>Invited users who have registered their accounts can be seen on the User Management page. The list of your pending invitations can be seen in the Pending Invites section.</p>"},{"location":"rbac/organization/#create-groups-and-assign-roles","title":"Create groups and assign roles","text":"<p>A group represents a group of users in Lightrun. With groups, you can manage access to agent pools for multiple users instead of each user. For example, you can create a group for your RnD team and grant access to specific agent pools related to RnD activities in your system.</p> <p>The amount of access a group has to an agent pool depends on role assigned to the group. There are two roles provided by Lightrun.</p> <ul> <li>Standard role</li> <li>Privileged role</li> </ul> <p>For more information about roles and how to work with Groups, see Groups.</p> Create a group<p>To create a group:</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen and navigate to the Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click the + Create new group button to open the Create group dialog.</p> <p></p> </li> <li> <p>Complete the fields with the relevant details.</p> <ul> <li>Name: Enter a unique name for the new group.</li> <li>Role: Select the group\u2019s role. A role determines how much access a group has to its agent pools.</li> <li>Agent Pools: Optional, Allow access to one or more agent pools.</li> <li>Group members: Optional, Add users to the group.</li> </ul> </li> <li> <p>Click Save to create the group.</p> </li> </ol> Add users to a group<p>To add users to a group:</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen and navigate to the Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Click + Add member on the right-hand side of the Group members label to open the Add members dialog.</p> <p></p> </li> <li> <p>Enter the user name or email in the search field. </p> </li> <li>Tick the checkbox next to the user, and click Add members to add the selected user to the group.</li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/organization/#create-agent-pools-and-assign-access","title":"Create Agent Pools and assign access","text":"<p>Agent Pools are isolated groups of agents with a unique name and an API key. Lightrun agents can only be assigned to a single agent pool; hence agent pools provide a convenient way to securely isolate a group of agents from other agents in your system. For tips on what to know before creating and working with agent pools, see Agent Pools.</p> <p>To allow users in a group to debug with agents in an agent pool, the group must have access to the agent pool. Lightrun users with System administrator or Group administrator roles can create new agent pools or grant a group access to an agent pool.</p> Create Agent Pools<p>To create a new agent pool:</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen and navigate to the Identity and Access Management tab.</li> <li>Select Agent Pools to open the Agent Pools page.</li> <li> <p>Click the + Create new agent pool button on the top right-hand side of your screen to open the Create agent pool dialog.</p> <p></p> </li> <li> <p>Complete the fields with the relevant details.</p> <ul> <li>Name: Enter a unique name for the agent pool.</li> <li>Description Optional, Enter a description for the agent pool.</li> </ul> </li> <li> <p>Click Create Agent Pool to create the new agent pool.</p> </li> </ol> Assign agent pools to groups<p>To grant a group access to an agent pool:</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen and navigate to the Identity and Access Management tab.</li> <li> <p>Select Permissions &amp; Access.</p> <p>The Permissions &amp; Access page opens with the Groups and Roles tab.</p> </li> <li> <p>Click on the Groups tab to access a list of existing groups.</p> </li> <li> <p>Click on the group to open the Group settings side sheet.</p> <p></p> </li> <li> <p>Select the preferred agent pool in the Agent pools dropdown.</p> </li> <li>Click Save to save your changes.</li> </ol>"},{"location":"rbac/organization/#complete-your-set-up","title":"Complete your set up","text":"<p>To complete the setup, we will add agents to our agent pool.</p> <p>To add agents to an agent pool:</p> <ul> <li>Change your Lightrun secret key to the agent pool API key on the server where your application is running. </li> <li>Save the Changes and restart your application to apply the new changes.</li> <li>Re-run your Lightrun agents to apply the new configuration. </li> </ul>"},{"location":"rbac/organization/#verify-things-are-working","title":"Verify things are working","text":"<p>Ideas for checking that your users are configured correctly:</p> <ul> <li>Go to your Permissions &amp; Access page to confirm if your users and agent pools are assigned correctly and everything makes sense.</li> <li>Have your users log in to their Lightrun account to see if they have access to agent pools associated with their assigned groups.</li> <li>Have your users confirm that they do not have access to agent pools that are not associated with their assigned groups.</li> </ul>"},{"location":"rbac/overview/","title":"Lightrun Role-Based Access Control (RBAC)","text":"<p>Note</p> <p>You need a Lightrun Enterprise plan to use the Role-Based Access Control (RBAC) functionality. For more information, see Pricing.</p> <p>Permissions</p> <p>Security management requires administrative permissions.    </p> <p>Lightrun introduces an enterprise-grade security functionality through its Role-based Access Control (RBAC) feature. Designed to enhance both the security and governance of users and agents in your organization.</p> <p>Lightrun role-based access control (RBAC) helps you manage how users in your organization access and use Lightrun. You can control who has access to your Lightrun resources (like agents), how much access they have (I.e., can limit agent quota limitations), and what resources they can access.</p> <p>The benefits of implementing Lightrun RBAC in your organization are as follows:</p> <ul> <li>Enhanced Security: Lightrun introduces an enterprise-grade security functionality with the RBAC feature and was designed to enhance both the security and governance of users and agents in your organization.</li> </ul> <ul> <li>Efficient Resource Allocation: By assigning roles and permissions with Lightrun RBAC, administrators can ensure that employees can perform their job functions while limiting access to unnecessary resources.</li> </ul> <ul> <li>Enforced Separation of Duties: RBAC can help organizations enforce the principle of separation of duties, which is critical for maintaining security and preventing fraud. With RBAC roles and permissions can be precisely assigned to distinct individuals.</li> </ul>"},{"location":"rbac/overview/#lightrun-rbac-practical-use-cases","title":"Lightrun RBAC practical use cases","text":"<p>The following are a number of use cases illustrating what you can achieve with the Lightrun RBAC feature:</p> <ul> <li>Replicate your organization\u2019s hierarchy in Lightrun: You can organize your Lightrun users into groups based on their position in your organization and assign group-based access. For example, you can create a group for your Product team and grant them Privileged access to all agent pools in your organization.</li> </ul> <ul> <li>Control access to Agents: By organizing your Lightrun agents into agent pools, you can regulate who has access and the extent of the access to the agent pools using groups and roles.</li> </ul> <ul> <li>Allow user groups in your organization to debug independently:Organizing your users and agents into groups and agent pools allows users to debug independently from other users. This streamlined approach makes scaling and managing of troubleshooting efforts easier, particularly as your team expands</li> </ul>"},{"location":"rbac/overview/#understanding-groups-roles-and-agent-pools","title":"Understanding groups, roles, and agent pools","text":"<p>To debug with Lightrun, you must have a Lightrun agent running alongside your application. As your organization and codebase grow, so will the number of agents and users. It is important to be able to effectively manage how users in your organization interact with the Lightrun agents running in your system. For new users in your organization to debug with Lightrun, they must be part of a group with access to an agent pool. The amount of access a group has to an agent pool depends on the role assigned to the group.</p> <p></p>"},{"location":"rbac/overview/#groups","title":"Groups","text":"<p>A group represents a group of users in Lightrun. With Lightrun groups, you can manage users that all need the same access and permissions to a particular resource, like an agent pool. For example, you can create a group for your DevOps team and grant privileged access to all DevOps-related agent pools to the group instead of adding permissions for each individual user. When you register a Lightrun account for your organization, you are assigned a default group that comprises every user in your organization. Users with a System admin role can create, manage, and delete groups. System admin users can also assign other users in their organization Group admin roles to help manage a group. </p>"},{"location":"rbac/overview/#lightrun-built-in-group-roles","title":"Lightrun built-in group roles","text":"<p>Lightrun group roles are predefined and are not editable. With Lightrun group roles, you can configure a Group's permissions to its agent pool. There are two group roles currently available in Lightrun:</p> <ul> <li>Standard Role: The standard role grants regular access to an agent pool. This includes creating Lightrun actions with the agents in the agent pool, full access to action data, etc.</li> </ul> <ul> <li>Privileged Role: The privileged role grants a group the ability to ignore agent quota limitations in addition to the permissions granted by the Standard role.</li> </ul> <p>In addition to the role assigned to a group, individual users can also be assigned elevated roles. Elevated roles grant group members more privileges than others. For example, a DevOps group might have a standard role, but a single user can be granted an elevated privileged role. This elevated privileged role allows them to perform certain actions, like ignoring the preset agent quota limitations, which other group members cannot.</p> <p>To learn more about groups, see Manage RBAC Groups.</p>"},{"location":"rbac/overview/#agent-pools","title":"Agent Pools","text":"<p>Agent Pools are isolated groups of agents with a unique name and an API key. Lightrun agents can only be assigned to a single agent pool; hence agent pools provide a convenient way to securely isolate a group of agents from other agents in your system.</p> <p>You are assigned a default agent pool when you create a Lightrun account for your organization. Lightrun users with a System admin or Group admin role can create new agent pools, or grant groups access to an existing agent pool. To add agents to an agent pool, use the API key assigned to the agent pool as your Lightrun secret key. The agent will be assigned to the desired agent pool by the Lightrun server.</p> <p>To learn more about Agent Pools:</p> <ul> <li>Get Started with Agent Pools </li> <li>Manage Agent Pools</li> </ul>"},{"location":"rbac/overview/#how-does-rbac-group-access-work","title":"How does RBAC group access work?","text":"<ol> <li> <p>By default, when users are added to the organization, they are assigned to the Default Group and have standard privileges to the default pool.</p> </li> <li> <p>To create additional granularity, you can create different groups who can have access to specific Agent Pools and can have different roles on the allocated agent pool.</p> </li> <li> <p>In addition to the role assigned to a group, individual users can also be assigned elevated roles. Elevated roles grant group members more privileges than others. A DevOps group might have a standard role, but a single user can be granted an elevated privileged role. This elevated privileged role allows them to perform certain actions, like ignoring the preset agent quota limitations, which other group members cannot.</p> </li> </ol> <p>Let\u2019s see an example, the following organization has 5 groups of users - Developers, TLs, DevOps, QAs and the Owner. All the users belong to the Default Group, have the standard role and have access to the Default Pool.</p> <ul> <li>Developers and TLs (Team Leads) are both assigned to the Dev-Non-pro group and are assigned Privileged roles to the Local and Staging Agent Pools. </li> </ul> <ul> <li>DevOps and QAs are members of different groups - DevOps and QA but both have Privileged roles on Staging.</li> </ul> <p></p>"},{"location":"rbac/overview/#whats-next","title":"What\u2019s next","text":"<ul> <li>Manage users with RBAC</li> <li>Manage groups with RBAC</li> <li>Agent Pools overview</li> <li>Manage Agent Pools</li> </ul>"},{"location":"rbac/pools/","title":"Agent Pools","text":"<p>Agent Pools are isolated groups of agents with a unique name and an API key. Lightrun agents can only be assigned to a single agent pool; hence agent pools provide a convenient way to securely isolate a group of agents from other agents in your system. </p> <p>You are assigned a default agent pool when you create a Lightrun account for your organization.  Lightrun users with System admin permissions can create new agent pools, and grant groups access to an agent pool. To add agents to an agent pool, use the API key assigned to the agent pool as your Lightrun secret key. The agent will be assigned to the desired agent pool by the Lightrun server.</p>"},{"location":"rbac/pools/#what-to-know-before-working-with-agent-pools","title":"What to know before working with agent pools","text":""},{"location":"rbac/pools/#groups-grant-users-access-to-agent-pools","title":"Groups grant users access to agent pools","text":"<p>Before a user can access agents in an agent pool, the user must be part of a group with access to that agent pool. The amount of access the user has to the agent pool depends on the role assigned to the group. There are two roles in Lightrun.</p> <ul> <li>Standard Role - The standard role grants regular access to an agent pool. This includes creating Lightrun actions with the agents in the agent pool, full access to action data, etc. </li> </ul> <ul> <li>Privileged Role - The privileged role grants a group the ability to ignore agent quota limitations in addition to the permissions granted by the Standard role. </li> </ul> <p>Note</p> <p>Lightrun roles are predefined and are not editable.</p> <p></p>"},{"location":"rbac/pools/#tags-and-custom-sources-are-unique-to-agent-pools","title":"Tags and Custom sources are unique to agent pools","text":"<p>Tags and Custom sources are unique to agent pools. Actions added to a tag in an agent pool will not reflect in another tag with the same name in a separate agent pool. Agent pools are fully isolated from one another.</p> <p></p>"},{"location":"release_notes/2022-releases/","title":"2021-2022 Release Notes","text":"<p>Here's where you'll find Lightrun release notes for 2022, including the main highlights, enhancements and fixes made to each version as it is released.</p> <p>To access the latest release notes, see Lightrun release notes.</p>"},{"location":"release_notes/2022-releases/#november-2022","title":"November 2022","text":""},{"location":"release_notes/2022-releases/#version-183","title":"Version 1.8.3","text":"<p>Release Date: November 29, 2022 (SaaS)</p>"},{"location":"release_notes/2022-releases/#features-changes","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#jetbrains-plugin","title":"JetBrains Plugin","text":"<ul> <li>We have increased the JetBrains plugin request timeout value. This increase will help to prevent client-side socket timeout errors thrown when a heavy snapshot hit is captured.</li> </ul> <ul> <li>The performance of the Jetbrains plugin Lightrun snapshot tool window has been improved. Snapshot hits load faster, and we have made it easier to navigate between hits in the improved tool window.</li> </ul>"},{"location":"release_notes/2022-releases/#node-agent","title":"Node Agent","text":"<ul> <li>We have fixed some security vulnerabilities found in the Node.js agent.</li> <li>We have fixed a bug in the Node.js agent lightrun serverless module that causes  AWS Lambda functions to crash.</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal","title":"Management Portal","text":"<ul> <li>We have made UI improvements to the Management Portal registration page.</li> <li>Editing a user role in the Lightrun Management Portal no longer requests a password change.</li> <li>The <code>Max Snapshot Variables Depth</code> service configuration property has been removed from the management portal.</li> </ul>"},{"location":"release_notes/2022-releases/#version-18","title":"Version 1.8","text":"<p>Release Date: November 6, 2022 (SaaS and On Premise)</p>"},{"location":"release_notes/2022-releases/#features-changes_1","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#general","title":"General","text":"<ul> <li>We have added a new Lightrun action source option called Custom Sources. A Custom Source is a dynamic group of agents and tags defined by a set of conditions, like a shared property. Using a Custom Source, you can create a dynamic list of similar agents and tags depending on the set conditions and simultaneously apply Lightrun Logs, Metrics, and Snapshots to the list. For more information, see Custom Sources.</li> </ul>"},{"location":"release_notes/2022-releases/#jetbrains-plugin_1","title":"JetBrains Plugin","text":"<ul> <li>We have made user interface improvements to the JetBrains plugin. Design enhancements have been made to the JetBrains plugin entry UI; you can now right-click on an error balloon to view more information about the error and search a Snapshot stack trace and variables.</li> </ul>"},{"location":"release_notes/2022-releases/#vscode-plugin","title":"VSCode Plugin","text":"<ul> <li>We have implemented a filter only my actions feature that allows you to display only actions created by you, and snapshot data are now default sorted by recently hit.</li> </ul>"},{"location":"release_notes/2022-releases/#jvm-agent","title":"JVM Agent","text":"<ul> <li>We have added support for Invoke Dynamic to the Lightrun JVM agent. This feature, when enabled, allows a user to add expressions or conditions whose bytecode contains invokedynamic instruction to a Lightrun action. This includes Java expressions and conditions containing Lambda expressions and String concatenations using the \u2018+\u2019 character. For more information, see Invokedynamic.</li> </ul> <ul> <li>The exception monitoring feature has been removed from the Lightrun JVM agent.</li> <li>The JVM agent is now compatible with custom log handlers like the SLF4J handler. For more information, see the JVM agent configuration.</li> </ul>"},{"location":"release_notes/2022-releases/#python-agent","title":"Python Agent","text":"<ul> <li>The Lightrun Python agent now supports Python 3.10.0 on Alpine Linux.</li> <li>We have added a new Python agent configuration property called <code>max_snapshot_buffer_size_in_bytes</code>. This property allows users to control the Lightrun Python agent snapshot buffer size. For more information, see Python agent configuration.</li> </ul>"},{"location":"release_notes/2022-releases/#node-agent_1","title":"Node Agent","text":"<ul> <li>We have added a Node.js agent module called lightrun_serverless for running Lightrun with Serverless Frameworks. The Lightrun serverless module wraps around serverless functions and ensures the Lightrun agent is enabled before starting the serverless function. It also disables the Lightrun agent when the function call finishes. For more information, see Serverless Functions.</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_1","title":"Management Portal","text":"<ul> <li>UI/UX improvements for the Management portal.</li> </ul> <ul> <li>We have added a new Service configuration property called <code>Max Snapshot Variables Depth</code>. This property allows users with <code>ROLE_MANAGER</code>permissions to configure the amount of data displayed in snapshot variables directly from their Management Portal. For more information, see Service configuration.</li> </ul> <ul> <li>We have added more events to the Lightrun audit logs. For more information, see Audit System Use.</li> </ul> <ul> <li>We have added the Lightrun Python agent Windows installation script to the On-Prem web UI.</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fixed incorrect Typescript agent installation instructions in the Management Portal.</li> <li>Fixed clicking on a snapshot frame navigates users to a different class. </li> <li>Fixed Java agent <code>lightrun_extra_class_path</code> configuration not working in windows.</li> <li>Fixed Python serverless decorator not working.</li> <li>Fixed error messages do not appear for expressions with errors in the VSCode plugin.</li> <li>Fixed Python agent snapshot containing variables from third-party packages.</li> <li>Fixed security vulnerabilities in the Lightrun server.</li> <li>Fixed Lightrun actions not default sorted by newer actions in plugins.</li> </ul>"},{"location":"release_notes/2022-releases/#august-2022","title":"August 2022","text":""},{"location":"release_notes/2022-releases/#version-170","title":"Version 1.7.0","text":"<p>Release Date: August 29, 2022 (SaaS)</p>"},{"location":"release_notes/2022-releases/#features-changes_2","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#general_1","title":"General","text":"<ul> <li> <p>We have added a new Dynamic Logs and Metrics configuration property called <code>Target</code> that allows you to configure where you want to view your action output. There are two configuration options.</p> <ul> <li>Stdout - action output is routed only to the application's standard output.</li> <li>Plugin - action output appears in the Lightrun Console, Lightrun Management Portal, and configured integrations like Slack, Prometheus, etc.</li> </ul> <p>Also, the current agent routing option has been deprecated. For more information, see action target routing.</p> </li> </ul> <ul> <li>The Lightrun Audit Log has been improved. The audit log format has been enhanced to include more system-level configuration-related actions, and events unrelated to auditing purposes have been removed from the audit logs. We have also added an option to export audit log events into an Amazon S3 bucket in a Syslog message format for further analysis.</li> </ul> <ul> <li>The JetBrains Lightrun Snapshot tool window and the VSCode Lightrun Console now display snapshot watch expressions before other variables. This change will make exploring your snapshot stack trace and variables in your IDE easier.</li> </ul> <ul> <li>UI/UX improvements for the new action forms.<ul> <li>Implement autofocus on the Format field.</li> <li>Implement support for recently used agents and tags.</li> </ul> </li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_2","title":"Management Portal","text":"<ul> <li>UI/UX improvements for the Management portal.</li> </ul> <ul> <li>We have added a new Service configuration property called <code>Plugin send source full path</code>. This property enables users with <code>ROLE_MANAGER</code> permissions to enable or disable the Lightrun Plugin <code>Send Source Full Path</code> option directly in their Management Portal. For more information, see Service configuration.</li> </ul>"},{"location":"release_notes/2022-releases/#python-agent_1","title":"Python Agent","text":"<ul> <li>The Lightrun Python agent now supports Python 3.10.0.</li> </ul> <ul> <li>The Lightrun Python agent now supports Windows OS! You can now create Lightrun actions (dynamic logs, metrics, and snapshots) using the Python agent directly on your Windows PC. For more information, see the Python agent system requirements.</li> </ul> <ul> <li>We have added a new Python agent decorator called <code>lightrun_serverless</code> for running Lightrun with Serverless Frameworks like AWS Lambda. The Lightrun serverless decorator wraps around serverless functions and ensures that the Lightrun agent is enabled before starting the serverless function. It also disables the Lightrun agent when the function call finishes so that it can handle the next call to the serverless function. For more information, see Serverless Functions.</li> </ul>"},{"location":"release_notes/2022-releases/#node-agent_2","title":"Node Agent","text":"<ul> <li>Lightrun plugins now send the full path of a Javascript file to the Lightrun Node.js agent instead of the filename only. This option is enabled by default and helps to solve the Node.js agent <code>Multiple files match the path specified</code>. For more information, see the Node.js agent troubleshooting guide.</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fixed Python agent crashes when creating or removing breakpoints.</li> <li>Fixed Node.js agent disappearing from up and running pods.</li> <li>Fixed Lightrun Server URL empty when VSCode plugin is downloaded from the VSCode marketplace.</li> </ul>"},{"location":"release_notes/2022-releases/#july-2022","title":"July 2022","text":""},{"location":"release_notes/2022-releases/#version-160","title":"Version 1.6.0","text":"<p>Release Date: July 19, 2022 (SaaS and On Premise)</p>"},{"location":"release_notes/2022-releases/#features-changes_3","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#node-agent_3","title":"Node Agent","text":"<ul> <li>Previously, the Node.js agent quota had a default <code>MaxConditionCost</code> of <code>0.01</code> and a <code>MaxCPUCost</code> of <code>0.03</code>. The default values have now been increased to <code>1.0</code>  for  <code>MaxConditionCost</code> and <code>1.0</code> for <code>MaxCPUCost</code>. For more information, see Node.js agent quota configuration. </li> </ul>"},{"location":"release_notes/2022-releases/#python-agent_2","title":"Python Agent","text":"<ul> <li>Previously, the Python agent quota had a default <code>max_condition_cost</code> of <code>0.1</code> and a <code>max_log_cpu_cost</code> of <code>0.1</code>. The default values have now been increased to <code>1.0</code> for  <code>max_condition_cost</code> and <code>1.0</code> for <code>max_log_cpu_cost</code>. For more information, see Python agent configuration parameters.</li> </ul> <ul> <li>Lightrun plugins now send the full path of a Python file to the Lightrun Python agent instead of the filename only. This option is enabled by default and helps to solve the Python agent <code>Multiple modules matching %</code> error. For more information, see Python agent troubleshooting guide.</li> </ul>"},{"location":"release_notes/2022-releases/#jvm-agent_1","title":"JVM Agent","text":"<ul> <li>Previously, the JVM agent quota had a default <code>max_condition_cost</code> of <code>0.1</code> and a <code>max_log_cpu_cost</code> of <code>0.1</code>. The default values have now been increased to <code>1.0</code> for <code>max_condition_cost</code> and <code>1.0</code> for <code>max_log_cpu_cost</code>. For more information, see JVM agent flags configuration.</li> </ul>"},{"location":"release_notes/2022-releases/#github1s-and-githubdev-support","title":"GitHub1s and GitHub.dev support","text":"<ul> <li>The Lightrun VSCode.dev plugin now supports GitHub1s and GitHub.dev web editors. For more information, see Lightrun for VSCode.dev. </li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_3","title":"Management Portal","text":"<ul> <li>We have added a service configuration property called Source Version Warnings Enabled that allows users with <code>ROLE_MANAGER</code> permissions to disable IDE <code>source version warnings</code> to all users in their organization. For more information, see Service configuration.</li> </ul> <ul> <li>UI/UX improvements to the Multi-tenant SSO user flows.</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fixed VSCode plugin expired access token not automatically refreshing.</li> <li>Fixed new users are assigned different company IDs when they register with Google in their invite link.</li> <li>Fixed <code>lightrun.enable</code> not working when using the Python multiprocessing library in fork mode.</li> </ul> <p>--</p>"},{"location":"release_notes/2022-releases/#june-2022","title":"June 2022","text":""},{"location":"release_notes/2022-releases/#version-153","title":"Version 1.5.3","text":"<p>Release Date: June 19, 2022 (SaaS and On Premise)</p>"},{"location":"release_notes/2022-releases/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fixed Windows OS Node.js agent installation instructions on the Management Portal.</li> <li>Fixed disabled metrics action in the Lightrun submenu when you right-click on the Lightrun action gutter icons in the JetBrains IDE.</li> </ul>"},{"location":"release_notes/2022-releases/#may-2022","title":"May 2022","text":""},{"location":"release_notes/2022-releases/#version-15","title":"Version 1.5","text":"<p>Release Date: May 30, 2022 (SaaS and On Premise)</p>"},{"location":"release_notes/2022-releases/#features-changes_4","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#web-ides","title":"Web IDEs","text":"<ul> <li>Lightrun now supports web IDEs, including VSCode for the web, VSCode code server, and JetBrains Projector. See Lightrun for vscode.dev and Lightrun for code server for more information.</li> </ul>"},{"location":"release_notes/2022-releases/#jetbrains-plugin_2","title":"JetBrains Plugin","text":"<ul> <li>We have made user interface improvements to the JetBrains plugin. The Lightrun and Lightrun Snapshot tool windows have been redesigned to improve user engagement and stickiness. The new updates are currently in private beta and will gradually roll out over the next few weeks. See the new New JetBrains plugin quick tour for more information.</li> </ul>"},{"location":"release_notes/2022-releases/#python-agent_3","title":"Python Agent","text":"<ul> <li>The python agent now supports Apple silicon macs. This means that you can now create Lightrun actions (dynamic logs, and snapshots) using the Python agent directly in your M1, M1 Pro, or M1 max MacBooks.  See the python agent system requirements for more information.</li> </ul> <ul> <li>We have added support for specifying <code>base_dir</code> parameters in the python agent configuration. Files in the directories specified in the python <code>base_dir</code> configuration parameter will have a higher priority in case of name conflicts. This parameter is very helpful in solving the python <code>Multiple modules matching %</code> error. See the python agent configuration and python troubleshooting guide for more information.</li> </ul>"},{"location":"release_notes/2022-releases/#jvm-agent_2","title":"JVM Agent","text":"<ul> <li>The JVM agent now supports Apple silicon macs. This means that you can now create Lightrun actions (dynamic logs, snapshots, and metrics) using the JVM agent directly in your M1, M1 Pro, or M1 max MacBooks.  See the JVM agent system requirements for more information.</li> </ul> <ul> <li>Lightrun's JVM agent now supports ASM9 Java bytecode.</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_4","title":"Management Portal","text":"<ul> <li>We have added a service configuration property called Default Piping that can be used to configure an organization's default agent output routing in the Management portal. See Service configuration for more information.</li> </ul> <ul> <li>UI improvements for the Management portal.</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fixed security vulnerabilities in Lightrun server.</li> <li>Fixed authentication issues in the JetBrains plugin.</li> <li>Improved agent performance under stress conditions (10,000 agents)</li> <li>Fixed absent gutter icon in VSCode IDE when an action FILENAME comprises the folder name, i.e., folder/filename, not the file name alone.</li> </ul>"},{"location":"release_notes/2022-releases/#version-146","title":"Version 1.4.6","text":"<p>Release Date: May 3, 2022 (SaaS)</p>"},{"location":"release_notes/2022-releases/#features-changes_5","title":"Features &amp; Changes","text":"<p>Node Agent <p>Added the ability to insert Lightrun actions into Node.js Third-party modules. See extraPaths for more information.</p>"},{"location":"release_notes/2022-releases/#bug-fixes_5","title":"Bug Fixes","text":"<p>Node Agent</p> <ul> <li>Fixed wrong import syntax in Node.js agent package.</li> </ul>"},{"location":"release_notes/2022-releases/#april-2022","title":"April 2022","text":""},{"location":"release_notes/2022-releases/#version-145","title":"Version 1.4.5","text":"<p>Release Date: April 5, 2022 (SaaS and On Premise)</p> <p>General <ul> <li>Fixes of Security vulnerabilities in Lightrun Server</li> </ul>"},{"location":"release_notes/2022-releases/#march-2022","title":"March 2022","text":""},{"location":"release_notes/2022-releases/#version-144","title":"Version 1.4.4","text":"<p>Release Date: March 24, 2022 (SaaS)</p>"},{"location":"release_notes/2022-releases/#bug-fixes_6","title":"Bug Fixes","text":"<p>JetBrains plugin</p> <ul> <li>Fixed Snapshot tab title is showing \"Snapshot\" instead of id+filename:line</li> <li>Fixed exception that occurs in some cases after user login</li> <li>Fixed pinned agent disappeared from tool window after insert tagged</li> </ul> <p>Node Agent <ul> <li>Fixed Security vulnerability in node agent</li> </ul>"},{"location":"release_notes/2022-releases/#version-143","title":"Version 1.4.3","text":"<p>Release Date: March 15, 2022 (SaaS)</p>"},{"location":"release_notes/2022-releases/#features-changes_6","title":"Features &amp; Changes","text":"<p>Management Portal</p> <p>UI enhancements </p> <p>General</p> <ul> <li>Fixes of Security vulnerabilities in Lightrun Server </li> <li>Fixed log4j vulnerability in the Node.js agent</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Windows Agent: Does not work if there are spaces in the path</li> </ul>"},{"location":"release_notes/2022-releases/#version-140","title":"Version 1.4.0","text":"<p>Release Date: March 02, 2022 (SaaS and On Premise)</p>"},{"location":"release_notes/2022-releases/#features-changes_7","title":"Features &amp; Changes","text":"<p>JVM Agent <ul> <li>Windows Java agent is now GA!</li> </ul> <p>Python Agent</p> <ul> <li>Python 2.7 MAC agent support</li> </ul> <p>VSCode Plugin</p> <ul> <li>Lightrun VSCode extension is now GA!</li> </ul> <p>Management Portal</p> <ul> <li>New UI design for the management portal</li> <li>Onboarding flow enhancements </li> </ul> <p>General</p> <ul> <li>Change agent default retention to 10 days (instead of 2 days).</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Multiple bug fixes and improvements for IntelliJ plug-in, Node &amp; Python agents.</li> </ul>"},{"location":"release_notes/2022-releases/#january-2022","title":"January 2022","text":""},{"location":"release_notes/2022-releases/#version-133","title":"Version 1.3.3","text":"<p>Release Date: January 19, 2022</p>"},{"location":"release_notes/2022-releases/#features-changes_8","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#jvm-agent_3","title":"JVM Agent","text":"<ul> <li>Java support for versions 14 to 17</li> </ul>"},{"location":"release_notes/2022-releases/#python-agent_4","title":"Python Agent","text":"<ul> <li>AWS lambda function support</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_5","title":"Management Portal","text":"<ul> <li>New successfully authenticated page when signing in from a plugin</li> <li>Mobile support for sign in &amp; sign up pages</li> <li>Increased the character limit for PPI reduction</li> </ul>"},{"location":"release_notes/2022-releases/#december-2021","title":"December 2021","text":""},{"location":"release_notes/2022-releases/#version-130","title":"Version 1.3.0","text":"<p>Release Date: December 28, 2021</p>"},{"location":"release_notes/2022-releases/#features-changes_9","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#new-vscode-plugin","title":"[NEW] VSCode Plugin","text":"<ul> <li>Lightrun VSCode extension (beta) - initial release</li> </ul>"},{"location":"release_notes/2022-releases/#jvm-agent_4","title":"JVM Agent","text":"<ul> <li>Agent is removed faster when application exits</li> </ul>"},{"location":"release_notes/2022-releases/#python-agent_5","title":"Python Agent","text":"<ul> <li><code>*.pyc</code> files support</li> <li>Agent is removed faster when application exits</li> </ul>"},{"location":"release_notes/2022-releases/#nodejs-agent","title":"Node.js Agent","text":"<ul> <li>Agent is removed faster when application exits</li> </ul>"},{"location":"release_notes/2022-releases/#general_2","title":"General","text":"<ul> <li>New audit event for user deletion</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_9","title":"Bug Fixes","text":""},{"location":"release_notes/2022-releases/#jetbrains-plugin_3","title":"JetBrains plugin","text":"<ul> <li>Fixed agents dropdown scroll when creating new action</li> <li>Fixed pinned agents minor bugs</li> <li>Tag removal from other sources is now reflected in the plugin</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_6","title":"Management Portal","text":"<ul> <li>Fixed Snapshots sorting</li> </ul>"},{"location":"release_notes/2022-releases/#version-123","title":"Version 1.2.3","text":"<p>Release Date: December 13, 2021</p>"},{"location":"release_notes/2022-releases/#features-changes_10","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#python-agent_6","title":"Python Agent","text":"<ul> <li>Added <code>lightrun_class_path</code> configuration option to limit resource indexing</li> <li>Added the ability to change Lightrun default logger</li> <li>Added wait for Lightrun initialization option: <code>lightrun_wait_for_init</code> parameter allowing the agent sufficient time to spin up and get all actions before the code is executed</li> </ul>"},{"location":"release_notes/2022-releases/#nodejs-agent_1","title":"Node.js Agent","text":"<ul> <li>AWS lambda function support</li> <li>Added wait for Lightrun initialization option: <code>lightrunWaitForInit</code> and <code>lightrunInitWaitTimeMs</code> parameters allowing the agent sufficient time to spin up and get all actions before the code is executed</li> </ul>"},{"location":"release_notes/2022-releases/#general_3","title":"General","text":"<ul> <li>Increased the number of agents and seats for the Lightrun community version</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_10","title":"Bug Fixes","text":""},{"location":"release_notes/2022-releases/#jvm-agent_5","title":"JVM Agent","text":"<ul> <li>Source version correlation fixed</li> </ul>"},{"location":"release_notes/2022-releases/#nodejs-agent_2","title":"Node.js Agent","text":"<ul> <li>Performance improvements in active mode</li> </ul>"},{"location":"release_notes/2022-releases/#jetbrains-plugin_4","title":"JetBrains Plugin","text":"<ul> <li>Last used agent/tag is set as default value</li> <li>An exception was thrown when tagged Snapshot action was clicked</li> <li>Agent/tag selection list scroll</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_7","title":"Management Portal","text":"<ul> <li>Fixed Snapshots sorting by date</li> </ul>"},{"location":"release_notes/2022-releases/#november-2021","title":"November 2021","text":""},{"location":"release_notes/2022-releases/#version-122","title":"Version 1.2.2","text":"<p>Release Date: November 14, 2021</p>"},{"location":"release_notes/2022-releases/#features-changes_11","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#nodejs-agent_3","title":"Node.js Agent","text":"<ul> <li>Performance improvements in idle mode</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_11","title":"Bug Fixes","text":""},{"location":"release_notes/2022-releases/#jetbrains-plugin_5","title":"JetBrains Plugin","text":"<ul> <li>Backward compatibility with v1.0 agents</li> </ul>"},{"location":"release_notes/2022-releases/#general_4","title":"General","text":"<ul> <li>Detaching an agent threw an exception</li> </ul>"},{"location":"release_notes/2022-releases/#october-2021","title":"October 2021","text":""},{"location":"release_notes/2022-releases/#version-120","title":"Version 1.2.0","text":"<p>Release Date: October 27, 2021</p>"},{"location":"release_notes/2022-releases/#features-changes_12","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#jvm-agent_6","title":"JVM Agent","text":"<ul> <li>Windows operating system support (preview)</li> <li>Show informative error when can't acquire JVM capabilities</li> <li>Extended expression now supports custom length through agent configuration</li> </ul>"},{"location":"release_notes/2022-releases/#python-agent_7","title":"Python Agent","text":"<ul> <li>Lightrun now supports Python applications, including Django, Flask and Apache Airflow frameworks. Add logs and snapshots to your Python application at runtime without the need for restarts or redeployments</li> </ul>"},{"location":"release_notes/2022-releases/#nodejs-agent_4","title":"Node.js Agent","text":"<ul> <li>Lightrun now supports Node.js applications, including Express and Koa frameworks. Add logs and snapshots to your Node.js application at runtime without the need for restarts or redeployments</li> </ul>"},{"location":"release_notes/2022-releases/#jetbrains-plugin_6","title":"JetBrains Plugin","text":"<ul> <li>JetBrains plugin now supports PyCharm IDE</li> <li>JetBrains plugin now supports WebStorm IDE</li> <li>Kotlin is now supported in IntelliJ IDE</li> <li>Allow log piping per action through Lightrun CLI</li> <li>Added pagination to agents list</li> <li>Max agents to display is configurable through settings</li> <li>Added support for .class files</li> <li>Improved performance</li> <li>JavaScript code completion when adding actions</li> <li>Add the option to test the server URL</li> <li>Primary agent/tag is selected when adding a new action</li> <li>Last used agent/tag is selected by default when adding a new action, if there is no pinned agent/tag</li> <li>Reduced the number of plugin refreshes</li> <li>Show \"View only\" agents after license limit is reached</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_8","title":"Management Portal","text":"<ul> <li>Added pagination to agents table</li> <li>PII redaction &amp; blacklist pattern tester</li> <li>Minor styling upgrade</li> <li>Show \"View only\" agents after license limit is reached</li> <li>Show plan details - agents/seats count</li> </ul>"},{"location":"release_notes/2022-releases/#general_5","title":"General","text":"<ul> <li>Support multiple Lightrun concurrent agents at large scale</li> <li>Improved Prometheus endpoint query time</li> <li>Server license validation</li> <li>CLI support for snapshot expressions</li> <li>Autofill user email for invited users</li> <li>Upgrade KeyCloak version to 13.0</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_12","title":"Bug Fixes","text":""},{"location":"release_notes/2022-releases/#jvm-agent_7","title":"JVM Agent","text":"<ul> <li>Log failure when printing counter stats</li> </ul>"},{"location":"release_notes/2022-releases/#jetbrains-plugin_7","title":"JetBrains plugin","text":"<ul> <li>Exceptions are shown only after second refresh</li> <li>Couldn't expand snapshot data</li> <li>Couldn't close embedded browser window</li> <li>Couldn't add action to programming languages that are not supported in source versioning</li> <li>Plugin disconnects when left-clicking the status button</li> <li>Snapshot tab is not selected when loading a snapshot from file</li> <li>Clicking 'only my logs' threw an exception</li> <li>IDE froze on logout when network is disconnected</li> <li>Actions were hidden when filtering agents</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_9","title":"Management Portal","text":"<ul> <li>Audit table sort</li> <li>Collect logs more than once throws an exception</li> <li>User was able to deactivate his own user</li> <li>Fix toggle button in edit user dialog</li> <li>Google translate was translating code instructions</li> </ul>"},{"location":"release_notes/2022-releases/#general_6","title":"General","text":"<ul> <li>DB timestamps resolution</li> <li>PII redaction wasn't working in snapshot frames</li> <li>Agent with empty API Key threw an exception</li> <li>Agent was unable to get hostname from Alpine Docker</li> </ul>"},{"location":"release_notes/2022-releases/#april-2021","title":"April 2021","text":""},{"location":"release_notes/2022-releases/#version-110","title":"Version 1.1.0","text":"<p>Release Date: April 18, 2021</p>"},{"location":"release_notes/2022-releases/#features-changes_13","title":"Features &amp; Changes","text":""},{"location":"release_notes/2022-releases/#jvm-agent_8","title":"JVM Agent","text":"<ul> <li>Improved resource indexing</li> </ul>"},{"location":"release_notes/2022-releases/#jetbrains-plugin_8","title":"JetBrains Plugin","text":"<ul> <li>Added the ability to filter logs in the Lightrun console, based on agent ID</li> <li>Added copy log lines from Lightrun console to clipboard</li> <li>Minor design changes</li> </ul>"},{"location":"release_notes/2022-releases/#management-portal_10","title":"Management Portal","text":"<ul> <li>New login UI</li> <li>Added Lightrun Community version, supporting a single agent and a single seat</li> <li>Allow editing PII redaction patterns</li> <li>Added custom error pages</li> <li>Every user can see Entities pages in the Management Portal</li> </ul>"},{"location":"release_notes/2022-releases/#general_7","title":"General","text":"<ul> <li>Added integration with Sentry</li> <li>Agents now report host's resources</li> <li>Added KeyCloak brute force protection</li> <li>Token is now stored in HTTP cookie instead of browser's local storage</li> <li>Agent reports data in batches to improve performance</li> </ul>"},{"location":"release_notes/2022-releases/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>User couldn't change password when signing up with Google</li> <li>Authentication didn't redirect to the correct page</li> <li>User couldn't scroll error dialogs</li> <li>Default action expiration value was wrong</li> <li>Agent info dialog opened in a different IDE window</li> </ul>"},{"location":"release_notes/2023-releases/","title":"2023 Release Notes","text":"<p>Here's where you'll find Lightrun release notes for 2023, including the main highlights, enhancements and fixes made to each version as it is released.</p> <p>To access the latest release notes, see Lightrun release notes.</p>"},{"location":"release_notes/2023-releases/#december-2023","title":"December 2023","text":""},{"location":"release_notes/2023-releases/#version-1221","title":"Version 1.22.1","text":"<p>Release Date: December 31, 2023 (On-Premise)</p> <p>Important</p> <p>This On-Premise release incorporates features introduced in the preceding SaaS versions 1.20.x, 1.21.x as well as 1.22.0.</p>"},{"location":"release_notes/2023-releases/#feature-enhancements","title":"Feature Enhancements","text":"<p>PII Redaction Major Enhancements</p> <ul> <li>Dedicated Library Containing Lightrun Predefined Regex Patterns<p>Introducing the dedicated PII (Personal Identifiable Information) Library for streamlined Regex pattern usage. This library was meticulously curated based on industry requirements, offering a comprehensive set of major Regex patterns. This eliminates the need for users to create their own patterns, saving time and effort. The library provides tested patterns, ensuring reliability in PII redaction. Once selected, these patterns are integrated into the user's set of PII rules/templates, enhancing convenience. The Regex patterns are organized according to main categories such as Credit Cards, Financials, General, and Network and will be updated on a regular basis. For more information, see Set a PII Redaction Pattern using Predefined Patterns. </p> </li> </ul> <ul> <li>Compliance with RE2 Regular Expression Syntax<p>We've enhanced the accuracy of PII Redaction by aligning patterns with Google\u2019s RE2 Regular Expression syntax. This ensures a standardized approach to redacting sensitive data across all supported runtimes, enhancing the overall reliability of the redaction process. This change ensures that patterns are written once and apply to all supported runtime languages (Java, .NET, Node.js, and Python), but it is highly recommended to validate the functionality of PII Redaction for your desired patterns to ensure proper behavior.</p> </li> </ul> <p>JetBrains Plugin: Expanded Error Handling for Node.js</p> <p>We're excited to introduce an enhancement tailored specifically for our Node.js developers \u2013 Expanded Error Handling for Node.js. As part of our ongoing commitment to delivering top-notch tooling for Node.js, this release builds upon the recent advancements made for Java.</p> <p>The Error Details module in the JetBrains IDE, provides a focused view of errors encountered during Node.js development. Easily access the Error Details module by right-clicking on the action icon in the editor gutter and selecting the Info option. This is particularly useful for identifying errors when placing Lightrun actions on non-executable lines of Node.js code. Included in the Error Details module are Troubleshooting How-Tos, providing targeted solutions for common Node.js development issues, such as source mismatches and file location problems.</p>"},{"location":"release_notes/2023-releases/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1220","title":"Version 1.22.0","text":"<p>Release Date: 20 December 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#feature-enhancements_1","title":"Feature Enhancements","text":"<p>PII Redaction Major Enhancements</p> <ul> <li>Dedicated Library Containing Lightrun Predefined Regex Patterns</li> </ul> <p>the dedicated PII (Personal Identifiable Information) Library for streamlined Regex pattern usage. This library was meticulously curated based on industry requirements, offering a comprehensive set of major Regex patterns. This eliminates the need for users to create their own patterns, saving time and effort. The library provides tested patterns, ensuring reliability in PII redaction. Once selected, these patterns are integrated into the user's set of PII rules/templates, enhancing convenience. The Regex patterns are organized according to main categories such as Credit Cards, Financials, General, and Network and will be updated on a regular basis. For more information, see Set a PII Redaction Pattern using Predefined Patterns. </p> <ul> <li>Compliance with RE2 Regular Expression Syntax</li> </ul> <p>We've enhanced the accuracy of PII Redaction by aligning patterns with Google\u2019s RE2 Regular Expression syntax. This ensures a standardized approach to redacting sensitive data across all supported runtimes, enhancing the overall reliability of the redaction process. This change ensures that patterns are written once and apply to all supported runtime languages (Java, .NET, Node.js, and Python), but it is highly recommended to validate the functionality of PII Redaction for your desired patterns to ensure proper behavior.</p> <p>JetBrains Plugin: Expanded Error Handling for Node.js</p> <p>We're excited to introduce an enhancement tailored specifically for our Node.js developers \u2013 Expanded Error Handling for Node.js. As part of our ongoing commitment to delivering top-notch tooling for Node.js, this release builds upon the recent advancements made for Java.</p> <p>The Error Details module in the JetBrains IDE, provides a focused view of errors encountered during Node.js development. Easily access the Error Details module by right-clicking on the action icon in the editor gutter and selecting the Info option. This is particularly useful for identifying errors when placing Lightrun actions on non-executable lines of Node.js code. Included in the Error Details module are Troubleshooting How-Tos, providing targeted solutions for common Node.js development issues, such as source mismatches and file location problems.</p>"},{"location":"release_notes/2023-releases/#november-2023","title":"November 2023","text":""},{"location":"release_notes/2023-releases/#version-1210","title":"Version 1.21.0","text":"<p>Release Date: December 3, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-120","title":"Version 1.20","text":"<p>Release Date: November 19, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-120_1","title":"Version 1.20","text":"<p>Release Date: Novemeber 19, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1192","title":"Version 1.19.2","text":"<p>Release Date: November 19, 2023 (On-Premise)</p> <p>Important</p> <p>This On-Premise release incorporates features introduced in the preceding versions 1.17.x, 1.18.x as well as 1.19.0, 1.19.1, and 1.19.2 (SaaS).</p>"},{"location":"release_notes/2023-releases/#feature-enhancements_2","title":"Feature Enhancements","text":"<p>Java Agent: Added Wildcard Support for Class Path Indexing Parameters</p> <p>The latest update to the Java Agent introduces - Wildcard Support for Class Path Indexing Parameters. This enhancement empowers users to exercise finer control over the indexing of Java classes within Lightrun. With this new capability, you have the ability to specify an absolute path with a range of filenames using wildcard characters that adhere to glob patterns. As a result, determining which Java classes can be excluded from indexing is now an effortless task. For more information, see Java Agent Configuration.</p> <p>JetBrains Plugin: Error Handling Enhancements</p> <p>Customer feedback is invaluable to us, and in this release, we have introduced an intuitive Error Details module in the JetBrains IDE. This is helpful in case you encounter an error while placing a Lightrun action, for example, when an action is placed on a non-executable line of code. It is now accessible by right-clicking on the action icon located in the editor gutter and selecting the Info option. This information is tagged by an exclamation mark and includes a clear error description, along with actionable guidance on how to resolve the issue. </p> <p>Another example of a type of error that is addressed in the Error Details module, pertains to source mismatches between a file and agent sources, or when a file cannot be found. </p> <p>We have also integrated a set of Troubleshooting How-Tos into the Error Details module. This enhancement empowers you to address issues with precision, guided by specific problem detection.</p> <p></p>"},{"location":"release_notes/2023-releases/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fixed security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1191","title":"Version 1.19.1","text":"<p>Release Date: November 8, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#bug-fix","title":"Bug Fix","text":"<ul> <li>Fixed an internal bug in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1190","title":"Version 1.19.0","text":"<p>Release Date: November 5, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#feature-enhancements_3","title":"Feature Enhancements","text":"<p>JetBrains Plugin: Troubleshooting How-Tos Now Available in Your Plugin</p> <p>We're excited to introduce Troubleshooting How-Tos integrated into the Error Details module of your JetBrains Plugin. This enhancement empowers you to address issues with precision, guided by specific problem detection.</p> <p></p> <p>JetBrains Plugin: GoTo Code Line Enhancement</p> <p>The Lightrun JetBrains plugin's Go-to-code line capabilities have been improved. You can now navigate to an action\u2019s code line from the Lightrun Console, Actions tab, and Snapshot Hits tab; we\u2019ve also added the ability to select a code line if an action returns multiple options. To learn more about the Lightrun JetBrains plugin, see the JetBrains plugin quick tour guide.</p>"},{"location":"release_notes/2023-releases/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related to SSO login, whereby logging into SSO for the first time with a registered account displayed the registration page.</li> </ul>"},{"location":"release_notes/2023-releases/#october-2023","title":"October 2023","text":""},{"location":"release_notes/2023-releases/#version-1181","title":"Version 1.18.1","text":"<p>Release Date: October 29, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#feature-enhancement","title":"Feature Enhancement","text":"<p>Java Agent: Added Wildcard Support for Class Path Indexing Parameters</p> <p>The latest update to the Java Agent introduces - Wildcard Support for Class Path Indexing Parameters. This enhancement empowers users to exercise finer control over the indexing of Java classes within Lightrun. With this new capability, you have the ability to specify an absolute path with a range of filenames using wildcard characters that adhere to glob patterns. As a result, determining which Java classes can be excluded from indexing is now an effortless task. For more information, see Java Agent Configuration.</p>"},{"location":"release_notes/2023-releases/#version-1180","title":"Version 1.18.0","text":"<p>Release Date: Oct 22, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1170","title":"Version 1.17.0","text":"<p>Release Date: October 8, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-and-enhancements","title":"Features and Enhancements","text":"<p>JetBrains Plugin: Error Handling Enhancements</p> <p>Customer feedback is invaluable to us, and in this release, we have introduced an intuitive Error Details module in the Jetbrains IDE. This is helpful in case you encounter an error while placing a Lightrun action, for example, when an action is placed on a non-executable line of code. It is now accessible by right-clicking on the action icon located in the editor gutter and selecting the Info option. This information is tagged by an exclamation mark and includes a clear error description, along with actionable guidance on how to resolve the issue. </p> <p>Another example of a type of error that is addressed in the Error Details module, pertains to source mismatches between a file and agent sources, or when a file cannot be found. </p>"},{"location":"release_notes/2023-releases/#version-1161","title":"Version 1.16.1","text":"<p>Release Date: October 12, 2023 (On-Premise)</p> <p>Important</p> <p>This On-Premise release incorporates features introduced in the preceding versions 1.15.x and 1.16.0 (SaaS).</p>"},{"location":"release_notes/2023-releases/#highlights","title":"Highlights","text":"<p>Dedicated PII Redaction Templates Per Agent Pool</p> <p>With the introduction of PII Redaction Templates, Lightrun now supports additional granularity for utilizing PII Redaction effectively. You can either establish a single default PII Redaction template to be applied to all your agents or alternatively create and assign distinct PII Redaction templates for different agent pools.  For example, if you would like to apply PII Redaction only on a Production environment and not on Development or Staging.</p> <p>To help you get started with configuring your PII redaction on Agent Pools, we provide a single Default template on the PII Redaction page which serves as a starting point for creating your templates. Note that it does not contain any predefined patterns and is not assigned to any agent pools. For more information, see Assigning PII Redaction templates to Agent Pools.</p> <p>VSCode and JetBrains Plugins: Action Creation on Multiple Sources</p> <p>We are excited to announce that you can now select multiple agents and tags as a single source when creating an action directly from your IDE. This option lets you simultaneously apply an action to a custom group of agents and tags, which improves your plugin experience and makes it easier to debug with multiple agents and tags. To learn more, see selecting multiple sources in VSCode and selecting multiple sources in JetBrains. </p>"},{"location":"release_notes/2023-releases/#feature-enhancements_4","title":"Feature Enhancements","text":"<p>JetBrains Plugin: Copy and Paste Actions Enhancement</p> <p>We offer an easy and more efficient way to insert Lightrun actions using 'Copy and Paste' within your JetBrains IDE, which allows developers to easily reuse existing actions in multiple locations within your code. This new functionality applies to all Lightrun action types, including Lightrun snapshots, metrics, and logs. It simplifies the task of reviving expired actions or duplicating actions which have non-trivial conditions and/or watch expressions.</p> <p>JetBrains Plugin: Edit Metrics Mode Enhancement</p> <p>You can smoothly edit your existing metrics by simply right-clicking on the metric icon in the editor gutter and selecting the 'Edit' option. This allows you to make adjustments to your metrics actions as needed, ensuring your monitoring and performance tracking remain flexible and adaptable. Note that the edited metric is considered a new action and therefore any data collected prior to editing the action will not be included in the new action. For more information, see Editing Metrics.</p> <p>VSCode Plugin: Duplicate User Actions Enhancement</p> <p>Introducing the new <code>Duplicate</code> action within your VSCode IDE, which allows developers to easily reuse existing actions in multiple locations within your code. This new functionality applies to all Lightrun action types including Lightrun snapshots, metrics, and logs, simplyfying the task of creating non-trivial conditions and/or watch expressions.</p> <p>VSCode Plugin: GoTo Code Line Enhancement </p> <p>The Lightrun VSCode plugin's <code>Go-to-code</code> line capabilities have been improved. You can now navigate to an action\u2019s code line from the Lightrun Console, Actions tab, and Snapshot Hits tab; we\u2019ve also added the ability to select a code line if an action returns multiple options. To learn more about the Lightrun VSCode plugin, see the VSCode plugin quick tour guide.</p> <p>JVM Agent: Gain Java Class Indexing Control</p> <p>With the introduction of these new parameters, you can now actively control which Java classes will be indexed or not by Lightrun:</p> <ul> <li><code>lightrun_exclude_class_path</code> : Avoids indexing unnecessary classes that are pointed by the <code>CLASSPATH</code> environment       setting.      This, in turn, helps in reducing unnecessary strain on the CPU and memory when the Java agent is launched.</li> <li><code>Index_compressed_archives</code> : Includes not only Java archives, such as JAR, WAR and EAR files, but also compressed archives in  ZIP format.</li> <li><code>lightrun_extra_class_path_delimiter</code> and <code>lightrun_exclude_class_path_delimiter</code>: Sets a non-default delimiters to the list set  in <code>lightrun_extra_class_path</code> and <code>lightrun_exclude_class_path</code> (respectively).</li> </ul> <p>For more information, see Java Agent Configuration.</p> <p>Python and Node.js Agents: Enhanced Large Snapshot Value Capture</p> <p>We've taken snapshot capturing to the next level by enabling you to now capture large values for Python and Node.js agents. As part of this enhancement, we've raised the default settings to accommodate larger string values. You can also define maximum limits in the <code>agent.config</code> file through the introduction of the <code>max_snapshot_buffer_size</code>, <code>max_variable_size</code>, and <code>max_watchlist_variable_size</code> fields. For more information, refer to the relevant Agent documentation:  Python Agent Configuration and Node.js Agent Configuration.</p> <p>JetBrains Plugin: Edit Metrics Mode Enhancement</p> <p>You can smoothly edit your existing metrics by simply right-clicking on the metric icon in the editor gutter and selecting the 'Edit' option. This allows you to make adjustments to your metrics actions as needed, ensuring your monitoring and performance tracking remain flexible and adaptable. Note that the edited metric is considered a new action and therefore any data collected prior to editing the action will not be included in the new action. For more information, see Editing Metrics.</p> <p>JVM Agent: JDK 20 Support <p>The Lightrun JVM agent now supports JDK 20 excluding features in Preview status.</p>"},{"location":"release_notes/2023-releases/#september-2023","title":"September 2023","text":""},{"location":"release_notes/2023-releases/#version-1160","title":"Version 1.16.0","text":"<p>Release Date: September 26, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#highlights_1","title":"Highlights","text":"<p>VSCode and JetBrains Plugins: Action Creation on Multiple Sources <p>We are excited to announce that you can now select multiple agents and tags as a single source when creating an action directly from your IDE. This option lets you simultaneously apply an action to a custom group of agents and tags, which improves your plugin experience and makes it easier to debug with multiple agents and tags. To learn more, see selecting multiple sources in VSCode and selecting multiple sources in JetBrains. </p>"},{"location":"release_notes/2023-releases/#feature-enhancements_5","title":"Feature Enhancements","text":"<p>Python and Node.js Agents: Enhanced Large Snapshot Value Capture <p>We've taken snapshot capturing to the next level by enabling you to now capture large values for Python and Node.js agents. As part of this enhancement, we've raised the default settings to accommodate larger string values. You can also define maximum limits in the <code>agent.config</code> file through the introduction of the <code>max_snapshot_buffer_size</code>, <code>max_variable_size</code>, and <code>max_watchlist_variable_size</code> fields. For more information, refer to the relevant Agent documentation:  Python Agent Configuration and Node.js Agent Configuration.</p> <p>JVM Agent: JDK 20 Support</p> <p>The Lightrun JVM agent now supports JDK 20 excluding features in Preview status.</p>"},{"location":"release_notes/2023-releases/#version-1150","title":"Version 1.15.0","text":"<p>Release Date: September 10, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#hightlights","title":"Hightlights","text":"<p>Dedicated PII Redaction Templates Per Agent Pool</p> <p>With the introduction of PII Redaction Templates, Lightrun now supports additional granularity for utilizing PII Redaction effectively. You can either establish a single default PII Redaction template to be applied to all your agents or alternatively create and assign distinct PII Redaction templates for different agent pools.  For example, if you would like to apply PII Redaction only on a Production environment and not on Development or Staging.</p> <p>To help you get started with configuring your PII redaction on Agent Pools, we provide a single Default template on the PII Redaction page which serves as a starting point for creating your templates. Note that it does not contain any predefined patterns and is not assigned to any agent pools. For more information, see Assigning PII Redaction templates to Agent Pools.</p>"},{"location":"release_notes/2023-releases/#features-and-enhancements_1","title":"Features and Enhancements","text":"<p>JetBrains Plugin: Copy and Paste Actions Enhancement</p> <p>We offer an easy and more efficient way to insert Lightrun actions using 'Copy and Paste' within your JetBrains IDE, which allows developers to easily reuse existing actions in multiple locations within your code. This new functionality applies to all Lightrun action types, including Lightrun snapshots, metrics, and logs. It simplifies the task of reviving expired actions or duplicating actions which have non-trivial conditions and/or watch expressions.</p> <p>VSCode Plugin: Duplicate User Actions Enhancement</p> <p>Introducing the new <code>Duplicate</code> action within your VSCode IDE, which allows developers to easily reuse existing actions in multiple locations within your code. This new functionality applies to all Lightrun action types including Lightrun snapshots, metrics, and logs, simplyfying the task of creating non-trivial conditions and/or watch expressions.</p> <p>VSCode Plugin: GoTo Code Line Enhancement </p> <p>The Lightrun VSCode plugin's <code>Go-to-code</code> line capabilities have been improved. You can now navigate to an action\u2019s code line from the Lightrun Console, Actions tab, and Snapshot Hits tab; we\u2019ve also added the ability to select a code line if an action returns multiple options. To learn more about the Lightrun VSCode plugin, see the VSCode plugin quick tour guide.</p> <p>Java Agent: Gain Java Class Indexing Control</p> <p>With the introduction of these new parameters, you can now actively control which Java classes will be indexed or not by Lightrun:</p> <ul> <li><code>lightrun_exclude_class_path</code> : Avoids indexing unnecessary classes that are pointed by the <code>CLASSPATH</code> environment setting.      This, in turn, helps in reducing unnecessary strain on the CPU and memory when the Java agent is launched.</li> <li><code>Index_compressed_archives</code> : Includes not only Java archives, such as JAR, WAR and EAR files, but also compressed archives in  ZIP format.</li> <li><code>lightrun_extra_class_path_delimiter</code> and <code>lightrun_exclude_class_path_delimiter</code>: Sets a non-default delimiters to the list set  in <code>lightrun_extra_class_path</code> and <code>lightrun_exclude_class_path</code> (respectively).<p>For more information, see Java Agent Configuration.</p> </li> </ul>"},{"location":"release_notes/2023-releases/#bug-fixes_7","title":"Bug Fixes","text":"<p>JetBrains Plugin <ul> <li>Fixed an issue where copying stack frames did not copy the class package but rather the object reference. </li> <li>Fixed an issue in multi-project environments, where searching for files did not search all the projects.</li> </ul> <p>.NET Agent <ul> <li>Fixed an issue where cyclic object references were not properly handled.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1143","title":"Version 1.14.3","text":"<p>Release Date: September 18, 2023 (On Premise)</p> <p>This On Premise release contains the contents of all the 1.14.x releases.</p>"},{"location":"release_notes/2023-releases/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fixed security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#version-1142","title":"Version 1.14.2","text":"<p>Release Date: September 4, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#feature-enhancements_6","title":"Feature Enhancements","text":""},{"location":"release_notes/2023-releases/#net-agents-support-apple-silicon-macs-m1-m2","title":".Net Agents Support Apple Silicon Macs (M1, M2)","text":"<p>You can now run the .Net Agent on M1 and M2 silicon Macs. This means that you can now create Lightrun actions (dynamic logs, and snapshots) using the .Net Agent. For more information, see .Net Agent System Requirements.</p>"},{"location":"release_notes/2023-releases/#august-2023","title":"August 2023","text":""},{"location":"release_notes/2023-releases/#version-1141","title":"Version 1.14.1","text":"<p>Release Date: August 28, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#feature-enhancements_7","title":"Feature Enhancements","text":""},{"location":"release_notes/2023-releases/#extended-pii-redaction-support-within-snapshot-actions","title":"Extended PII redaction Support within Snapshot Actions","text":"<p>In this release, Lightrun extends its PII redaction support within snapshot actions to consist of additional data structures including arrays, lists, and objects for Variable Names. With PII redaction, customers can easily define within the Lightrun platform which data is being exposed throughout the debugging process and ensure maximum data security and privacy. For more information, see PII Redaction. </p>"},{"location":"release_notes/2023-releases/#bug-fixes_9","title":"Bug Fixes","text":""},{"location":"release_notes/2023-releases/#general","title":"General","text":"<p>This release contains internal fixes to service behavior and performance.</p>"},{"location":"release_notes/2023-releases/#version-1140","title":"Version 1.14.0","text":"<p>Release Date: August 15, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#highlights_2","title":"Highlights","text":""},{"location":"release_notes/2023-releases/#lightrun-metrics-visualization-for-java","title":"Lightrun Metrics Visualization for Java","text":"<p>We are happy to announce the release of the JetBrains plugin Lightrun Metrics tool window. With the new Lightrun Metrics tool window, you can view and analyze Lightrun metrics data in its dedicated tool window for up to 24 hours, view your metrics data in the context of captured hits, and analyze Lightrun metrics with new helpful visualization graphs. For more information, see JetBrains Metrics console. Additionally, you can watch our short demo that focuses on utilizing the new tool to perform Java performance troubleshooting.</p> <p></p> <p>Note</p> <p>To enable this feature, please reach out to Lightrun Support, as it is currently available on demand. The Lightrun metrics tool window is currently supported for JetBrains IDE and is available on demand. To try out the metrics tool window, please contact our support team.</p>"},{"location":"release_notes/2023-releases/#features-and-enhancments","title":"Features and Enhancments","text":""},{"location":"release_notes/2023-releases/#pii-redaction-on-agents-case-insensitivity-supported-on-patterns","title":"PII Redaction on Agents: Case Insensitivity Supported on Patterns","text":"<p>When setting PII Redaction patterns, the Make Case Insensitive field has been added to the Patterns dialog box to support setting case insensitivity for variables. The default is set to case sensitive only. For more information, see Data Security.</p>"},{"location":"release_notes/2023-releases/#jetbrains-plugin-data-delay-status-mode","title":"JetBrains Plugin: \u2018Data Delay\u2019 Status Mode","text":"<p>To enhance your observability experience, we have added the Data Delay status mode to the Lightrun plugin's top menu. When in Data Delay mode, you can continue debugging and retrieving Lightrun actions but may encounter a short delay of up to 10 seconds for new agents to be added or snapshot action data to be retrieved from the server.</p> <p>In Data Delay mode, you can fetch the logs immediately by clicking Refresh on the menu bar or directly in the log console.</p>"},{"location":"release_notes/2023-releases/#server-log-optimization-on-premise-only","title":"Server Log Optimization (On-Premise Only)","text":"<p>To reduce the out-of-the-box log storage, we have changed the default log levels for Lightrun packages to DEBUG and 3rd party packages to WARNING in the Logs window in the Lightrun Management Portal.</p> <p>Note</p> <p>To make changes to these default settings, please reach out to Lightrun Support, as it is currently available on demand.</p>"},{"location":"release_notes/2023-releases/#bug-fixes_10","title":"Bug Fixes","text":""},{"location":"release_notes/2023-releases/#general_1","title":"General","text":"<ul> <li>Fixed an issue related to PII filters where changing the <code>Value</code> to <code>Variable Name</code> for an existing pattern would fail.</li> </ul>"},{"location":"release_notes/2023-releases/#jetbrains-plugin","title":"JetBrains Plugin","text":"<ul> <li>Fixed an issue where metrics action data was not being displayed in both the plugin log console and the web console.</li> <li>Fixed an issue where snapshot variables with long strings were not retrievable.</li> <li>Fixed a Java-related <code>ConcurrentModificationException</code> error that was generated when running on Windows.</li> </ul>"},{"location":"release_notes/2023-releases/#vscode-plugin","title":"VSCode Plugin","text":"<ul> <li>Fixed an issue specific to the plugin version 1.13 in VSCode, where displaying a captured snapshot caused plugin flickering.</li> </ul>"},{"location":"release_notes/2023-releases/#june-2023","title":"June 2023","text":""},{"location":"release_notes/2023-releases/#version-1130","title":"Version 1.13.0","text":"<p>Release Date: June 27, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-changes","title":"Features &amp; Changes","text":""},{"location":"release_notes/2023-releases/#jetbrains-plugin_1","title":"JetBrains Plugin","text":"<ul> <li>We are happy to announce the release of the JetBrains plugin Lightrun Metrics tool window. With the new Lightrun Metrics tool window, you can view and analyze Lightrun metrics data in its dedicated tool window for up to 24 hours, view your metrics data in the context of captured hits, and analyze Lightrun metrics with new helpful visualization graphs. For more information, see JetBrains Metrics console.</li> </ul> <ul> <li>Lightrun now offers a custom plugin repository for organizations who have installed the Lightrun Management Server on-premise and our single-tenant customers. This makes it easier for members of the organization to set up and use the Lightrun plugin. It also helps them keep their plugins updated with new feature releases and improvements from Lightrun. For more information, see Custom plugin repository.</li> </ul> <p>Note</p> <p>The custom plugin repository option is only available to our on-premise and single-tenant customers.</p>"},{"location":"release_notes/2023-releases/#general_2","title":"General","text":"<ul> <li>The Lightrun integrations page has been given a facelift with a new look and support for more integrations. The integration page has been redesigned and now comprises a wide range of available integrations and their setup instructions. Lightrun users can access all integrations currently enabled for their organization by logging in to the Management Portal and exploring the Integrations page.</li> </ul> <ul> <li>The Lightrun Audit event page has been improved! We have added the ability to filter the captured events list by specifying custom conditions, improved the date filter user interface, and added the ability to export captured events to a CSV file. For more information, see Audit events.</li> </ul>"},{"location":"release_notes/2023-releases/#lightrun-logoptimizertm","title":"Lightrun LogOptimizer(\u2122)","text":"<ul> <li>The Lightrun LogOptimizer(\u2122) now supports C-Sharp (C#)! With this update, you can now scan your C# codebase for potential logging issues and get clear instructions on resolving these issues directly from your IDE with the Lightrun LogOptimizer(\u2122). For more information, see Lightrun LogOptimizer(\u2122).</li> </ul> <p>Note</p> <p>The Lightrun LogOptimizer(\u2122) requires the Docker desktop or engine installed and running on your local machine to scan your code base.</p>"},{"location":"release_notes/2023-releases/#node-agent","title":"Node Agent","text":"<ul> <li>The Lightrun Node agent can now redact personally identifiable information (PII) from logs directly from the agent side. To enable the feature, set <code>redactionEnabled:true</code> in your Node agent configuration file. See the Node Agent configuration for more information.</li> </ul>"},{"location":"release_notes/2023-releases/#bug-fixes_11","title":"Bug Fixes","text":""},{"location":"release_notes/2023-releases/#general_3","title":"General","text":"<ul> <li>Fixed security vulnerabilities in the Lightrun server.</li> <li>Fixed updated JetBrains plugin UI does not have the option to select agent pools.</li> </ul>"},{"location":"release_notes/2023-releases/#net-agent","title":".NET agent","text":"<ul> <li>Fixed .NET agent snapshots take too much time to evaluate.</li> <li>Fixed .NET agent not evaluating base class members for generic base classes.</li> <li>Fixed .NET agent failed to evaluate <code>Guid.ToString()</code> and <code>Date.ToString()</code>.</li> </ul>"},{"location":"release_notes/2023-releases/#may-2023","title":"May 2023","text":""},{"location":"release_notes/2023-releases/#version-1120","title":"Version 1.12.0","text":"<p>Release Date: May 16, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-changes_1","title":"Features &amp; Changes","text":""},{"location":"release_notes/2023-releases/#system-for-cross-domain-identity-management-scim","title":"System for Cross-Domain Identity Management (SCIM)","text":"<p>Update</p> <p>As we navigate the pre-GA phase, our team is actively refining and enhancing SCIM for seamless automated user provisioning.  Stay tuned for updates on this exciting addition.</p> <p>We are excited to announce that Lightrun now supports automated user provisioning using the System for Cross-Domain Identity Management (SCIM) protocol. SCIM allows you to automatically manage and communicate user data and permissions between identity providers (IdP) like Okta or Azure AD and a service provider like Lightrun. This feature helps improve your organization\u2019s data security and streamline workflows. For more information, please reach out to our support team. </p>"},{"location":"release_notes/2023-releases/#agent-pool-key-rotation","title":"Agent Pool Key rotation","text":"<p>Lightrun now supports API Key rotation. The API Key rotation feature allows you to change compromised or exposed Agent Pool API keys without losing your Agent Pools or action data. This feature increases your control over your Lightrun agents and secures the servers your agents are running on. For more information, see Agent Pools.</p>"},{"location":"release_notes/2023-releases/#dynatrace-integration","title":"Dynatrace Integration","text":"<p>We have added support for sending metrics data from Lightrun to Dynatrace with the new Lightrun Dynatrace Integration. Dynatrace is an application performance monitoring (APM) and software intelligence solution that gives you visibility and AI-backed answers across your entire digital infrastructure. With the new Lightrun Dynatrace integration, you can import live metrics data from your Lightrun account to your Dynatrace user interface to take advantage of Dynatrace's full-stack monitoring and analytics capabilities. For more information, see Dynatrace integration.</p>"},{"location":"release_notes/2023-releases/#lightrun-logoptimizertm_1","title":"Lightrun LogOptimizer(\u2122)","text":"<p>We have made improvements to the Lightrun LogOptimizer(\u2122) onboarding process. The prerequisites for running the LogOptimizer have been added to the Lightrun LogOptimizer tool window, and error messages have been made clearer to help customers more quickly resolve any issues that may arise while using the LogOptimizer.</p> <p></p>"},{"location":"release_notes/2023-releases/#general_4","title":"General","text":"<ul> <li>Lightrun IDE plugins now display a notification when your current plugin version is incompatible with our servers and when a general plugin update is available. This helps you keep up with our new feature releases and improvements. It also makes it easier to take full advantage of Lightrun capabilities.</li> </ul> <ul> <li>Snapshot consoles now filter out hits from deleted snapshots by default.</li> </ul>"},{"location":"release_notes/2023-releases/#bug-fixes_12","title":"Bug Fixes","text":""},{"location":"release_notes/2023-releases/#net-agent_1","title":".NET Agent","text":"<ul> <li>Fixed .NET agent evaluating struct properties as class properties.</li> <li>Fixed action file path changes from the full path to filename only, resulting in an Invalid Filename or line number error when editing an action on Windows.</li> <li>Fixed auto-properties not evaluated in .Net expressions.</li> <li>Fixed .NET agent becomes stuck after multiple refresh attempts.</li> <li>Fixed Snapshot base class members' evaluation.</li> </ul>"},{"location":"release_notes/2023-releases/#lightrun-logoptimizertm_2","title":"Lightrun LogOptimizer(\u2122)","text":"<ul> <li>Fixed duplicate log statement flag emitting multiple results for the same method, one per log line.</li> </ul>"},{"location":"release_notes/2023-releases/#general_5","title":"General","text":"<ul> <li>Fixed security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/2023-releases/#nodejs-agent","title":"Node.js Agent","text":"<ul> <li>Fixed typescript path resolving issues.</li> </ul>"},{"location":"release_notes/2023-releases/#april-2023","title":"April 2023","text":""},{"location":"release_notes/2023-releases/#version-1113","title":"Version 1.11.3","text":"<p>Release Date: April 4, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-changes_2","title":"Features &amp; Changes","text":""},{"location":"release_notes/2023-releases/#jvm-agent","title":"JVM Agent","text":"<ul> <li>The Lightrun Java agent now supports AutoBoxing and Auto-unboxing of Java variables in Java expressions. Previously, when you try to evaluate an expression containing two different data types, i.e., when you add the following expression <code>myLongVal == 123</code> into the following code sample,</li> </ul> <p><pre><code>Long myLongVal = 123;\nSystem.out.println(myLongVal);\n</code></pre> You will get a <code>Type mismatch error</code> since the <code>myLongVal</code> variable(wrapper class) does not have the same data type as <code>123</code> (long primitive data type). The <code>myLongVal</code> must be unboxed to its primitive data type equivalent with an unboxing function before you can use it in the expression.</p> <p><pre><code>myLongVal.longValue() == 123\n</code></pre> With the new autoboxing and unboxing feature, the expression will be evaluated successfully since the unboxing process is done automatically by the Lightrun agent. This addition greatly simplifies writing Java expressions, removes the need for manually boxing and unboxing of variables, and helps developers avoid unnecessary errors. For more information on Java expressions, see Java expressions. </p>"},{"location":"release_notes/2023-releases/#vscode-plugin_1","title":"VSCode Plugin","text":"<ul> <li>We have added an Actions view tab to the VSCode Plugin Lightrun sidebar.</li> </ul> <p>From the new Actions view tab, You can:</p> <ul> <li>Search for actions with their filename and line number.</li> <li>Filter actions with all, expired, and error statuses.</li> <li>Delete actions.</li> </ul> <p>For more information, see the VSCode plugin quick tour.</p>"},{"location":"release_notes/2023-releases/#march-2023","title":"March 2023","text":""},{"location":"release_notes/2023-releases/#version-111","title":"Version 1.11","text":"<p>Release Date: March 28, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-changes_3","title":"Features &amp; Changes","text":""},{"location":"release_notes/2023-releases/#lightrun-logoptimizertm_3","title":"Lightrun LogOptimizer(\u2122)","text":"<ul> <li>The Lightrun LogOptimizer(\u2122) now supports Windows OS!  The Lightrun LogOptimizer(\u2122) is an automated log optimization solution that scans your current code, or entire codebase, for potential logging issues and returns clear instructions explaining the suspected cases with suggestions on how to fix the logging problem in your IDE.  To learn more about the Lightrun LogOptimizer(\u2122), see Lightrun LogOptimizer(\u2122).<p>Note that the Lightrun LogOptimizer(\u2122) requires the Docker desktop or engine installed and running on your local machine to scan your code base.</p> </li> </ul> <ul> <li>We have refined the LogOptimizer tool to enable it to work better with Python and Javascript codebases.</li> </ul>"},{"location":"release_notes/2023-releases/#general_6","title":"General","text":"<ul> <li>We have added a new service configuration property called Expose action output to Lightrun. Disabling this option will restrict your action output to your application\u2019s standard output(stdout) and prevent your action\u2019s data exposure to Lightrun plugins and installed integrations. This new configuration property helps ensure that Lightrun is not a sub-processor of private data or Personal Identifiable Information (PII), enabling your organization to comply with data privacy laws like GDPR or CCPA. For more information, see Service configuration.</li> </ul> <ul> <li>We have added the Expired status to Lightrun actions. Previously, when an action reached its set time limit, it was assigned the error status. With the new expired status, the number of errors is significantly reduced, and you can now filter expired actions from other actions.</li> </ul> <ul> <li>You can now expand and collapse Snapshots data in the VSCode snapshots tab and the JetBrains Snapshot tool window. </li> </ul>"},{"location":"release_notes/2023-releases/#jetbrains-plugin_2","title":"JetBrains Plugin","text":"<ul> <li>We have added an Actions tab to the JetBrains Plugin Lightrun tool window.</li> </ul> <p>From the new Actions tab, You can:</p> <ul> <li>Search for actions with their filename and line number.</li> <li>Filter actions with all, expired, and error statuses.</li> <li>Delete actions.</li> <li>View the total action hit count.</li> </ul> <p>For more information, see the JetBrains plugin quick tour.</p> <ul> <li>You can now bulk delete Lightrun actions in the JetBrains plugin.</li> </ul>"},{"location":"release_notes/2023-releases/#vscode-plugin_2","title":"VSCode Plugin","text":"<ul> <li>You can now view Snapshots data created for over 72 hours in the VSCode snapshots tab. This extended length of snapshots provides longer troubleshooting cycles for developers and supports longer audit processes.</li> </ul>"},{"location":"release_notes/2023-releases/#management-portal","title":"Management Portal","text":"<ul> <li>Lightrun platform administrators can now re-invite members from their organizations to the Lightrun platform via email.</li> </ul>"},{"location":"release_notes/2023-releases/#bug-fixes_13","title":"Bug Fixes","text":""},{"location":"release_notes/2023-releases/#general_7","title":"General","text":"<ul> <li>Fixed Custom Source wrong hit count indication.</li> <li>Fixed invokedynamic enabled returning unclear errors. </li> </ul>"},{"location":"release_notes/2023-releases/#net-agent_2","title":".NET Agent","text":"<ul> <li>Fixed unsupported metadata tables error.</li> <li>Fixed Boolean values showed as Integers in snapshots.</li> <li>Fixed null values showed as empty in snapshots.</li> <li>Fixed Logpoint has a wrong expression order.</li> <li>Fixed .NET agent stops after inserting two actions.</li> <li>Fixed invalid file name or line number errors when parsing large PDB files.</li> </ul>"},{"location":"release_notes/2023-releases/#february-2023","title":"February 2023","text":""},{"location":"release_notes/2023-releases/#version-1100","title":"Version 1.10.0","text":"<p>Release Date: February 14, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-changes_4","title":"Features &amp; Changes","text":""},{"location":"release_notes/2023-releases/#lightrun-logoptimizertm_4","title":"Lightrun LogOptimizer(\u2122)","text":"<ul> <li>We are excited to announce the release of Lightrun LogOptimizer(\u2122). The Lightrun LogOptimizer(\u2122) is an automated log optimization solution that scans your current code, or entire codebase, for potential logging issues and returns a message explaining the suspected cases with suggestions on how to fix the logging problem directly from within your IDE. The Lightrun LogOptimizer(\u2122) aims to help reduce noise generated by overlogging and the overall costs of logging. For more information, see Lightrun LogOptimizer(TM).</li> </ul>"},{"location":"release_notes/2023-releases/#net-agent_3","title":".NET Agent","text":"<ul> <li>The Lightrun .NET agent is now available in Early Access. With the Lightrun .NET agent, you can add Logs and Snapshots to your .NET applications, including frameworks like .NET Core and .NET Framework, at runtime without the need for hot restarts or redeployments. Lightrun users interested in trying out the new Lightrun .NET agent should contact our support team for more information.</li> </ul>"},{"location":"release_notes/2023-releases/#role-based-access-control","title":"Role-Based Access Control","text":"<ul> <li>The extended Lightrun Role-Based Access Control (RBAC) feature is now available in Early Access. The extended RBAC feature allows Lightrun customers to restrict access or grant permissions to users within their organization with Groups, Agent Pools, and Roles. Lightrun users interested in trying out the RBAC feature should contact our support team for more information.</li> </ul>"},{"location":"release_notes/2023-releases/#general_8","title":"General","text":"<ul> <li>We have added the ability to share snapshot hits data with a URL link. The URL link can be copied or exported into a Slack or Jira message format to be shared on Slack or Jira from any of our IDE plugins and the Management Portal. For more information, see Snapshots.</li> </ul> <ul> <li>You can now select specific integrations like Prometheus as your action output target when creating Lightrun actions from your IDE plugin. This option makes it easier to configure where you want to view your action output in addition to the Lightrun Console. For more information, see Action Output Target.</li> </ul>"},{"location":"release_notes/2023-releases/#vscode-plugin_3","title":"VSCode Plugin","text":"<ul> <li>We have made some improvements to the VSCode Snapshots tab:</li> <li>Lightrun users can now view snapshot hits created by other users in their organization. This change will make it easier to get debugging inputs from colleagues and facilitate cross-team collaboration.</li> <li>Snapshot hits data now load lazily from the Lightrun server. This process will help to reduce snapshot hits data load time considerably, offer greater troubleshooting visibility through a larger variable tree depth, and reduce memory usage by the Lightrun VSCode plugin.</li> <li>We have added the ability to search a snapshot stack trace and variables.</li> </ul>"},{"location":"release_notes/2023-releases/#jetbrains-plugin_3","title":"JetBrains Plugin","text":"<ul> <li>We have made enhancements to the JetBrains Log console. We have added the Filename and Line to the log output format, which users can click to navigate to the relevant action using the goto action. This change will help to improve the overall troubleshooting experience in your JetBrains IDE.</li> </ul>"},{"location":"release_notes/2023-releases/#lightrun-cli","title":"Lightrun CLI","text":"<ul> <li>You can now configure the Lightrun CLI to return data in a JSON format. To do that, add the <code>j</code> or <code>json</code> flag to the CLI command. For more information, see Lightrun CLI. </li> </ul>"},{"location":"release_notes/2023-releases/#jvm-agent_1","title":"JVM Agent","text":"<ul> <li>The Lightrun JVM agent now supports JDK 18 and JDK 19. </li> </ul>"},{"location":"release_notes/2023-releases/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fixed Lightrun java agent returns an error when file has a common name with other files.</li> </ul>"},{"location":"release_notes/2023-releases/#january-2023","title":"January 2023","text":""},{"location":"release_notes/2023-releases/#version-190","title":"Version 1.9.0","text":"<p>Release Date: January 2, 2023 (SaaS)</p>"},{"location":"release_notes/2023-releases/#features-changes_5","title":"Features &amp; Changes","text":""},{"location":"release_notes/2023-releases/#general_9","title":"General","text":"<ul> <li>We have extended our PII redaction capabilities to support redacting data from Lightrun based on the Variable name. In previous versions, you could only redact data from Lightrun by providing the regex value for the data. With this release, you can prevent Lightrun from evaluating snapshots and logging sensitive data by providing the Variable's name. For more information, see PII redaction.</li> </ul> <ul> <li>Snapshot data sent from the Lightrun server to IDE plugins are now compressed in the server and undergo lazy decompression in the plugin before being presented to a user. This process helps to decrease snapshot hits loading time, display larger variable tree depth, eliminate the <code>max depth</code> error, lower memory consumption, and improve performance. </li> </ul>"},{"location":"release_notes/2023-releases/#jvm-agent_2","title":"JVM Agent","text":"<ul> <li>We have added support for running our Java agent on Linux and Alpine operating systems using the ARM processor.</li> </ul>"},{"location":"release_notes/2023-releases/#vscode-plugin_4","title":"VSCode Plugin","text":"<ul> <li>The performance of the VSCode plugin Lightrun Snapshots tab has been improved. Snapshot hits load faster, and we have made it easier to navigate between hits in the improved tab.</li> </ul>"},{"location":"release_notes/2023-releases/#jetbrains-plugin_4","title":"JetBrains Plugin","text":"<ul> <li>We have implemented a filter only my actions feature in the JetBrains plugin that allows you to display only actions created by you.</li> </ul> <ul> <li>Clicking on the \u201cSnapshot taken!\u201d notification now opens the JetBrains Snapshot Console with the relevant hit.</li> </ul> <ul> <li>You can now view a list of your recently used conditions in the JetBrains plugin.</li> </ul>"},{"location":"release_notes/2023-releases/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fixed copying variables from snapshot in VSCode plugin does not include inner objects.</li> <li>Fixed refactored NPE shown after tagged snapshots are deleted.</li> </ul>"},{"location":"release_notes/functionality-changes-deprecations/","title":"Functionality changes and deprecations","text":"<p>This document aims to inform you about parameter or feature changes by category type that may result in breaking changes and require your attention. This can help you maintain and troubleshoot your Lightrun agents, plugins, and actions effectively.</p> <p>Please note that these changes are also described in the relevant release notes.</p>"},{"location":"release_notes/functionality-changes-deprecations/#java-agent","title":"Java Agent","text":"Parameter/Feature Description What\u2019s Changed Up to Version From Version <code>max_snapshot_frame_count</code> Maximum allowed snapshot frame count. Lowered the number of snapshots frames. \u2264 1.37 <code>5</code> \u2265 1.38 <code>4</code> <code>index_compressed_archives</code> Supports wildcard for file indexing. Added wildcard support. \u2264 1.18.0  No wildcard support. \u2265 1.18.1  Added wildcard support. <code>agent_log_target_dir</code> Sets the target directory for storing agent logs. Changed the format of the agent logs and how they are generated. \u2264 1.32  The path for storing the logs was predefined as the default <code>/temp</code>file of the operating system. \u2265 1.33  You can set the path where the logs are saved. The logs are generated automatically with the following format: <code>lightrun_java_agent.&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log</code>.  For example: <code>lightrun_java_agent.22840.20240513-153557.1.log</code>."},{"location":"release_notes/functionality-changes-deprecations/#nodejs-agent","title":"Node.js Agent","text":"Parameter/Feature Description What\u2019s Changed? From Version Up to Version <code>maxExpandFrames</code> Maximum number of top frames for which to collect full data. Increased the number of top frames. \u2264 1.37 <code>5</code> \u2265 1.38 <code>4</code> <code>maxProperties</code> Number of properties gathered on a captured object. Increased the number of properties. \u2264 .37 <code>10</code> \u2265 1.38 <code>20</code> <code>logsPath</code> Sets the target directory for storing agent logs. Parameter renamed. \u2264 1.33 <code>logsPath</code> \u2265 1.34 <code>agentLogTargetDir</code> <code>agentLogTargetDir</code> Sets the target directory for storing agent logs. Changed the format of the agent logs and how they are generated. \u2264 1.33  Known as <code>logsPath</code>. The path for storing the logs was predefined as the default <code>/temp</code>file of the operating system. \u2265 1.34  The log is generated automatically in the following format: <code>lightrun_nodejs_agent.&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log</code>. For example: <code>lightrun_nodejs_agent.22840.20240513-153557.1.log</code>."},{"location":"release_notes/functionality-changes-deprecations/#python-agent","title":"Python Agent","text":"Parameter/Feature Description What\u2019s Changed From Version Up to Version <code>agent_log_target_dir</code> Sets the target directory for storing agent logs. Log syntax change. \u2265 1.33 The path for storing the logs was predefined as the default <code>/temp</code>file of the operating system. \u2264 1.34 <code>&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log.</code> <code>max_snapshot_buffer_size_in_bytes</code> Maximum allowed total bytes for snapshots. Deprecated and replaced with a new field. \u2265 1.17.0 <code>max_snapshot_buffer_size_in_bytes</code> \u2264 1.18 <code>max_snapshot_buffer_size</code>"},{"location":"release_notes/functionality-changes-deprecations/#net-agent","title":".NET Agent","text":"Parameter/Feature Description What\u2019s Changed? Up to Version From Version MaxStringLength Truncates strings to the set size. Lowered the string length truncation value. \u2264 1.34 <code>1000</code> \u2265 1.35 <code>256</code> MaxFieldCount Maximum number of fields to capture on an object. Increased the number of fields to capture on an object. \u2264 1.34 <code>20</code> \u2265 1.35 <code>100</code>"},{"location":"release_notes/known-issues/","title":"Known Issues","text":"<p>The following documentation lists the set of known issues in the Lightrun components - Lightrun Server, Lightrun  Agents and Lightrun Plugins, including the version in which they were discovered, and the version in which they were fixed (if relevant). </p>"},{"location":"release_notes/known-issues/#known-issues-and-limitations","title":"Known issues and limitations","text":"<p>When considering an upgrade to your system, we recommend that you review the Known Issues below to help you determine which is the right upgrade for your system.</p> <p>The following table lists the issues found in the Lightrun product per Lightrun component.</p> Known Issues/Limitations Lightrun component Description Found in release Fix version IIS on .NET limitation .NET Agent <code>DebugType</code> portable was supported on IIS using a workaround. 1.36.2 and lower 1.36.3 .NET Agent installation .NET Agent An internal issue related to the .NET agent. 1.36.0 1.36.1 Java Agent Java Agent An internal issue related to the Java Agent in JetBrains. 1.34.x 1.35.2, 1.34.4 .NET Agent .NET Agent An internal issue related to the .NET agent. 1.34.x 1.35.2 Python 3.11.0 limitation Python Agent Only one active action is permitted within a code object at any given time. 1.27 Python 3.11.0 limitation Python Agent Actions can't be added to Generator funtions. 1.27 Python 3.11.0 limitation Python Agent The <code>dis.dis()</code> function, serving as a disassembler for Python bytecode functions, may produce incorrect results in specific scenarios, after adding an action to a corresponding code object. 1.27 Python 3.11.0 limitation Python Agent Actions within nested functions will only be triggered during executions of their 'outer' functions that occur after the action has been added. 1.27 Lightrun Action limitations .NET Agent Actions cannot be added to constructors. 1.26 Lightrun Action limitations .NET Agent Cannot watch for a property defined on an interface. 1.26 Lightrun expression limitations .NET Agent HashSet content cannot be viewed. 1.26 1.31 Lightrun expression limitations .NET Agent Properties with code in the getter functions are only collected when they are requested in evaluated expressions. 1.26 Lightrun expression limitations .NET Agent .Net agent does work when the application is executed by the IDE. 1.26 Unable to select agent pools while indexing is running JetBrains Plugin During IntelliJ's indexing, selecting Lightrun agent pools is not possible. However, you can select agent pools once indexing has completed. 1.26 1.33  See  Profile Chaining. Data Delay &amp; actions cannot be viewed when there is a source mismatch JetBrains Plugin When a source mismatch occurs, users will experience a data delay. Action results will not be viewable. 1.24 and lower 1.25 Debugging decompiled Java classes is not supported Java Agent Debugging decompiled Java Classes is not supported. This limitation becomes relevant when you lack the source code. All Lightrun versions Not applicable Java agent not supported on CentOS 7.0 Java Agent The Java agent is not functional on CentOS version 7.0 1.23 - 1.26 1.27 PII redaction is not supported for certain runtime versions Python Agent, Node.js Agent Agent side PII redaction is not supported for the following runtimes:  - Python version 3.8 and lower - NodeJS version 10.0.0 and 11.0.0 1.22 GraalVM 21 compatibility limitation Java Agent Lightrun and GraalVM are compatible as long as GraalVM is used only as a JVM and does not include GraalVM native images. All Lightrun versions Python Alpine Linux  limitation Python Agent Running the Python agent on Alpine Linux failed. Note that new version requires installing dependencies prior to installing the agent. 1.8 1.30 <code>babel-watch</code> npm package is not supported Node.js Agent Lightrun Node.js agents do not work with Node.js applications loaded using babel-watch. All Lightrun versions"},{"location":"release_notes/lightrun-release-notes/","title":"Lightrun Release Notes","text":"<p>Here's where you'll find the latest Lightrun release notes, including the main highlights, enhancements, and fixes made to each version as it is released.</p> <ul> <li> <p>For release notes of previous releases, see:</p> <ul> <li>2023 releases </li> </ul> <ul> <li>2021 - 2022 releases</li> </ul> </li> </ul> <ul> <li>For a consolidated list of all feature and parameter changes and deprecations, see Functionality changes and deprecations. Note that all changes are also documented by release in this document.<p>Before upgrading to a new version of Lightrun, we recommend reviewing this list of changes as it may include breaking changes that require your attention. </p> </li> </ul> <ul> <li>For a list of known issues, refer to Known Issues.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#august-2024","title":"August 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-138-latest","title":"Version 1.38 (Latest)","text":"<p>Release date: 4 August, 2024  (SaaS, On-Premise to follow the next week)</p> HEADS UP ANNOUNCEMENT Changes to SCIM User Management In the upcoming release, SCIM admins will be able to assign the Lightrun Admin role directly within Lightrun, rather than through SCIM, as was done previously. Additionally, we have introduced improvements to the way you assign Lightrun groups and roles to your SCIM users within the Lightrun Management Portal. If you have set up your Lightrun Admin role directly using SCIM, please reach out to your Lightrun representative to learn more about the new changes and how to prevent any potential disruptions."},{"location":"release_notes/lightrun-release-notes/#feature-enhancements","title":"Feature Enhancements","text":"<p>JetBrains and VS Code Plugins: Deployment Switcher </p> <p>Note</p> <p>You need a Lightrun Enterprise plan to use the Deployment Switcher functionality. For more information, see Pricing.</p> <p>The Deployment Switcher feature applies only to Single-tenant and On-premise environments and is activated upon demand. To enable this feature, please reach out.</p> <p>In a multi-deployment environment, you no longer need to log out of the IDE to move from one deployment to another. Starting from this release, Lightrun introduces a Deployment Switcher directly within the Lightrun plugin in your IDE. This feature is designed for developers in large enterprise organizations who use Lightrun to debug applications across multiple deployment instances. You can now seamlessly switch between deployments, such as from <code>TESTING</code> to <code>PRODUCTION</code> deployment or between <code>TESTING-EU and TESTING-US</code>.</p> <p>For more information, see:</p> <ul> <li>Switch between deployments in the Lightrun plugin in JetBrains.</li> <li>Switch between deployments in the Lightrun plugin in VS Code.</li> </ul> <p>Node.JS agent: Enhanced Performance for Large and Nested Snapshots </p> <p>In version 1.38, Node.js developers can enjoy an improved experience when capturing nested and large snapshots, thanks to the introduction of new parameters:</p> <ul> <li><code>maxVariableDepth</code>: Limits the number of nested properties to reduce the overall capture time. Gathered for deeply nested objects. For example a-&gt;b-&gt;c with a value of 2, will only capture values of a and b.</li> </ul> <ul> <li><code>maxWatchProperties</code>: Limits the number of properties gathered on large objects to reduce the overall capture time. This also applies to objects that are a collection. For example, setting <code>const a = [1,2,3]</code> with <code>maxProperties: 1</code> and <code>maxWatchProperties</code>: <code>2</code>, will return <code>1</code>, <code>2</code>  when using a watch expression for a. Note that this is an extended limitation for Watch expressions. </li> </ul> <p>In addition, we have updated the default values for the following existing parameters that may lead to breaking changes. </p> <ul> <li><code>maxExpandFrames</code>:  The default value has been changed from <code>5</code> to <code>4</code>.</li> <li><code>maxProperties</code>: The default value has been changed from <code>10</code> to <code>20</code>.</li> </ul> <p>For more information, see Node Agent Configurations.</p> <p>Java Agent: New snapshot-related parameters </p> <p>To enhance the peformance when working with snapshots, we have added the following new parameters:</p> <ul> <li><code>capture_object_explore_max_depth</code>: Sets the maximum depth of nested objects. The default value is <code>50</code>.</li> <li><code>snapshot_object_max_members</code>: Controls the number of properties captured in an object. The default value is <code>100</code>.</li> <li><code>snapshot_expression_max_collection_size</code>: Controls the number of items captured for a collection in a watch expression. The default value is <code>1024</code>.</li> </ul> <p>For more information, see Java Agent Configurations.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#july-2024","title":"July 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-1372","title":"Version 1.37.2","text":"<p>Release date: 23 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fixed an internal issue related to placing snapshots in Lambda expressions in the .NET agent.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1371","title":"Version 1.37.1","text":"<p>Release date: 22 July, 2024  (SaaS, On-Premise to follow the next week)</p> <p>Important</p> <p>Please refrain from using this version for VS Code due to a plugin issue.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related to the Custom Dynamic Logger in the .NET agent.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1370","title":"Version 1.37.0","text":"<p>Release date: 15 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#highlights","title":"Highlights","text":"<p>New SIEM Integration with Lightrun Audit Events </p> <p>Lightrun's SIEM integration enables real-time streaming of audit events to customer SIEM systems, such as Splunk. This connection allows notifications for various events, including action-related runtime events, auditable operations, user management, and configuration changes.</p> <p>Security information and event management (SIEM) is a methodology for detecting, analyzing, and responding to security threats to protect business operations. It integrates security information management (SIM) and security event management (SEM) into a unified system. For more information, see SIEM Integration.</p> <p>.NET Agent: Introducing the New .NET Sandbox</p> <p>The Lightrun .NET Sandbox is a central component in the Lightrun .NET agent. It verifies and validates full integrity of your application\u2019s behavior when running with Lightrun actions. The Lightrun Sandbox verifies and validates full integrity of your application\u2019s behavior when running with Lightrun actions. The Lightrun Sandbox guarantees no exceptions, system I/O, system calls, or state/flow changes, and ensures that only read-only code is ever added to your application. For more information, see Lightrun Architecture.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1364","title":"Version 1.36.4","text":"<p>Release date: 14 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fixed an internal issue related to the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1363","title":"Version 1.36.3","text":"<p>Release date: 10 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related to the .NET agent regarding <code>DebugType</code> portable support for IIS.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1362","title":"Version 1.36.2","text":"<p>Release date: 7 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fixed an internal issue related to the JetBrains plugin.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1361","title":"Version 1.36.1","text":"<p>Release date: 3 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fixed internal issues related to the .NET agent. </li> <li>Fixed an internal issue related to the JetBrains plugin.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1360","title":"Version 1.36.0","text":"<p>Release date: 1 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_1","title":"Feature Enhancements","text":"<p>Gain Insight into your Agent Consumption in the New Usage Dashboard</p> <p>Introducing the first phase of the Usage Dashboard,  now available to selected customers, as part of the Lightrun Management Portal, with a focus in this release on Agent usage. If you are interested in viewing your data in the dashboard, please contact us directly.</p> <p>Key Features:</p> <ul> <li>Real-Time Agent Monitoring: View the current number of active agents in your organization.</li> <li>Trend Analysis: Access a trend graph that displays the number of active agents over a specified period.</li> <li>Advanced Filtering: Utilize a set of advanced filters to customize the date range to suit your specific needs.</li> </ul> <p>For more details, see Usage Dashboard.</p> <p>Python Agent: Introduced New Snapshot-related Parameters in agent.config</p> <p>In this release, we have added a new set of snapshot-related parameters to the <code>agent.config</code> file. These new parameters include:</p> <ul> <li><code>max_collection_size</code>: Controls the number of items captured for a collection.</li> <li><code>max_watchlist_collection_size</code>: Controls the number of items captured for a collection in a watch expression.</li> <li><code>max_frames_with_vars</code>: Controls the number of top stack frames for which to read values of local variables.</li> <li><code>max_object_members</code>: Controls the number of properties captured in an object.</li> </ul> <p>For more information, see Python Configuration Parameters</p> <p>VS Code Plugin: Enhanced Action-related Capabilities</p> <p>You can now simply right-click on a line in your code to quickly add a Lightrun action. This new feature enhances your workflow by allowing more efficient debugging and monitoring directly from the editor.</p> <p>Node.js Agent: Node.js 22 Support</p> <p>The Lightrun Node.js agent now officially supports Node.js v.22.</p> <p>JetBrains IDE Plugins: JetBrains Minimum Version is 2022.3</p> <p>To ensure optimal performance and compatibility, we are updating the minimum supported JetBrains version to 2022.3.</p> <p>Effective Immediately: Users must update to JetBrains version 2022.3 or later to continue receiving updates and support for the plugin.</p> <p>Why This Change? This update is part of our ongoing efforts to enhance compatibility and provide better service to our customers.</p> <p>For any questions or assistance with updating, please contact our support team.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#june-2024","title":"June 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-1354","title":"Version 1.35.4","text":"<p>Release date: 23 June, 2024 (SaaS, On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fixed an internal issue related to the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1352","title":"Version 1.35.2","text":"<p>Release date: 19 June, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related to the .NET Agent.</li> <li>Fixed an issue related to the JetBrains plugin for Java.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1350","title":"Version 1.35.0","text":"<p>Release date: 17 June, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_2","title":"Feature Enhancements","text":"<p>Java Agent: Java 22 Support</p> <p>The Lightrun Java plugin now supports Java 22.</p> <p>Lightrun Server: Extended ARM64 Support</p> <p>Lightrun Server has extended support for on-premise deployments on ARM64, in addition to x86-64 for our existing platforms, plus Mac, which is ARM64 only.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1345","title":"Version 1.34.5","text":"<p>Release date: 10 July, 2024  (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related to the .NET agent regarding <code>DebugType</code> portable support for IIS.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1344","title":"Version 1.34.4","text":"<p>Release date: 20 June, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1343","title":"Version 1.34.3","text":"<p>Release date: 14 July, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fixed an internal issue related to the metrics flow in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1342","title":"Version 1.34.2","text":"<p>Release date: 5 June, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fixed an internal issue related to the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1341","title":"Version 1.34.1","text":"<p>Release date: 4 June, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fixed an issue related to installing the Lightrun plugin in JetBrains.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1340","title":"Version 1.34.0","text":"<p>Release date: 2 June, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_3","title":"Feature Enhancements","text":"<p>All Lightrun Agents: Extended Enhanced Log File Standardization</p> <p>Important</p> <p>Breaking Change: If you are sending the Lightrun agent log to a log management solution, please notice that the log file name has changed and may require changes from your side.</p> <p>In this release, we have standardized the log file naming conventions across all supported development languages. This update provides administrators with better control through consistent log naming, making it easier to identify and manage logs. In addition, we have aligned the following log-related parameters for all the agents:</p> <ul> <li><code>agent_log_target_dir</code></li> <li><code>agent_log_level</code></li> <li><code>agent_log_max_file_size_mb</code></li> <li><code>agent_log_max_file_count</code></li> </ul> <p>For more information, refer to Java, Python, Node.js and .NET documentation.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Fixed a number of security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#may-2024","title":"May 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-1332","title":"Version 1.33.2","text":"<p>Release date: 26 May, 2024 (SaaS, On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Fixed a security vulnerability in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1331","title":"Version 1.33.1","text":"<p>Release date: 21 May, 2024 (On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Fixed a security vulnerability in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1330","title":"Version 1.33.0","text":"<p>Release date: 20 May, 2024 (SaaS, On-Premise to follow the next week)</p> <pre><code>HEADS UP NOTICE: Introducing Enhanced Login Method to the Lightrun Server\n\nTo align with industry standards and to streamline and simplify the user login process for the Lightrun Server, we have implemented a single login method. This strategy eliminates the cumbersome task of managing multiple methods in parallel by allowing administrators to set a single login method from three options: user-defined password, SSO, or Google.\n\nFrom version 1.33, this new feature will be rolled out gradually and will only affect a number of selected customers.\n\nSo what's changed?\n\nWhen you apply the new login method, you will need to select your preferred login method. Until you do that, your existing users will be unaffected and will be able to continue working, as usual. However, the administrator will not be able to add new users until you select your preferred login method.\n\nOnce the administrator selects the preferred login method, users will receive an activation email. Users' history will remain unaffected, and as soon as users reactivate, they will be able to pick up right where they left off.\n\nStay tuned for further instructions as we roll out these changes.\n</code></pre>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_4","title":"Feature Enhancements","text":"<p>.NET Agent: Concurrent Support for Additional Profiling Tools</p> <p>Lightrun introduces support for profiler chaining in the .NET agent allowing you to run multiple profiling tools simultaneously on the same application or system. This feature allows developers and operators to gather performance data and insights from different profiling tools concurrently without conflicts or interference.</p> <p>In practical terms, profiler chaining enables the coexistence of an additional profiling agent or tool in parallel to Lightrun\u2019s .NET agent. For example, Lightrun's .NET agent and other Application Performance Monitoring (APM) tools, such as Datadog on the same .NET application or environment. Each profiling tool can collect specific types of performance data or provide unique insights into the application's behavior. For more information, see Profile chaining for the Lightrun .NET Lightrun agent. </p> <p>Java Agent: Enhanced Log File Naming Format </p> <p>Important</p> <p>Breaking Change: If you are sending the Lightrun agent log to a log management solution, please notice that the log file name has changed and may require changes from your side.</p> <p>In our ongoing commitment to providing administrators with enhanced control over their agents, we have standardized the log naming convention. This enhancement aims to make the convention more intuitive, facilitating easier identification and detection of your logs.</p> <p>The new format is: <code>lightrun_java_agent.&lt;PID&gt;.&lt;TIMESTAMP&gt;.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.log</code></p> <p>An example of the new log format: <code>lightrun_java_agent.22840.20240513-153557.1.log</code>  In the example, The new convention includes the log name - <code>lightrun_java_agent</code>, the log file PID - <code>22840</code>, the date and time following the <code>YYYYMMDD-HHMMSS</code> convention - <code>20240513-153557</code>, and the log rotation running index is <code>1</code>.</p> <p>To facilitate the transition, here is the log convention in previous versions:</p> Version Log Format Version 1.32 <code>lightrun.log.&lt;LOG_ROTATION_RUNNING_INDEX&gt;.&lt;TIMESTAMP&gt;.</code> Prior to version 1.32 <code>lightrun_java_agent.&lt;HOSTNAME&gt;.&lt;USER&gt;.log.&lt;TIMESTAMP&gt;.</code> <p>In forthcoming releases, this initiative will be extended to Node.js and .NET log files.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1325","title":"Version 1.32.5","text":"<p>Release date: 22 May, 2024 (On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Fixed a security vulnerability in the Lightrun server.</li> </ul>"},{"location":"release_notes/lightrun-release-notes/#version-1324","title":"Version 1.32.4","text":"<p>Release date: 20 May, 2024 (On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fix","title":"Bug Fix <ul> <li>Fixed an issue related to Single Sign-on (SSO).</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1323","title":"Version 1.32.3","text":"<p>Release date: 15 May, 2024 (On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_22","title":"Bug Fixes <ul> <li>Fixed a security vulnerability in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1321","title":"Version 1.32.1","text":"<p>Release date: 9 May, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_23","title":"Bug Fixes <ul> <li>Fixed a security vulnerability in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1320","title":"Version 1.32.0","text":"<p>Release date: 6 May, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_5","title":"Feature Enhancements","text":"<p>Java Agent: New Parameters for Customizing Agent-related Logs</p> <p>In this release, we introduced new parameters aimed at optimizing your Agents' log settings. Now, you have even greater control over how your Agents handle logs. You can fine-tune these settings using the following four configurable parameters, accessible via both the agent.config file, environment variables and the command line flags: <code>agent_log_max_file_size_mb</code>, <code>agent_log_max_file_count</code>, <code>agent_log_target_dir</code>, and <code>agent_log_level</code>. For more information, see Java Agent Configuration.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_24","title":"Bug Fixes <ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#april-2024","title":"April 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-1311","title":"Version 1.31.1","text":"<p>Release date: 22 April, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_25","title":"Bug Fixes <ul> <li>Fixed an issue related to SCIM in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1310","title":"Version 1.31.0","text":"<p>Release date: 21 April, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_6","title":"Feature Enhancements","text":"<p>NET Agent: Added Blocklisting Support</p> <p>We have expanded blocklisting support to the .NET agents. Blocklists can be used to prevent Lightrun actions from being inserted in classes that might expose sensitive data. Files and packages that include the patterns you've specified in the Blocklist table are protected and your team won't be able to add actions into those code areas. For more information, see Blocklists.</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_26","title":"Bug Fixes <ul> <li>Fixed an issue related to SCIM in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1302","title":"Version 1.30.2","text":"<p>Release date: 11 April 2024</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancement","title":"Feature Enhancement <p>.NET Agent: Support Apple Silicon Macs (M1, M2)</p> <p>You can now run the .Net Agent on M1 and M2 Apple silicon. This means that you can now create Lightrun actions (dynamic logs, and snapshots) using the .Net Agent. For more information, see .Net Agent System Requirements.</p>","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_27","title":"Bug Fixes <ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#march-2024","title":"March 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-1291","title":"Version 1.29.1","text":"<p>Release date: 24 March, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_28","title":"Bug Fixes <ul> <li>Fixed a security vulnerability in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1290","title":"Version 1.29.0","text":"<p>Release date: 24 March, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_7","title":"Feature Enhancements <p>Added Blocklisting Support</p> <p>We have expanded blocklisting support to the .NET agents. Blocklists can be used to prevent Lightrun actions from being inserted in classes that might expose sensitive data. Files and packages that include the patterns you've specified in the Blocklist table are protected and your team won't be able to add actions into those code areas. For more information, see Blocklists.</p>","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_29","title":"Bug Fixes <ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1281","title":"Version 1.28.1","text":"<p>Release Date: 17 March, 2024 (On-Premise)</p>"},{"location":"release_notes/lightrun-release-notes/#bug-fixes_30","title":"Bug Fixes <ul> <li>Fixed security vulnerabilities in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1280","title":"Version 1.28.0","text":"<p>Release Date: 10 March, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_8","title":"Feature Enhancements <p>Lightrun Management Portal Enhancements: Introducing the New Identity and Access Management Tab</p> <p>As part of our ongoing commitment to improving your experience with our Management Portal webUI, we've revamped the Settings section to offer a smoother user experience. Introducing the new Identity and Access Management tab, which now includes Users, Agent Pools, Permissions &amp; Access and the new Identity Configuration page. Additionally, to simplify login management, we've centralized SSO, SCIM, and Self Service settings under the revamped Identity Configuration page. Please note that the Self Service feature enables you to invite users using a preset URL to join your organization from the New Member page. It is important to mention that 'Self Service' is enabled by default.</p>","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_31","title":"Bug Fixes <ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#version-1270","title":"Version 1.27.0","text":"<p>Release Date: 25 February, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_9","title":"Feature Enhancements <p>Python Agent: Python 3.11.0 Support</p> <p>The Python Agent now supports Python 3.11.0.  Refer to Known Limitations for details.</p>","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_32","title":"Bug Fixes <ul> <li>Fixed multiple internal bugs and security vulnerabilities in the Lightrun server.</li> </ul>","text":""},{"location":"release_notes/lightrun-release-notes/#february-2024","title":"February 2024","text":""},{"location":"release_notes/lightrun-release-notes/#version-1260","title":"Version 1.26.0","text":"<p>Release Date: 18 February, 2024 (SaaS, On-Premise to follow the next week)</p>"},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_10","title":"Feature Enhancements <p>Java, Python, and, Node.JS Agents: PII Redaction Enhancements</p> <ul> <li>PII Redaction Now Processes Complex and Nested Objects<p>In this release, we have extended the support for PII redaction to nested objects to ensure comprehensive privacy protection within complex data structures, bolstering compliance efforts and minimizing the risk of data breaches. With this update, we've tackled the challenge of masking values within multi-level objects during PII Redaction by Name.</p> <p>Please note that when PII redaction is performed on Node.JS and Python languages, the nested objects will be redacted and displayed in the log lines as REDACTED. The behavior of the Lightrun Java agent differs, as it consistently masks nested objects higher than level 1 hierarchy with","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_33","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#version-1250","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_11","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_34","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#january-2024","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#version-1240","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_12","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_35","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#version-1231","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_13","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_36","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#version-1224","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_37","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#version-1223","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#feature-enhancements_14","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_38","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#version-1222","title":"Lightrun Release Notes","text":""},{"location":"release_notes/lightrun-release-notes/#bug-fixes_39","title":"Lightrun Release Notes","text":""},{"location":"release_notes/release-information/","title":"Lightrun release information","text":"<p>Lightrun offers dedicated release notes for each of its releases, encompassing key highlights, feature enhancements, and bug fixes. This document outlines the Lightrun release cycle, its components, and various considerations to keep in mind when upgrading your Lightrun application.</p>"},{"location":"release_notes/release-information/#which-lightrun-components-are-impacted-during-an-upgrade","title":"Which Lightrun components are impacted during an upgrade?","text":"<p>For optimal performance and access to the latest features, bug fixes, and security fixes, it is advisable to keep the Lightrun environment up-to-date with the most recent version. To fully benefit from the features introduced in a specific release, it is essential to ensure that all three components are upgraded to the corresponding version that includes these new functionalities.</p> <p>The Lightrun solution consists of three main components, all of which are required to be upgraded as part of the upgrade to the latest Lightrun release. These components include:</p> <ul> <li>Lightrun Management Portal: Referred to as the Lightrun server.</li> <li>Lightrun Plugin: Locally installed by users in their IDE.</li> <li>Lightrun Agents: Installed, usually by the customer\u2019s DevOps team, in the various runtime environments: Production, Staging, etc.</li> </ul>"},{"location":"release_notes/release-information/#what-lightrun-deployment-types-are-supported","title":"What Lightrun deployment types are supported?","text":"<p>Lightrun provides a number of  deployment options: Software as a Service (SaaS), Single tenant, and On-premise. Here's how they work:</p> <ul> <li>SaaS: Lightrun follows the Cloud-first strategy, with SaaS versions receiving updates every two weeks.</li> <li>Single-Tenant: A Lightrun-hosted, private management server private deployment In the cloud on a dedicated deployment and infrastructure. Updates for the single-tenant versions are released every two weeks.</li> <li>On-Premise: A fully-air gapped, on-premise management server, without exposing any data to the outside world. </li> </ul>"},{"location":"release_notes/release-information/#how-can-i-detect-what-lightrun-version-is-currently-running","title":"How can I detect what Lightrun version is currently running?","text":"<p>Ensuring you're up to date with the latest Lightrun versions for each of the Lightrun components is crucial for optimal performance. Here's how you can detect what Lightrun version is currently running. </p> Component Instructions Lightrun Management Portal - Visit <code>https://&lt;app-name&gt;.lightrun.com/version</code> to check the server version. Lightrun Agent - Navigate to Entities &gt; Agents &gt; Agent Version in the Lightrun Management Portal and check the <code>Agent Version</code> column. Lightrun Plugin - Open your IDE, go to the Marketplace (JetBrains: Plugins, VSCode: Extensions), and find the Lightrun plugin. Check the version in the Overview tab."},{"location":"release_notes/release-information/#what-actions-are-required-for-the-upgrade","title":"What actions are required for the upgrade?","text":"<p>The procedure for upgrading these Lightrun components to the latest version may differ based on your deployment type. To assist you in determining if any action is necessary on your part after the server has been upgraded, please consult the following table.</p> Deployment Type Lightrun Server Lightrun Plugin Lightrun Agents SaaS No action required  Automatically upgraded Requires user action  - User gets indication when a new release is available in the relevant IDE Marketplace. Requires user action  - Download Agents from the Management Portal Single Tenant No action required  Automatically upgraded Requires user action  - User gets indication when a new release is available in the relevant IDE Marketplace  Requires user action  - Download Agents from the Management Portal On-Premise Requires manual upgrade Requires user manual upgrade  Note: For JetBrains plugin users, you can also download from the custom plugin repository. Requires user action  - Download Agents from upgraded Management Portal"},{"location":"runtime_reachability_assessment/dynamic-sboms/","title":"Prioritize CVEs using Lightrun dynamic SBOMs","text":"<p>Note</p> <p>The Runtime Reachability Assessment feature is under limited availablity. Please contact us to gain access to this feature.</p> <p>Lightrun version 1.36 introduces the concept of Dynamic Software Bill of Materials (SBOMs), hereinafter referred to as SBOM. As a part of the Runtime Reachability Assessment, Lightrun generates an SBOM that offers insights into all the loaded libraries during runtime. This dynamic approach empowers developers to verify whether any of the loaded packages in their application have known CVEs (Common Vulnerabilities and Exposures). Additionally, it enables a comparison with a statically generated SBOM, helping identify packages included in the application but not actually being loaded. The SBOMs undergo updates every hour. </p> <p>In the Lightrun Management Portal, administrators can effortlessly view SBOMs on demand, with the option to export them as CSV, SPDX or CycloneDX files. The system provides an automatically updated SBOM for the current date by default, ensuring real-time accuracy. For enhanced flexibility, users with the manager-role can tailor SBOMs according to specific criteria using various filters such as SBOM creation time, package type, version number, or tag name. Unlike setting watched packages, SBOMs report on all the loaded libraries and classes in an application, eliminating the need for selecting packages manually.</p> <p>You can perform the following Dynamic SBOM-related tasks:</p> <ul> <li>Generate SBOMs by tags (Mandatory prerequisite)</li> </ul> <ul> <li>View an SBOM using customized filters</li> </ul> <ul> <li>Generate and export an SBOM to multiple file formats</li> </ul>"},{"location":"runtime_reachability_assessment/dynamic-sboms/#prerequisite-generate-sboms-by-tags","title":"Prerequisite: Generate SBOMs by tags","text":"<p>SBOMs are usually generated for specific services or applications. As a first step for collecting SBOM data you will need to choose for which application you wish to collect it. To do so, you should enter the list of Lightrun tags which represents the relevant application(s) and environments you wish to collect data from, for example, choose the tags: <code>MyService</code>, <code>Production</code>.</p> <p>Important</p> <p>This procedure is mandatory prior to collecting SBOM data.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Navigate to Runtime Reachability and click SBOM. </p> <p>The SBOM page opens.</p> <p></p> </li> <li> <p>Enter the tag name or multiple tags, or click Enter and select tags from a list of existing tags or manually enter future tags which do no not yet exist.     The tags are added to the list.</p> </li> <li>Click Save.     The SBOMs will be generated from this point based on the selected tags and viewable in the Dynamic SBOM tab under Runtime Reachability Assessment page.</li> </ol>"},{"location":"runtime_reachability_assessment/dynamic-sboms/#view-an-sbom-using-custom-filters","title":"View an SBOM using custom filters","text":"<p>By default, you can view the contents of an SBOM containing all your loaded or unloaded packages for your application, updated within the last 24 hours. You can customize the view by applying the following filters: SBOM Creation time, package type, version number, or tag.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Navigate to Runtime Reachability Assessment and click the Dynamic SBOM tab.     The default SBOM is displayed as a list of packages loaded within the last 24 hours.</p> <p></p> </li> <li> <p>To customize the view of the Dynamic SBOM, set the filters such as SBOM Creation time, Package, Version, or Tag. The resulting list will display the loaded packages included in the Dynamic SBOM.</p> </li> </ol>"},{"location":"runtime_reachability_assessment/dynamic-sboms/#generate-and-export-sboms","title":"Generate and Export SBOMs","text":"<p>You can generate and export SBOMs for the following formats:</p> <ul> <li>Export an SBOM an a CSV file</li> <li>Export an SBOM as am SPDX format</li> <li>Export an SBOM as a CycloneDX format</li> </ul>"},{"location":"runtime_reachability_assessment/dynamic-sboms/#export-an-sbom-as-a-csv-file","title":"Export an SBOM as a CSV file","text":"<p>You have the option to export your SBOM as a CSV file, providing detailed information about  the loaded packages in the runtime application. This export feature facilitates a more in-depth analysis of your CVE vulnerabilities.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Navigate to Runtime Reachability Assessment and click the Dynamic SBOM tab.     The list of SBOMs is displayed.</p> </li> <li> <p>Select the specific SBOM from the list and click Export as CSV.     The file is then downloaded to your local drive in the specified CSV format.</p> <p></p> </li> </ol>"},{"location":"runtime_reachability_assessment/dynamic-sboms/#export-an-sbom-as-an-spdx-file","title":"Export an SBOM as an SPDX file","text":"<p>SPDX is an open standard for communicating software bill of material information, including provenance, license, security, and other related information. It is an open source project hosted by the Linux Foundation. </p> <p>You can export your SBOM as an SPDX file, providing detailed information about the loaded packages in the runtime application. This export feature facilitates a more in-depth analysis of your CVE vulnerabilities.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Navigate to Runtime Reachability Assessment and click the Dynamic SBOM tab. The list of SBOMs is displayed.</li> <li> <p>From the Export Data list, select the SPDX Format.  The Generate SPDX SBOM Report dialog opens.</p> </li> <li> <p>In the Application Name field, enter the name of your application or package for which you want to generate the SBOM.</p> </li> <li>In the Supplier field, enter the name of your organization or author who created the application described in the SBOM document. </li> <li>In the Version field, enter the version of your application or package for which you want to generate the SBOM.</li> <li>Click Download SPDX Report.    The file is then downloaded to your local drive as a JSON file in the specified SPDX format.</li> </ol> <pre><code>   \"dataLicense\":\"CC0-1.0\",\"relationships\":[{\"relationshipType\":\"DESCRIBES\",\"relatedSpdxElement\":\"SPDXRef-RootPackage\",\"spdxElementId\":\"SPDXRef-DOCUMENT\"},{\"relatedSpdxElement\":\"SPDXRef-Package-SPRING-EXPRESSION\",\"comment\":\".spring-expression was loaded at runtime\",\"relationshipType\":\"RUNTIME_DEPENDENCY_OF\",\"spdxElementId\":\"SPDXRef-RootPackage\"},{\"relatedSpdxElement\":\"SPDXRef-Package-SLF4J-SIMPLE\",\"comment\":\"org.slf4j.slf4j-simple was loaded at runtime\",\"relationshipType\":\"RUNTIME_DEPENDENCY_OF\",\"spdxElementId\":\"SPDXRef-RootPackage\"},    </code></pre>"},{"location":"runtime_reachability_assessment/dynamic-sboms/#export-an-sbom-as-a-cyclonedx-file","title":"Export an SBOM as a CycloneDX file","text":"<p>CycloneDX is a full stack Software Bill of Materials (SBOM) standard, offering advanced features to enhance cybersecurity risk mitigation within supply chains. It serves multiple purposes in vulnerability analysis, including identification of known vulnerabilities, exploration of unknown vulnerabilities, assessment of vulnerability exploitability, and verification of remediation efforts. You can export your SBOM as a CycloneDX file, providing detailed information about the loaded packages in the runtime application. This export feature facilitates a more in-depth analysis of your CVE vulnerabilities.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Navigate to Runtime Reachability Assessment and click the Dynamic SBOM tab. The list of SBOMs is displayed.</li> <li>From the Export Data list, select the CycloneDX Format.     The Generate CycloneDX SBOM Report dialog opens.</li> <li>In the Application Name field, enter the name of your application or package for which you want to generate the SBOM.</li> <li> <p>Click Download CycloneDX Report.</p> <p>The file is then downloaded to your local drive in the specified CycloneDX format.</p> </li> </ol> <pre><code>    {\"specVersion\":\"1.5\",\"metadata\":{\"tools\":{\"services\":[{\"name\":\"Lightrun Runtime Reachability Analyzer\",\"provider\":{\"name\":\"Lightrun\"},\"version\":\"6.6\"}]},\"component\":{\"name\":\"simple-java-app\",\"licenses\":[],\"purl\":\"pkg:maven/null/simple-java-app@null?type=jar\",\"type\":\"library\",\"bom-ref\":\"pkg:maven/null/simple-java-app@null?type=jar\"},\"timestamp\":\"2024-03-05T10:29:05.375968Z\"},\"components\":[{\"bom-ref\":\"pkg:maven//spring-expression@6.0.12?type=jar\",\"evidence\":{\"occurrences\":[{\"location\":\"BOOT-INF/lib/spring-expression-6.0.12.jar\"}]},\"scope\":\"required\",\"name\":\"spring-expression\",\"hashes\":[{\"alg\":\"SHA-1\",\"content\":\"TBD\"}],\"purl\":\"pkg:maven//spring-expression@6.0.12?type=jar\",\"type\":\"library\",\"version\":\"6.0.12\",\"group\":\"\"},{\"bom-ref\":\"pkg:maven/org.slf4j/slf4j-simple@2.0.9?type=jar\",\"evidence\":{\"occurrences\":[{\"location\":\"BOOT-INF/lib/slf4j-simple-2.0.9.jar\"}]}\n</code></pre>"},{"location":"runtime_reachability_assessment/overview/","title":"Lightrun Runtime Reachability Assessment","text":"<p>Note</p> <p>The Runtime Reachability Assessment feature is under limited availablity. Please contact us to gain access to this feature.</p> <p>As a developer, safeguarding your application goes beyond debugging; it involves ensuring overall quality and security to prevent vulnerabilities and breaches. The task of scrutinizing software libraries for Common Vulnerabilities and Exposures (CVEs) can be daunting, often involves reviewing extensive lists from security analysis tools. The Lightrun Runtime Reachability Assessment feature simplifies this challenge by enabling the easy identification of packages and classes loaded in real-time. It aids in prioritizing CVEs by providing insights into their current usage, emphasizing the urgency for remediation.</p> <p>To prioritize the resolution of CVEs, Lightrun offers two mechanisms for examining loaded packages and classes in your application. When used together, these mechanisms provide a multilayered solution to enhance the protection of your data. The first is designed for setting watches on specific packages with known CVEs, providing a targeted approach. In contrast, the second allows for a comprehensive review of all loaded packages in the application for prioritization. These mechanisms provide flexibility and efficiency in managing and prioritizing security concerns throughout the development process.</p>"},{"location":"runtime_reachability_assessment/overview/#prerequisites","title":"Prerequisites","text":"<ul> <li>This feature is available for the Lightrun Java Agent.</li> <li>It is accessible to a limited number of customers as part of a private Beta release and will be gradually expanded to a broader audience.</li> <li>To enable the feature, add the following parameters to your <code>agent.config</code> file: <pre><code>runtime_reachability_watched_packages_enabled=1\nruntime_reachability_dynamic_sbom_enabled=1\n</code></pre> </li> </ul> <ul> <li>You can modify elements related to the Runtime Reachability Assessment\u2019s behavior by configuring the following properties. Configuring the agent properties can be done either from the command line flags or from the <code>agent.config</code> file.  Parameter Name Description Default value Type <code>runtime_reachability_watched_packages_enabled</code> Enables adding watched packages.Value can be 0 (disabled), or 1 (enabled). 0 bool <code>package_tracking_thread_frequency_sec</code> Set the frequency of the package tracking thread in seconds. 10 int32 <code>watched_packages_sync_frequency_sec</code> Set the frequency of syncing watched packages with server in seconds. 5 * 60  (5 minutes) int32 <code>runtime_reachability_dynamic_sbom_enabled</code> Enables viewing and exporting SBOMs. Value can be 0 (disabled), or 1 (enabled) 0 bool <code>dynamic_sbom_report_frequency_sec</code> Set how often the dynamic SBOM report will be refreshed. 60 * 60 (1 hour) int32 <code>report_sbom_on_shutdown</code> Send the Dynamic SBOM report on agent shutdown. <code>true</code> bool <code>dynamic_sbom_first_report_max_delay_sec</code> Maximum time in seconds to start reporting a SBOM for the first time. 600 (10 minutes) int32 </li> </ul>"},{"location":"runtime_reachability_assessment/overview/#get-started","title":"Get Started","text":"<p>The Runtime Reachability Assessment feature can be configured using two of the fowllowing methods and requires administrative permissions:</p> <ul> <li>The Lightrun REST API.</li> </ul> <ul> <li> <p>The Lightrun Management Portal. </p> <ul> <li> <p>Add selected packages and classes to the loaded packages watch list:</p> <ol> <li> <p>Add Java libraries to the Watched Packages for tracking vulnerable packages.</p> </li> <li> <p>View and track which of the watched packages are loaded at runtime.</p> </li> </ol> </li> </ul> <ul> <li>Manage Dynamic SBOMS:</li> <li> <p>View all loaded packages in a Dynamic SBOM</p> <p>To conduct a more in-depth investigation of CVEs, we support Dynamic SBOMs. You can review a dynamic SBOM displaying all the loaded packages in your application, or utilize a set of filters to focus on specific information.</p> </li> </ul> <ul> <li> <p>Export your SBOM as a downloadable file</p> <p>Export your SBOM as an external file, that includes detailed information about the loaded packages in the runtime application. Multiple export formats are supported including CSV, SPDX, and Cyclone.</p> </li> </ul> </li> </ul>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/","title":"View loaded dynamic packages in your application","text":"<p>Note</p> <p>The Runtime Reachability Assessment feature is under limited availablity. Please contact us to gain access to this feature.</p> <p>Lightrun enables you to monitor and receive notifications about dynamically loaded packages in your application during runtime. This functionality operates by tracking a predefined list of packages that you've added to a watchlist.</p> <p>As part of the Runtime Reachability Assessment feature, once you've set up the watch list, you can proceed to manually review the status of the monitored packages and classes or set up notifications to be triggered in your target third-party applications using webhooks. </p>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#before-you-begin","title":"Before you begin","text":"<ol> <li>Add the packages you want to track to the watch list.</li> <li>(Optional) To receive automated notifications in your third-party applications, configure at least one webhook.</li> </ol>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#view-loaded-not-loaded-dynamic-packages-based-on-watch-list","title":"View loaded/ not loaded dynamic packages based on watch list","text":"<ol> <li>Log in to your Lightrun account.</li> <li> <p>Navigate to Runtime Reachability Assessment and click the Loaded Packages tab.</p> <p>The list of Loaded and Not Loaded packages and classes are displayed.</p> </li> <li> <p>(Optional) You can filter using a set of filters to narrow down the view based on your requirements.    </p> </li> <li>You can expand this list by adding more packages to the Watch list. Simply click Add Packages, and you will be directed to the Watched Packages page.</li> </ol>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#notifications","title":"Get notifications for loaded packages","text":"<p>To help you keep track of your monitored loaded packages without needing to manually review the Loaded packages list constantly, you can create notifications for each of your monitored packages. This way, you'll receive alerts when they are loaded into your live application based on the integration with webhooks.</p> <p>Prerequisite</p> <p>Before proceeding, ensure you have set up at least one webhook. For more information, see Webhooks.</p>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#set-up-a-notification","title":"Set up a notification","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Navigate to the Runtime Reachability Assessment section and click the Loaded Packages tab. </p> <p>The Loaded Packages page opens.</p> <p></p> </li> <li> <p>In the required Watched package line, click the Notifications icon.</p> <p>The Set notification dialog opens.</p> <p></p> </li> <li> <p>Set the notification details:</p> <p>a. Enter the Package Name. </p> <p>b. Package Version: Select a specific version. Leave it empty to apply all versions.</p> <p>c. Notification Method: Select a Webhook from a preset list.  </p> <p>When a webhook is triggered, it sends a notification to a web location that is listening for that specific event notification. To learn more, click Webhooks. </p> </li> <li> <p>Click Set Notification.</p> </li> </ol>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#manage-notifications","title":"Manage notifications","text":""},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#about-notifications-icons","title":"About notifications icons","text":"<p>The following table lists the supported notification icons and what they indicate:</p> Icon Description Set a notification for when a package is loaded. A notification has been set on the package. Click the icon to remove the notification. The notification has been triggered. Note that it may take up to an hour for it to appear in the targeted tool. Cannot be configured since the package is already loaded."},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#delete-a-notification","title":"Delete a notification","text":"<p>You can delete an active notification for a package that has not yet been loaded. However, you cannot delete a notification for a package that has already been tagged as loaded.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Navigate to the Runtime Reachability section and click Loaded Packages. </p> <p>The Loaded Packages page opens.</p> </li> <li> <p>Hover over the Notification.</p> <p>The Delete notification tooltip is displayed.</p> <p></p> </li> <li> <p>Click Delete Notification.</p> </li> </ol>"},{"location":"runtime_reachability_assessment/view-loaded-not-loaded-packages/#export-watched-loaded-not-loaded-packges-to-a-json-file","title":"Export watched loaded/ not loaded packges to a JSON file","text":"<p>You have the option to export your SBOM as a JSON file, providing detailed information about the loaded packages in the runtime application. This export feature facilitates a more in-depth analysis of your CVE vulnerabilities.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Navigate to Runtime Reachability Assessment and click the Loaded Packages tab.     The list of packages is displayed.</li> <li> <p>Click Export as JSON.</p> <p>The file is then downloaded to your local drive as a dedicated JSON file as displayed in the following example. <code>lightrun_loaded_packages-2024-02-08T07_28_58.992Z.json</code></p> <pre><code>   [\n{\n\"package\": {\n\"name\": \"org.json:json\",\n            \"version\": \"20230618\",\n            \"agents\": 5,\n            \"tags\": [],\n            \"status\": \"LOADED\",\n            \"classes\": [\n{\n\"name\": \"org.json.JSONObject\",\n               \"status\": \"NOT_LOADED\",\n               \"agents\": 5,\n               \"tags\": []\n},\n            {\n\"name\": \"org.json.JSONObjection\",\n               \"status\": \"LOADED\",\n               \"agents\": 5,\n               \"tags\": []\n}\n]\n}\n},\n      {\n\"package\": {\n\"name\": \"org.apache.commons:commons-lang3\",\n            \"version\": \"3.14.0\",\n            \"agents\": 5,\n            \"tags\": [],\n            \"status\": \"NOT\",\n            \"classes\": []\n}\n},\n      {\n\"package\": {\n\"name\": \"org.springframework:spring-web\",\n            \"version\": \"6.0.13\",\n            \"agents\": 4,\n            \"tags\": [],\n            \"status\": \"NOT_LOADED\",\n            \"classes\": [\n{\n\"name\": \"org.springframework.http.HttpStatus.Series\",\n               \"status\": \"LOADED\",\n               \"agents\": 4,\n               \"tags\": []\n},\n            {\n\"name\": \"org.spring.net.load\",\n               \"status\": \"NOT_LOADED\",\n               \"agents\": 4,\n               \"tags\": []\n},\n            {\n\"name\": \"org.springframework.http.HttpMethod\",\n               \"status\": \"LOADED\",\n               \"agents\": 4,\n               \"tags\": []\n}\n]\n}\n}\n]\n</code></pre> </li> </ol>"},{"location":"runtime_reachability_assessment/watch-packages/","title":"Prioritize CVE resolution based on loaded packages","text":"<p>Note</p> <p>The Runtime Reachability Assessment feature is under limited availablity. Please contact us to gain access to this feature.</p> <p>Understanding the libraries and classes loaded during runtime is crucial for effective prioritization and targeted resolution of potential CVEs. This knowledge enables you to concentrate on prioritizing fixes for CVE in loaded packages.</p> <p>The Lightrun Reachability feature enables you to focus on prioritizing CVEs, determining which CVEs have a higher severity since the affected packages are loaded in runtime, and assigning lower priorities to those with less severe threats. To gain further granularity, you can track specific classes within the vulnerable package that contains the vulnerability. This approach provides more precise results by determining whether those specific classes were loaded. This use case is tailored for teams already aware of specific libraries prone to CVEs. For more information, see Lightrun Runtime Reachability Assessment. </p> <p>Once you have added the package and classes to the watch list, Lightrun scans the package and its components, indicating whether they are loaded or not. The results are displayed in the Loaded Packages tab, available after a one-hour period. For instructions on viewing the results, see View loaded and not loaded dynamic packages.</p> <p>Proceed to add packages and classes to the watchlist either manually, one by one, or utilize bulk import through a CSV file. Additionally, you can perform a set of housekeeping tasks, including editing or removing packages from the list, as described in the following sections.</p>"},{"location":"runtime_reachability_assessment/watch-packages/#add-packages-and-classes-to-your-watch-list","title":"Add packages and classes to your watch list","text":"<ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Navigate to the Runtime Reachability section and click Watched Packages.    The Watched Packages page opens.</li> <li> <p>Click +Add Package. </p> <p>The Add a Package dialog opens.</p> <p></p> </li> <li> <p>Enter the following package details according to the Maven package naming convention:</p> <ul> <li><code>Name</code>: <code>groupId:artifactId</code>.   <code>artifactId</code> is the name of the Jar without the version using lower letters and no special characters.  For example: <code>org.xerial.snappy:snappy-java</code>.  Note that under certain circumstances where  cannot be determined, an empty string will be displayed and only the   will be displayed. <li><code>Version</code>: This field is optional. if left empty, all versions for the package will be monitored. For example: When using version <code>1</code> the following versions will be matched: <code>1</code>, <code>1.x</code>, <code>1.x.y</code> (<code>1</code>, <code>1.2</code>, <code>1.0.3</code>). When using version <code>1.2</code> the following versions will be matched: <code>1.2</code>, <code>1.2.x</code> (<code>1.2</code>, <code>1.2.3</code>). </li> <li><code>Watched Classes</code>: This field is optional. Use both lower or upper class letters with periods for each class abbreviation. For example: <code>foo.bar.ClassName</code>. </li> <li>Click Add.    The results become available within, or up to, (it depends on when the last time the agent synced the watched packages), a 5-minute period, clearly specifying the status as either Loaded or Not Loaded in the Loaded Packages page.</li>"},{"location":"runtime_reachability_assessment/watch-packages/#import-packages-in-bulk","title":"Import packages in bulk","text":"<p>You can effortlessly upload multiple packages at once by utilizing a predefined CSV file. </p> <p>The package names need to conform to the Maven package naming convention:</p> <ul> <li> <p>Name: <code>groupId:artifactId</code>. </p> <p><code>artifactId</code> is the name of the Jar without the version using lower letters and no special characters. For example: <code>org.xerial.snappy:snappy-java</code>. </p> </li> </ul> <ul> <li>Version: This field is optional. when left empty, all versions for the package will be monitored.</li> <li>Watched Classes: This field is optional. Use both lower or upper class letters with periods for    each class abbreviation. For example: <code>foo.bar.ClassName</code>.</li> </ul>"},{"location":"runtime_reachability_assessment/watch-packages/#import-packages-in-bulk-using-a-csv-file","title":"Import Packages in bulk using a CSV File","text":"<ol> <li> <p>Create a CSV file containing the list of packages to be imported, following the format displayed in this example.</p> <p></p> </li> <li> <p>Log in to your Lightrun account.</p> </li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li> <p>Navigate to the Runtime Reachability section and click Watched Packages. </p> <p>The Watched Packages page opens.</p> <p></p> </li> <li> <p>Click Upload from CSV.</p> <p>This will prompt your file explorer to open, allowing you to select your predefined CSV file.</p> </li> <li> <p>Select the CSV file to upload.</p> <p>The Upload from CSV dialog opens.</p> <p></p> </li> <li> <p>Click Upload File.</p> <p>Note that all the history of your existing package included in your Watch list will be overwritten by the new packages imported from the uploaded file.</p> </li> </ol>"},{"location":"runtime_reachability_assessment/watch-packages/#manage-your-packages-in-the-watch-list","title":"Manage your packages in the watch list","text":"<p>You can perform various tasks on your watched packages including editing and removing watched packages.</p>"},{"location":"runtime_reachability_assessment/watch-packages/#edit-a-watched-package","title":"EDIT A WATCHED PACKAGE","text":"<p>In cases where an error is detected in the package name or version, follow these steps to edit the package information. Note that saving the edited package classifies it as a new package, resulting in the removal of previously collected data.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Navigate to the Runtime Reachability section and click the Watched Packages tab.    The list of Loaded and Not Loaded packages is displayed.</li> <li> <p>In the selected package row, click .</p> <p>The Edit a Package dialog opens.</p> <p></p> </li> <li> <p>Modify the information as required and click Save.</p> </li> </ol>"},{"location":"runtime_reachability_assessment/watch-packages/#remove-a-package-from-the-watch-list","title":"REMOVE A PACKAGE FROM THE WATCH LIST","text":"<p>To remove a package from your watch list, follow these steps. Be aware that all information collected for this watched package will be erased.</p> <ol> <li>Log in to your Lightrun account.</li> <li>Click Settings on the top right-hand side of your screen to navigate to the Settings dashboard.</li> <li>Navigate to the Runtime Reachability section and click the Watched Packages tab.    The list of Loaded and Not Loaded packages is displayed.</li> <li> <p>To remove the package, click the selected package row, and click .</p> <p>A confirmation message opens.</p> <p></p> </li> <li> <p>Click Remove. Note that all the data generated for the loaded package will be deleted.</p> </li> </ol>"},{"location":"troubleshooting/java-troubleshooting/","title":"Java troubleshooting guide","text":"<p>Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of some more common issues and possible solutions.</p>"},{"location":"troubleshooting/java-troubleshooting/#system-error-messages","title":"System error messages","text":"Error Description How to fix <code>Encountered an issue with a Lightrun PII Redaction pattern. Please contact your admin for support.</code> You cannot add an action to your code because a faulty PII redaction pattern was defined. Try the following:  <ul><li> Check that the PII Redaction patterns are valid in the PII Redaction page in the Lightrun Management Portal and test the redaction process.</li> <code>An exception occurred: java.lang.NullPointerException.</code> Thrown during the evaluation of an expression/condition. Try the following:  <ul><li> In the Management Portal &gt; PII Redaction page, select the pattern and run it in the Regex tester.</li> <ul><li> Fix the expression/condition to avoid accessing properties with null value or methods returning a null value.</li> <code>Collision in breakpoint location on the same tree.</code> Dependent on the metric type: <ul><li>\u00a0Tic &amp; Toc metric: If both the start and the end of a Tic &amp; Toc metric are placed on the same line.</li> <ul><li> Method duration metric: Could not determine all the method exit points.</li> Try the following, based on the action: <ul><li> Tic &amp; Toc metric:    Place the Lightrun action on two different lines of code.</li><ul><li>Method Duration metric: Use a Tic &amp; Toc metric instead.</li> <code>Expression could not be compiled.</code> The expression contains a syntax error and could not be compiled. Try the following:  <ul><li>Validate your expression. Applicable when writing expressions using Java, Scala, or Kotlin.</li> <code>General agent error at %</code> The variable used in the expression was not found. Try the following: <ul><li> Ensure that your application is compiled with debug symbols.</li><ul><li> Verify that the identifier is available within the Lightrun action scope. Variables can be located in an inner block and may not be directly accessible from the method's block. Ensure that no other agent is running simultaneously.</li> <code>The%method %is undefined for the type %.</code> Method not found. Try the following: <ul><li> Attempt type casting in the condition/expression field.</li> <ul><li>Specify the relevant package name in the condition/expression field.</li> <code>Stack overflow</code> Amount of call stack memory allocated by the JVM is exceeded. Try the following:<ul><li> Make sure your expression/condition doesn't create a deep stack depth.</li> <code>calling % is not allowed</code> State changing method is not authorized to be used in an expression/condition. Try the following:<ul><li> Verify that the expression/condition is not calling a method that is not read-only (state changing).</li> <code>Method execution uses too many classes, which can affect application performance</code> The executedmethod relies on, or interacts with a large number of classes. Try the following: <ul><li>If your expression calls a method, try referring to a variable. </li><ul><li>Change the <code>expression_max_classes_load_quota command-line</code> flag (default is 50).</li> <code>The identifier % is ambiguous (possible matches: %</code> There are possibly multiple classes sharing the same name. Could not determine which of them should be used when evaluating the expression. Try the following: <ul><li> Use a fully qualified package name for the ambiguous identifier.</li> <code>Internal error at %</code> The agent couldn't perform the requested operation. Try the following:  <ul><li>  Ensure that you are not  using another debugger in parallel to Lightrun. </li><ul><li> Validate that there is no <code>-jdwp</code> flag in the JVM arguments.</li> <code>Cancelled the condition evaluation % might affect the application performance%</code> Condition exceeds condition quota. Try the following:  <ul><li>Simplify your condition.</li><ul><li>Change the quota configurations for your agent. </li><ul><li>Use <code>IGNORE_QUOTA</code> role if this condition can't be modified. Please note that it may have performance impact.</li><ul><li>The condition is called too many times. Change the condition. <code>The agent couldn't find the given filename. Verify the action filename.</code> The agent couldn't find the file. Try the following:<ul><li>Verify the file name.</li><ul><li>Add the relevant JAR or folder containing debugged class using the <code>lightrun_extra_class_path parameter</code>. For more information, see Configure the Java agent.</li><ul><li>Verify that the action is placed on an application which contains the debugged class by choosing the correct agent or tag.</li> <code>Invalid expression syntax</code> Expression has a syntax error. Try the following: <ul><li>Validate the syntax, ensuring that expressions follow Java syntax conventions (or Scala, Kotlin when applicable).<ul> <code>No code found at &amp;</code> No executable code found on the requested line. Try the following: <ul><li>Make sure you are using the same source version as the one running in the target environment.</li><ul><li>Place the Lightrun action on a valid line of code. For example, you cannot place an action on an empty line of code.</li><ul><li>Confirm that the Lightrun action was not inserted into your <code>__main__</code> method</li> <code>Type mismatch</code> There is an attempt to use a value in a way that is incompatible with its data type, violating the expected type in a given context. Try the following: <ul><li>Compare a boxed variable with an unboxed variable. <ul><li>Assign a boxed variable to an unboxed variable.  Assign an unboxed variable to a boxed variable.  <ul><li>Enable <code>boxing_unboxing_enabled</code> in your agent configuration.</li> <code>The agent couldn't find the given filename. Verify the action filename</code> Agent couldn't find the file. Try the following: <ul><li>Verify the file name.</li> <ul><li>Add the relevant jar to <code>lightrun_extra_class_path</code>.</li><ul><li>Verify that you selected the correct agent or tag.</li> <code>Identifier % not found</code> Variable in expression was not found. Try the following: <ul><li>Make sure your application is compiled with debug symbols.</li><ul><li>Verify the identifier is available in the Lightrun action scope.</li> <code>Internal error at %</code> The agent couldn't perform the requested operation. Try the following:  <ul><li>Verify you don't use another debugger in addition to Lightrun.</li> <code>Invalid expression syntax</code> Expression has syntax errors. Try the following:  <ul><li>Validate your syntax and make sure you use Java syntax for expressions (Also when using Scala or Kotlin).</li> <code>Method xyz blocked (INVOKEDYNAMIC not supported)</code> A type mismatch in your Java expression or condition statement. For example, when you try to compare a boxed variable with an unboxed variable, assign a boxed variable to an unboxed variable, assign an unboxed variable to a boxed variable, etc. Try the following: <ul><li> Enable <code>Invokedynamic</code> support in your JVM agent configuration. For more information, see Enable Invoke Dynamic.</li>"},{"location":"troubleshooting/java-troubleshooting/#general-issues","title":"General issues","text":""},{"location":"troubleshooting/java-troubleshooting/#_self_signed_certificate_is_blocked","title":"Self-signed certificate is blocked","text":"<p>Troubleshooting for this issue can vary depending on your browser, its version, or your operating system. </p> <p>For guidance on resolving certificate issues with popular browsers and operating systems, refer to the following articles:</p> <ul> <li>Getting Chrome to accept self-signed localhost certificate (per         Chrome         version)</li> </ul> <ul> <li>Ubuntu: Adding a self-signed certificate to the \"trusted         list\"</li> </ul> <ul> <li>Creating and Trusting Self-Signed Certs on MacOS and         Chrome/Safari</li> </ul> <ul> <li>How to trust a self-signed SSL certificate in IE11 and         Edge</li> </ul> <ul> <li>How do you get Chrome to accept a self-signed certificate on         Win10</li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#plugin-issues","title":"Plugin issues","text":""},{"location":"troubleshooting/java-troubleshooting/#cant-see-the-lightrun-plugin-sidebar","title":"Can't see the Lightrun plugin sidebar","text":"<p>If you can't see the plugin from your IDE, check that:</p> <ul> <li>The IntelliJ default is not set to Collapse. </li> </ul> <ul> <li>The plugin is installed and activated.</li> </ul> <ul> <li>Check the plugin's settings by navigating to View &gt; Tool Windows &gt; Lightrun.</li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#cant-sign-in-from-the-plugin","title":"Can't sign in from the plugin","text":"<p>If you can't sign in to the server from the plugin, check that:</p> <ul> <li>There is connectivity to the server (cloud).</li> </ul> <ul> <li>The Lightrun Server URL in the plugin's settings (found under the IDE's Preferences / Settings &gt; Lightrun) is correct. Ensure it matches the URL displayed in the browser page from which you're attempting to authenticate.</li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#cant-sign-in-from-the-browser-for-the-plugin-or-cli","title":"Can't sign in from the browser for the plugin or CLI","text":"<p>If you can't log in from your browser, check that: </p> <ul> <li>The client can communicate with the server (the cloud). Ensure it matches the URL displayed in the browser page from which you're attempting to authenticate.</li> </ul> <ul> <li>There may be a problem with the embedded browser in your IDE. Try disabling Use Embedded Browser option for IntelliJ from the IDE Settings menu and then try logging in again. </li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#agent-issues","title":"Agent issues","text":""},{"location":"troubleshooting/java-troubleshooting/#agents-dont-appear-in-the-agents-tab-in-the-lightrun-sidebar","title":"Agents don't appear in the Agents tab in the Lightrun sidebar","text":"<p>If agents don't appear in the IDE, it may indicate that they are not currently running on the server where your application is located. If you're certain that the agent is running, then this error could be due to connection or authentication issues on the client side.</p> <p>If you are unable to see agents in the IDE, try the following:</p> <ol> <li> <p>Validate that you have selected the correct agent pool.</p> </li> <li> <p>Restart the IDE.</p> </li> <li> <p>Re-authenticate Lightrun from within the IDE.</p> </li> </ol> <p>If the agents still fail to appear, contact your administrator for assistance.</p>"},{"location":"troubleshooting/java-troubleshooting/#action-issues","title":"Action issues","text":""},{"location":"troubleshooting/java-troubleshooting/#lightrun-actions-in-this-file-were-submitted-against-a-different-version","title":"Lightrun actions in this file were submitted against a different version","text":"<pre><code>![Notification warning - \\\"Lightrun actions in this file were submitted against a different version...\\\"](assets/images/source-version-warning-notification.png)\n</code></pre> <p>This warning appears when one or more actions in the currently open file were set against a different version of the source code. This might occur if you set an action after making edits to the file or someone else, whose source code differs from yours, sets an action on the same file.</p> <p>While this warning can be ignored as does not prevent the activation of the action, it's important to note that actions set on mismatching source code can lead to unexpected behavior. Therefore, it's recommended to address this issue if it arises.</p> <p>To resolve this, try the following:</p> <ul> <li>Ensure the application you are debugging is using the same file as the code that you've opened in your editor (or the editor of whoever set the action).</li> </ul> <ul> <li>Try closing and reopening the file.</li> </ul> <ul> <li>If the problem persists, disable the warning by clicking Don't Show this Again in the notification panel.</li> </ul> <p>Important</p> <p>Disabling this notification will also affect how others view the actions that you have set.</p>"},{"location":"troubleshooting/java-troubleshooting/#cant-see-dynamic-logs-in-my-ide","title":"Can't see dynamic logs in my IDE","text":"<p>Logs only appear in the IDE if piping is configured correctly. If you are unable to see logs, try the following:</p> <ul> <li>Double-check the piping configuration to ensure it's set to Plugin or Both.</li> </ul> <ul> <li>Check all of the Lightrun Console filters to ensure you haven't filtered out the dynamic logs you're looking for.<p></p> </li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#metrics-not-reported-in-integrated-tool","title":"Metrics not reported in integrated tool","text":"<p>Consider the following troubleshooting steps:</p> <ul> <li>Double-check the configurations for your webhook and application settings, ensuring the credentials used for integration are correct.</li> </ul> <ul> <li>Verify that any other integration settings are accurate for the third-party platform you're using to ensure our server can successfully send information to it.</li> </ul> <ul> <li>Confirm that piping is enabled.</li> </ul> <ul> <li>After sending logs, allow some time for the platform to index and make them available for search. Typically, this process takes anywhere from seconds to one minute, but occasionally it may take longer.</li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#cant-create-a-new-action","title":"Can't create a new action","text":"<p>Sometimes you can't create an active action for a variety of different reasons, and you may encounter them in the following scenarios: </p> <ul> <li>You can't create a new action.</li> <li>An action you created appears in red in the IDE.</li> <li>The only actions that appear in the IDE are for tags.</li> <li>You can't find the agent list in the IDE.</li> </ul> <p>Try the following:</p> <ul> <li>Ensure that you are logged in by attempting to log out and then log back in. </li> </ul> <ul> <li>Verify that you are attempting to insert the action from a line containing code. In the IDE, ensure the cursor is positioned within your code. In the CLI, double-check the validity of the line number used. </li> </ul> <ul> <li>Confirm the status of the agent. If it's inaccessible, reach out to one of your account managers for assistance.</li> </ul> <ul> <li>Check if you are not connected to the correct source code version (the same version currently running with the agent). Try closing and reopening the source code file, ensuring you're opening the file directly from the correct source version. </li> </ul> <ul> <li>Consider upgrading your plugin to the latest version, as it may resolve compatibility issues.</li> </ul>"},{"location":"troubleshooting/java-troubleshooting/#cant-delete-an-existing-action","title":"Can't delete an existing action","text":"<p>If you can't delete an action, verify that:</p> <ul> <li>You're logged in.</li> </ul> <ul> <li>The agent you're using is currently running. Try running <code>list-agents</code> to check.</li> </ul> <p>Try the following:</p> <p>Move the action insertion position to the line following the one for which the log is intended to trigger.</p>"},{"location":"troubleshooting/java-troubleshooting/#source-file-not-found","title":"Source file not found","text":"<p>This usually happens when the relevant JAR is not on the classpath.</p> <p>When spinning up your application with the Lightrun agent attached, add the <code>lightrun_extra_class_path</code> command line argument to fix the problem:</p> <pre><code>   java -agentpath:&lt;PATH_TO_AGENT&gt;/lightrun_agent.so=--lightrun_extra_class_path=&lt;PATH_TO_JAR&gt; YourApplication\n</code></pre>"},{"location":"troubleshooting/java-troubleshooting/#expression-not-allowed","title":"Expression not allowed","text":"<p>Lightrun blocks expressions that are considered harmful to your server, can overload the Lightrun agent and server, or expressions that carry a large performance penalty.</p> <p>These prohibited expressions include:</p> <ul> <li>Expressions that change the state of your application, such as, setting object fields, static fields, or modifying array elements.</li> <li>Expressions that involves calling native methods.</li> <li>Expressions that create global variables.</li> <li>Expressions implementing operations like division by zero, infinite recursions, out-of-bound reads, or null pointer reference.</li> <li>Expressions that cause CPU halts.</li> <li>Expressions attempting to access external resources.</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/","title":"Node.js troubleshooting guide","text":"<p>Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of some more common issues and possible solutions.</p>"},{"location":"troubleshooting/node-troubleshooting/#system-error-messages","title":"System error messages","text":"Error Description How to fix <code>Encountered an issue with a Lightrun PII Redaction pattern. Please contact your admin for support.</code> You cannot add an action to your code because a faulty PII redaction pattern was defined. Try the following: <ul><li>Check that the PII Redaction patterns are valid in the PII Redaction page in the Lightrun Management Portal and test the redaction process.</li> <code>A script matching the source file was not found loaded on the debuggee</code> Agent could not find requested filename. Try the following: <ul><li>Verify the file name.</li><ul><li> Make sure you are using the same source version. </li><ul><li> If you inserted lightrun actions into an external file or third-party module like <code>node_modules</code>, make you specify the file/module path in your agent configuration. See extraPaths. <code>Could not determine the output file associated with the transpiled input file</code> Missing TypeScript mapping files. Try the following: <ul><li>Include TypeScript mapping files, see Running the agent in TypeScript applications. </li> <code>Multiple files match the path specified</code> There is more than 1 possible match for the requested filename. Try the following:  <ul><li>Provide distinguished path with the filename attribute.</li><ul><li>Use a complete path when specifying <code>extraPaths</code>. For example, <code>node_modules/module_name</code> instead of <code>node_modules</code>. See extraPaths. </li> <code>Couldn't evaluate the given condition as it might affect app performance.</code> An action may be placed on a frequently called line or if the condition takes a considerable amount of time to compute. Try the following:<ul><li>Simplify the condition. </li><ul><li>Place the action in a different location.</li><ul><li>If needed, enable the <code>IGNORE_QUOTA</code> configuration. This requires the ignore quota permission. Be aware that enabling the ignore quota flag may impact the performance of the application.</li> <code>The agent couldn't find the given filename. Verify the action filename.</code> The Agent couldn't find the file. Try the following:  <ul><li>Source &amp; Location: Double-check the file name and make sure you have selected the correct source (agent/tag).</li><ul><li> Source Version: Ensure you are using the correct source version.</li><ul><li>If you have integrated Lightrun actions into an external file or a third-party module, such as <code>node_modules</code>, be sure to specify the file/module path in your agent configuration. For more information, see Node.js Extrapaths.</li> <code>Missing TypeScript mapping files. Make sure to include these in your remote app.</code> Missing TypeScript mapping files. Try the following:<ul><li>Make sure the mapping files are included in your remote application.</li><ul><li> Remove the full file path and replace it with <code>/filename</code>. Expression not allowed. Condition expression may have issues. The provided expression contains a syntax error or may have potential side effects Try the following:<ul><li>Validate your expression. <code>Invalid snapshot position: %</code> Invalid row number. Try the following:<ul><li>Source &amp; Location: Double-check the file name and make sure you have selected the correct source (agent/tag).</li><ul><li>Source Version: Ensure you are using the correct source version.</li><ul><li> If you have integrated Lightrun actions into an external file or a third-party module, such as <code>node_modules</code>, be sure to specify the file/module path in your agent configuration. For more information, see Node.js Extrapaths.</li> <code>More than one possible match was found for the requested filename. Provide an absolute or distinguished path.</code> Filename ambiguity. Try the following:<ul><li> Provide an explicit path using the filename attribute.</li><ul><li>Use a complete path when specifying extraPaths. For example, use <code>node_modules/module_name</code> instead of <code>node_modules</code>. For more information, see Node.js Extrapaths.</li> <code>Syntax error in condition: %</code> Condition has an syntax error. The provided condition contains a syntax error. Try the following:<ul><li> Validate your expression.</li> <code>Unable to set breakpoint in &amp;</code> A snapshot is set on an invalid location. Try the following:<ul><li>Source &amp; Location: Double-check the file name and make sure you have selected the correct source (agent/tag).</li><ul><li> Source Version: Ensure you are using the correct source version.\u2022 If you have integrated Lightrun actions into an external file or a third-party module, such as <code>node_modules</code>, be sure to specify the file/module path in your agent configuration. For more information, see Node.js Extrapaths.</li> <code>A script matching the source file was not found loaded on the debugger</code> Agent could not find requested filename. Try the following: <ul><li>Verify the file name.</li><ul><li>Make sure you are using the same source version.</li><ul><li>If you inserted lightrun actions into an external file or third-party module like <code>node_modules</code>, make you specify the file/module path in your agent configuration. See Node.js Extrapaths.</li> <code>Could not determine the output file associated with the transpiled input file</code> Missing TypeScript mapping files. Try the following:<ul><li>Include TypeScript mapping files. For more information, see Running the agent in TypeScript applications.</li> <code>Multiple files match the path specified</code> There is more than 1 possible match for the requested filename. Try the following: <ul><li>Provide distinguished path with the filename attribute.</li><ul><li> Use a complete path when specifying extraPaths. For example, use <code>node_modules/module_name</code> instead of <code>node_modules</code>. For more information, see Node.js Extrapaths.</li>"},{"location":"troubleshooting/node-troubleshooting/#general-issue","title":"General issue","text":""},{"location":"troubleshooting/node-troubleshooting/#_self_signed_certificate_is_blocked","title":"Self-signed certificate is blocked","text":"<p>Troubleshooting methods for this issue may vary depending on browser, browser version or operating system.</p> <p>The following links address most of the certificate issues associated with popular browsers and operating systems:</p> <ul> <li>Getting Chrome to accept self-signed localhost certificate (per     Chrome     version)</li> </ul> <ul> <li>Ubuntu: Adding a self-signed certificate to the \"trusted     list\"</li> </ul> <ul> <li>Creating and Trusting Self-Signed Certs on MacOS and     Chrome/Safari</li> </ul> <ul> <li>How to trust a self-signed SSL certificate in IE11 and     Edge</li> </ul> <ul> <li>How do you get Chrome to accept a self-signed certificate on     Win10</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/#plugin-issues","title":"Plugin issues","text":""},{"location":"troubleshooting/node-troubleshooting/#cant-see-the-lightrun-plugin-sidebar","title":"Can't see the Lightrun plugin sidebar","text":"<p>If you're unable to see the plugin from your IDE, verify that:</p> <ul> <li>The WebStorm or IntelliJ IDE default is not set to Collapse all.</li> </ul> <ul> <li>The Lightrun plugin is installed and active.</li> </ul> <ul> <li>Check the plugin's settings at View-&gt;Tool Windows-&gt;Lightrun.</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/#cant-sign-in-from-the-plugin","title":"Can't sign in from the plugin","text":"<p>Symptoms</p> <ul> <li>No connectivity to server (cloud).  </li> <li>The IDE cannot connect to the server (in Lightrun Cloud deployments or when using app.lightrun.com)</li> </ul> <p>Suggested solutions</p> <p>Resolve server URL mismatch. Check the Lightrun server URL in the plugin's settings (under the IDE's Preferences / Settings --&gt; Lightrun) and verify that it's the same URL that appears in the browser page from which you're trying to authenticate.</p>"},{"location":"troubleshooting/node-troubleshooting/#cant-sign-in-from-the-browser-for-the-plugin-or-cli","title":"Can't sign in from the browser for the plugin or CLI","text":"<p>If you Unable to log in from your browser, check the following issues:</p> <ul> <li>Verify that the client can communicate with the server (the cloud).</li> </ul> <ul> <li>There may be a problem with the embedded browser in your IDE - From the Lightrun plugin settings menu in the WebStrom or IntelliJ IDE, disable the Use Embedded Browser option and then try logging in again.</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/#agent-issues","title":"Agent issues","text":""},{"location":"troubleshooting/node-troubleshooting/#agents-dont-appear-in-the-agents-tab-in-the-lightrun-sidebar","title":"Agents don't appear in the Agents tab in the Lightrun sidebar","text":"<p>If agents don't appear in the plugin, it may be because they are not running on the server where your application is located. If you're sure the agent is running, then the error could be due to connection or authentication issues at the client side.</p> <p>If you are unable to see agents in the IDE, try the following:</p> <ol> <li> <p>Validate that you have selected the correct agent pool.</p> </li> <li> <p>Restart the IDE.</p> </li> <li> <p>Re-authenticate Lightrun from within the IDE.</p> </li> </ol> <p>If the agents still fail to appear, contact your administrator for assistance.</p>"},{"location":"troubleshooting/node-troubleshooting/#the-agent-could-not-find-the-given-filename-verify-the-action-filename","title":"The agent could not find the given filename. Verify the action filename","text":"<p>This error often occurs when you insert Lightrun actions into external files and Node.js third-party modules, for example, <code>node_modules</code> because Lightrun does not scan these files for actions by default.</p> <p>See extraPaths for more information on how to insert Lightrun actions into external files and Node.js third-party modules.</p>"},{"location":"troubleshooting/node-troubleshooting/#action-issues","title":"Action issues","text":""},{"location":"troubleshooting/node-troubleshooting/#unable-to-see-dynamic-logs-in-my-ide","title":"Unable to see dynamic logs in my IDE","text":"<p>Logs only appear in the IDE if piping is configured correctly in the Lightrun plugin. If you are unable to see any logs:</p> <ul> <li>Verify that the piping configuration is set to either Plugin or Both.</li> </ul> <ul> <li>Check all of the Lightrun Console filters to verify that you haven't filtered out the dynamic logs that you've applied.</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/#unable-to-create-a-new-action","title":"Unable to create a new action","text":"<p>Symptoms</p> <ul> <li>You're unable to create a new action.</li> <li>An action you create appears red in the IDE.</li> <li>The only actions that appear in the IDE are for tags.</li> <li>You're unable to find the agent list in the Lightrun plugin.</li> </ul> <p>Suggested solutions</p> <ul> <li>Verify that you're logged in. Try logging out and then logging back in.</li> </ul> <ul> <li>Verify that you're attempting to insert the action from a line with code in it.</li> <li>From the IDE, verify that the cursor is positioned within your code. From the CLI, verify that the line number you used is valid.</li> </ul> <ul> <li>The agent might be down. Ask your account manager to check.</li> </ul> <ul> <li>You're not connected to the correct source code version (the same version currently running with the agent). Try closing the source code and reopening the file, ensuring you open the file directly from the correct source version.</li> </ul> <ul> <li>Your plugin may need to be upgraded to the newest version.</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/#unable-to-delete-an-existing-action","title":"Unable to delete an existing action","text":"<p>If you're unable to delete an action, verify that:</p> <ul> <li>You're logged in.</li> </ul> <ul> <li>The agent you're using is currently running. To verify, try running <code>list-agents</code>.</li> </ul>"},{"location":"troubleshooting/node-troubleshooting/#no-code-found","title":"No code found","text":"<p>The <code>No code found at line # in &lt;path&gt;</code> error may occur even if the action (for example, a log) is inserted at a line that contains executable code.</p> <p></p> <p>Symptoms and causes</p> <p>This error typically happens when inserting a log in a code line that doesn't have executable code. The probable cause of the error is that a log action, in most cases, triggers at the line preceding the log insertion position. If the previous line is empty or contains no executable code, then the <code>No code found</code> error is displayed.</p> <p>Suggested solution</p> <p>Try moving the action insertion position to the line following the one for which the log is intended to trigger.</p>"},{"location":"troubleshooting/node-troubleshooting/#unable-to-see-actions-when-using-ts-node","title":"Unable to see actions when using ts-node","text":"<p>Symptoms </p> <p>Snapshots and logs are not getting any hits when using <code>ts-node</code>.</p> <p>Suggested solution</p> <p>We recommend using the TypeScript Compiler (<code>tsc</code>) instead of <code>ts-node</code> in production environments. This choice not only ensures a more efficient memory footprint but also avoids generating unnecessary type information. For more information, see  Running the Node.js agent in TypeScript applications.</p>"},{"location":"troubleshooting/node-troubleshooting/#expression-not-allowed","title":"Expression not allowed","text":"<p>Lightrun blocks expressions that are considered harmful to your server, can overload the Lightrun agent and server, or expressions that carry a large performance penalty.</p> <p>This includes:</p> <ul> <li>Expressions that change the state of your application. i.e., setting object fields, static fields, and changing array elements.</li> <li>Expressions that involves calling a native method.</li> <li>Expressions involving the creation of a global variable.</li> <li>Expressions that implements Division by zero, infinite recursions, out-of-bound reads, and null pointer reference.</li> <li>Expressions that halt CPU.</li> <li>Expressions that try to access external resources.</li> </ul>"},{"location":"troubleshooting/overview/","title":"Lightrun troubleshooting guides","text":"<p>Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of some more common issues and possible solutions within dedicated troubleshooting guide for the following languages:</p> <ul> <li>Java</li> <li>Python</li> <li>Node.js</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/","title":"Python troubleshooting guide","text":"<p>Sometimes issues may arise that interfere with smooth running. We've done our best to gather a list of some more common issues and possible solutions.</p>"},{"location":"troubleshooting/python-troubleshooting/#system-error-messages","title":"System error messages","text":"Error Description How to fix <code>An issue was encountered with a Lightrun PII Redaction pattern. Please contact your admin for support.</code> You cannot add an action to your code because a faulty PII redaction pattern was defined. Try the following: <ul><li>Check that the PII Redaction patterns are valid  in the PII Redaction page in the Lightrun Management Portal and test the redaction process.</li> <code>Multiple modules matching %</code> There is more than 1 possible match for the requested filename. Try the following: 1. Provide absolute or distinguished path with the filename attribute.  2. Ensure that <code>Send source full path</code> is enabled in your plugin settings. <code>No code found at %</code> No executable code found on requested line. Try the following: 1. Make sure you are using the same source version. 2. Place the Lightrun action on a line of code.  3. Confirm that the Lightrun action was not inserted into your <code>__main__</code> method. <code>Python module not found.</code> Module is missing. Try the following: 1. Verify the file name.  2. Add the relevant module to <code>lightrun_extra_class_path</code>.  3. Make sure you are using the same source version."},{"location":"troubleshooting/python-troubleshooting/#general-issues","title":"General issues","text":""},{"location":"troubleshooting/python-troubleshooting/#_self_signed_certificate_is_blocked","title":"Self-signed certificate is blocked","text":"<p>Troubleshooting for this issue may vary depending on the browser, browser version, or operating system.</p> <p>The following links cover most of the certificate issues associated with popular browsers and operating systems:</p> <ul> <li>Getting Chrome to accept self-signed localhost certificate (per     Chrome     version)</li> </ul> <ul> <li>Ubuntu: Adding a self-signed certificate to the \"trusted     list\"</li> </ul> <ul> <li>Creating and Trusting Self-Signed Certs on MacOS and     Chrome/Safari</li> </ul> <ul> <li>How to trust a self-signed SSL certificate in IE11 and     Edge</li> </ul> <ul> <li>How do you get Chrome to accept a self-signed certificate on     Win10</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#plugin-issues","title":"Plugin issues","text":""},{"location":"troubleshooting/python-troubleshooting/#cant-see-the-lightrun-plugin-sidebar","title":"Can't see the Lightrun plugin sidebar","text":"<p>If you can't see the plugin from your IDE, check that:</p> <ul> <li>The PyCharm IDE default is not set to Collapse.</li> </ul> <ul> <li>The Lightrun plugin is installed and active.</li> </ul> <ul> <li>Check the plugin's settings at View -&gt; Tool Windows -&gt; Lightrun.</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#cant-sign-in-from-the-plugin","title":"Can't sign in from the plugin","text":"<p>Possible issues:</p> <ul> <li>No connectivity to server (cloud)</li> </ul> <ul> <li>Check the Lightrun Server URL in the plugin's settings (under the IDE's Preferences / Settings --&gt; Lightrun) and make sure it's the same URL that appears in the browser page from which you're trying to authenticate.</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#cant-sign-in-from-the-browser-for-the-plugin-or-cli","title":"Can't sign in from the browser for the plugin or CLI","text":"<p>If you can't log in from your browser, check the following issues:</p> <ul> <li>Ensure the client can communicate with the server (the cloud).</li> </ul> <ul> <li>There may be a problem with the embedded browser in your IDE - try disabling Use Embedded Browser option for PyCharm from the IDE Settings menu and then try logging in again.</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#agent-issues","title":"Agent issues","text":""},{"location":"troubleshooting/python-troubleshooting/#agents-dont-appear-in-the-agents-tab-in-the-lightrun-sidebar","title":"Agents don't appear in the Agents tab in the Lightrun sidebar","text":"<p>If agents don't appear in the IDE, it could be because they are not running on the server where your application is running. If you're certain the agent is running, then this error could be due to connection or authentication issues from the client side.</p> <p>If you are unable to see agents in the IDE, try the following:</p> <ol> <li> <p>Validate that you have selected the correct agent pool.</p> </li> <li> <p>Restart the IDE.</p> </li> <li> <p>Re-authenticate Lightrun from within the IDE.</p> </li> </ol> <p>If the agents still fail to appear, contact your administrator for assistance.</p>"},{"location":"troubleshooting/python-troubleshooting/#action-issues","title":"Action issues","text":""},{"location":"troubleshooting/python-troubleshooting/#inserted-actions-fail-to-do-anything","title":"Inserted actions fail to do anything","text":"<p>A common problem that occurs when using Lightrun in Python applications, is if an action (for example, a log or snapshot) is successfully added by the agent while the application is running but nothing happens (no logs are printed, snapshots taken, etc.). </p> <p>The reason for this behavior is that, in Python, Lightrun actions only take effect if they are added before the function in which it is inserted is called. When adding an action to a function while it is running, the function must close and be called again for the action to take effect. Particular care must be taken with main functions, which, do not return until the program exits.</p> <p>To resolve unresponsive actions, try:</p> <ul> <li>Waiting for the function to be recalled</li> <li>Avoid inserting actions in the main program</li> <li>Restarting the application</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#cant-create-a-new-action","title":"Can't create a new action","text":"<p>Sometimes you can't create an active action for a variety of different reasons, as outlined here.</p> <p>Symptoms</p> <ul> <li>You can't create a new action</li> <li>An action you create appears red in the IDE</li> <li>The only actions that appear in the IDE are for tags</li> <li>You can't find the agent list in the IDE</li> </ul> <p>Suggested solutions</p> <ul> <li>Check to make sure you're logged in. Try logging out and then logging back in.</li> </ul> <ul> <li>Ensure you're attempting to insert the action from a line with code in it. From the IDE, ensure the cursor is positioned within your code. From the CLI, double-check that the line number you used is valid.</li> </ul> <ul> <li>The agent may down. Ask one of your account managers to check.</li> </ul> <ul> <li>You're not connected to the correct source code version (the same version currently running with the agent). Try closing the source code and reopening the file, ensuring you're opening the file from the correct source version.</li> </ul> <ul> <li>Your plugin might need to be upgraded to the newest version.</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#cant-delete-an-existing-action","title":"Can't delete an existing action","text":"<p>If you can't delete an action, check that:</p> <ul> <li>You're logged in.</li> </ul> <ul> <li>The agent you're using is currently running. Try running <code>list-agents</code> to check.</li> </ul>"},{"location":"troubleshooting/python-troubleshooting/#no-code-found","title":"No code found","text":"<p>The <code>No code found at line # in &lt;path&gt;</code> error may occur even if the action (for example, a log) is inserted at a line that contains executable code.</p> <p></p> <p>Symptoms and causes</p> <p>This error typically happens when inserting a log in a code line that doesn't have executable code. The probable cause of the error is that a log action, in most cases, triggers at the line preceding the log insertion position. If the previous line is empty or contains no executable code, then the <code>No code found</code> error is displayed.</p> <p>Suggested solution</p> <p>Try moving the action insertion position to the line following the one for which the log is intended to trigger.</p>"},{"location":"vscode/deployment-switcher/","title":"Switch between deployments in the Lightrun plugin in VS Code","text":"<p>Note</p> <p>You need a Lightrun Enterprise plan to use the Deployment Switcher functionality. For more information, see Pricing.</p> <p>The Deployment Switcher feature applies only to Single-tenant and On-premise environments and is activated upon demand. To enable this feature, please reach out.</p> <p>From version 1.38, the Lightrun Deployment Switcher is available directly within its plugin in your IDE, is designed for developers in large enterprise organizations who need to debug applications across multiple deployment instances. This feature allows you to seamlessly switch between deployments, such as from <code>TESTING</code> to <code>PRODUCTION</code> or between regional deployments like <code>TESTING-EU</code> and <code>TESTING-US</code>.</p> <p>For example, you might have two deployments set up: <code>default</code> and <code>Production</code>.</p> <p></p>"},{"location":"vscode/deployment-switcher/#rules-and-guidelines","title":"Rules and guidelines","text":"<ul> <li>The Lightrun server that you first authenticate the Lightrun plugin with is set as the default deployment upon login.</li> </ul> <ul> <li>Deployment settings apply only to your local IDE and do not affect other developers. Any changes or modifications you make are local and specific to your setup. </li> </ul> <ul> <li>The selected deployment remains active every time you enter your IDE. </li> </ul> <ul> <li>At least one deployment type must be set in the IDE and cannot be deleted. </li> </ul>"},{"location":"vscode/deployment-switcher/#before-you-begin","title":"Before you begin","text":"<p>For each deployment type, you will need the full URL of the remote deployment that you wish to access. To obtain this information, please contact the administrator in your organization.</p>"},{"location":"vscode/deployment-switcher/#set-up-the-deployment-switcher-in-your-organization","title":"Set up the deployment switcher in your organization","text":"<p>The Deployment Switcher is designed for large enterprise organizations that manage multiple deployments. We recommend that an administrator or an allocated team member lead the effort for generating and distributing the deployment settings to the users in your organization.</p> <p>The recommended stages for deploying the Deployment Switcher in the plugin for all the users in the organization are:</p> <ol> <li> <p>Administrator tasks:</p> <p>a. Create a list of deployments: From within the plugin: create a list of deployments.</p> <p>b. Export the list of deployments: From within the plugin, export the list of deployments to an external file.</p> <p>c. Distribute the file: Share the exported file with all the relevant developers in the organization.</p> </li> <li> <p>Developer tasks:</p> <ul> <li>Import the file:  Use the Import Deployment option available in the Deployment Switch list to import the file.</li> </ul> </li> </ol>"},{"location":"vscode/deployment-switcher/#stage-1-admins-create-and-export-a-list-of-deployments","title":"Stage 1: [Admins]: Create and export a list of deployments","text":"<ol> <li>Create a list of deployments. Follow the Add a new deployment to the deployment switcher procedure.</li> <li> <p>From the Deployment Switcher list, select Export deployment(s).     The File Explorer window opens, requiring that you set the location for saving the file on your local drive.     The file is saved as vscode-client-props in the following format.</p> <p></p> </li> <li> <p>Distribute the file to your developers in your organization with an explanation of how to import the file within the plugin.</p> </li> </ol>"},{"location":"vscode/deployment-switcher/#stage-2-developers-import-deployment-file","title":"Stage 2: [Developers] Import deployment file","text":"<ol> <li>Open the Lightrun Sidebar in your VS Code IDE.</li> <li> <p>Click default to access the drop-down list, and select Import deployment(s).</p> <p></p> <p>The following message will open in the right lower window.</p> <p></p> </li> <li> <p>Click Import and select the file from your local drive.</p> <p>The list is updated automatically. No further action is required.</p> </li> </ol>"},{"location":"vscode/deployment-switcher/#manage-deployments","title":"Manage deployments","text":""},{"location":"vscode/deployment-switcher/#new","title":"Add a new deployment to the deployment switcher","text":"<ol> <li>Open the Lightrun Sidebar in your VS Code IDE.</li> <li> <p>Click default to access the drop-down list, and select Create new deployment.</p> <p></p> <p>The deployment details page opens.   `   </p> </li> <li> <p>Enter the deployment details:</p> <ul> <li>Lightrun Deployment Name: Provide an intuitive name to recognize your deployment. For example, Production, Staging, or a geographical location.</li> <li>Lightrun Server URL: Provide the full path to your Lightrun server.</li> <li>Certificate Pinning List: Add your 64-character sha256 certificate public key hash for pinning.</li> <li>Send Source Full Path: Select the check-box to send the source full path.</li> </ul> </li> <li> <p>Click Create.    </p> <p>The new deployment is added to the deployment list and the details are viewable in the right pane.</p> </li> </ol>"},{"location":"vscode/deployment-switcher/#edit-deployment-settings","title":"Edit deployment settings","text":"<p>You may want to edit deployment settings, such as updating the certificates for the Lightrun Server URL.</p> <ol> <li>In the Lightrun plugin, open the deployment list and select the deployment you want to modify.</li> <li> <p>From the drop-down list, select Settings.</p> <p>The Settings page for the relevant deployment appears.</p> </li> <li> <p>Make the necessary changes in the relevant fields.</p> <p>The changes are automatically saved.</p> </li> </ol>"},{"location":"vscode/deployment-switcher/#delete-a-deployment","title":"Delete a deployment","text":"<p>You can remove any deployment from the deployment list in the Lightrun plugin, except for the last one. This action will only delete the deployment from your local deployment list and will not affect other users.</p> <ol> <li> <p>From the deployment list in the Lightrun plugin, select the deployment to delete.</p> </li> <li> <p>From the drop-down list, select Delete Deployment.</p> <p>The Delete Deployment message opens.</p> </li> <li> <p>Click Delete.</p> <p>The deployment is removed from the list.</p> </li> </ol>"},{"location":"vscode/vscode-dev/","title":"Lightrun for vscode.dev","text":"<p>Lightrun offers a free, easy-to-install plugin for VSCode for the web (vscode.dev). Lightrun's VSCode.dev plugin is compatiable with the Lightrun desktop plugin version, with a few minor limitations.</p>"},{"location":"vscode/vscode-dev/#installing-lightrun-for-vscodedev","title":"Installing Lightrun for VSCode.dev","text":"<p>VSCode.dev does not require authentication or any additional downloads to function.</p> <ol> <li> <p>Go to vscode.dev in your browser.</p> </li> <li> <p>Select Extensions in the left sidebar.</p> <p>Tip</p> <p>Alternatively, to open the EXTENSIONS sidebar, use the keyboard shortcuts:</p> <ul> <li>Ctrl+Shift+X (MS Windows and Linux)</li> <li>Cmd+Shift+X (MacOS)</li> </ul> <p></p> </li> <li> <p>Search for Lightrun in the input box and click Install.</p> <p></p> <p>Once installed, The Lightrun plugin icon  will appear in your VSCode left sidebar </p> </li> <li> <p>Click to open the Lightrun sidebar.</p> <p></p> </li> <li> <p>Click Sign In to authenticate to the plugin.</p> <p></p> </li> <li> <p>After logging in or signing up, in the first onboarding page, choose vscode.dev and your language of choice:</p> <p> </p> </li> <li> <p>Depending on the language you choose, you will be directed to install the relevant Lightrun agent.    Please see below for detailed instructions for each supported runtime:</p> <ul> <li>JVM (Java, Scala &amp; Kotlin)</li> <li>Node.js (JavaScript &amp; TypeScript)</li> <li>Python</li> </ul> </li> </ol>"},{"location":"vscode/vscode-dev/#known-limitations","title":"Known limitations","text":"<p>Given that Lightrun for VSCode.dev operates entirely within your browser, it's subject to certain limitations when compared to the full-fledged Lightrun experience directly integrated into your IDE. The following features are not supported:</p> <ul> <li>snapshot import and export</li> <li>Log collector</li> <li>Certificate Pinning for websockets</li> </ul>"},{"location":"vscode/vscode-install-plugin/","title":"Install the Lightrun plugin in your VSCode IDE","text":"<p>The Lightrun extension for Visual Studio Code (VSCode), hereandafter referred to as the \"Lightrun plugin\", can be installed from either the VSCode Extension Marketplace or by downloading a VSIX file from the Lightrun Management Portal.</p> <p>Support</p> <p>Lightrun currently supports IntelliJ IDEA, PyCharm, WebStorm, Visual Studio Code (VSCode), VSCode for the web (vscode.dev), and <code>code-server</code>. Support for additional IDEs is coming soon - sign up for our beta program to learn more!</p> <p>Version Support</p> <p>The Lightrun plugin for VSCode, starting from version 1.72.0, is compatible with all platforms, including MS Windows, Linux, and MacOS.</p>"},{"location":"vscode/vscode-install-plugin/#installing-the-lightrun-plugin-from-the-vscode-extensions-marketplace","title":"Installing the Lightrun plugin from the VSCode Extensions Marketplace","text":"<ol> <li> <p>From the VSCode menu bar, select View &gt; Extensions.    The EXTENSIONS sidebar opens.</p> <p>Tip</p> <p>Alternatively, to open the EXTENSIONS sidebar, use the keyboard shortcut:</p> <ul> <li>Ctrl+Shift+X (MS Windows and Linux)</li> <li>Cmd+Shift+X (MacOS)</li> </ul> </li> <li> <p>In the plugin's search field, enter Lightrun.</p> </li> <li>Select the Lightrun plugin and click Install.</li> <li>If prompted, restart VSCode.</li> <li>To verify successful installation of the plugin, in the sidebar, click the Lightrun plugin icon .    The Lightrun plugin pane opens.</li> </ol>"},{"location":"vscode/vscode-install-plugin/#installing-the-lightrun-plugin-from-a-vsix","title":"Installing the Lightrun plugin from a VSIX","text":"<p>Lightrun also provides a <code>.vsix</code> file that automatically installs the latest version of the Lightrun VSCode plugin in your IDE.</p> <p>To install the plugin from a VSIX:</p> <ol> <li>Download the Lightrun VSIX file from the Install the Plugin section of the Lightrun Management Portal.</li> <li>In the EXTENSIONS sidebar, from the Views and More Actions menu (...), select Install from VSIX....    A file explorer window opens.</li> <li>Navigate to the downloaded VSIX file for the Lightrun plugin and click Install.</li> <li>If prompted, restart VSCode.</li> <li>To verify successful installation of the plugin, in the sidebar, click the Lightrun plugin icon .    The Lightrun plugin pane opens.</li> </ol> <p>After the Lightrun plugin is installed, proceed to authenticate it.</p>"},{"location":"vscode/vscode-multiple-sources/","title":"Working with Multiple Sources","text":""},{"location":"vscode/vscode-multiple-sources/#overview","title":"Overview","text":"<p>Lightrun allows you to select multiple agents and tags as a single source when creating an action directly from your IDE. This option lets you simultaneously apply an action to a custom group of agents and tags.</p>"},{"location":"vscode/vscode-multiple-sources/#selecting-multiple-sources","title":"Selecting multiple Sources","text":""},{"location":"vscode/vscode-multiple-sources/#to-add-an-action-to-multiple-sources-in-your-vscode-ide","title":"TO ADD AN ACTION TO MULTIPLE SOURCES IN YOUR VSCODE IDE","text":"<ol> <li>Open the Insert an Action form. For instructions on how to open the Insert a Log form, see Dynamic Logs; for the Insert a metric form, see Metrics; for the Insert a Snapshot form, see Snapshot.</li> <li> <p>Click the  icon next to the SOURCE field to select your preferred condition.    </p> <p>Note</p> <p>You can select one of two conditions:</p> <ul> <li>Match Any - The action will be added to an agent if the agent is associated with any of the tags or custom sources selected in the SOURCE field.</li> <li>Match All -  The action will be added to every agent, tag, and custom source selected in the SOURCE field.</li> </ul> </li> <li> <p>Select the agents and tags to be added in the SOURCE field.</p> </li> <li>Click Create to create the action.    The action will be added to the selected sources.</li> </ol>"},{"location":"vscode/vscode-plugin-authentication/","title":"Authenticate Lightrun","text":""},{"location":"vscode/vscode-plugin-authentication/#authenticating-the-lightrun-plugin","title":"Authenticating the Lightrun plugin","text":"<p>On each occasion you start to work with Lightrun from the VSCode plugin, you must first authenticate it against your Lightrun account.</p> <p>Prerequisites</p> <p>These instructions assume that you have:</p> <ul> <li>Created your Lightrun Account</li> </ul> <ul> <li>installed the VSCode Lightrun plugin in your IDE.</li> </ul>"},{"location":"vscode/vscode-plugin-authentication/#to-authenticate-lightrun-plugin","title":"To authenticate Lightrun plugin","text":"<ol> <li> <p>From the VSCode activity bar, click the Lightrun icon  to expand the plugin sidebar.</p> <p></p> </li> <li> <p>Click Sign in.    A browser window opens with the Lightrun login page. </p> </li> <li> <p>Log in to Lightrun with your user credentials.    After you are logged in, the Lightrun page reloads with a confirmation message. Notice that there is a timeout configured; you might need to re-login if the timeout elapses.</p> </li> <li> <p>Return to VSCode.    The Lightrun plugin indicates that the service is connected.  </p> <p></p> </li> </ol> <p>Note</p> <p>If the Lightrun plugin is authenticated successfully, but the No Lightrun agents available warning is displayed, this means no agents currently are attached and running with your application.</p> <p>The next steps are to:</p> <ul> <li>Run a Lightrun agent with your app, depending on your runtime environment (Java | Python | Node.js)</li> <li>After you run your app with the Lightrun agent attached, you can begin to insert logs, snapshots, and metrics. </li> </ul>"},{"location":"vscode/vscode-plugin-dynamic-logs/","title":"Dynamic Logs","text":"<p>Prerequisites</p> <p>To use the plugin, make sure you have:</p> <ul> <li>Attached an agent to your application</li> <li>Installed the plugin in your local VSCode instance</li> <li>Authenticated the VSCode plugin against your Lightrun account</li> <li>The source code file for your running application is opened in VSCode </li> </ul> <p>From the Lightrun plugin for VSCode, you can:</p> <ul> <li>Add dynamic logs directly into your running application.</li> <li>Manage the inserted dynamic logs.</li> </ul>"},{"location":"vscode/vscode-plugin-dynamic-logs/#adding-logs","title":"Adding logs","text":"<p>To add dynamic logs to your code, you must open the Insert a Log form and enter your preferred log parameters.</p>"},{"location":"vscode/vscode-plugin-dynamic-logs/#opening-the-insert-a-log-form","title":"Opening the Insert a Log form","text":"<p>There are two ways to open the Insert a Log form.</p> <ol> <li>From the Agents or Tags tab.</li> <li>From a code line in your VSCode editor.</li> </ol>"},{"location":"vscode/vscode-plugin-dynamic-logs/#agentsortabs","title":"Agents or Tags tab","text":"<ol> <li>Open the Lightrun Sidebar in your VSCode IDE.</li> <li>Navigate to the Agents or Tags tab and select an agent or tag.</li> <li>Click the Add Action icon  on the agent or tag.</li> <li> <p>Select Log in the menu that appears.</p> <p>The Insert a Log form should appear similar to the following image.  </p> </li> </ol>"},{"location":"vscode/vscode-plugin-dynamic-logs/#codeline","title":"Code line method","text":"<ol> <li>Go to the line in your application source code where you'd like to insert the log. Make sure to use the source code version currently deployed to your remote app (where the agent is attached).</li> <li>Right-click to open the VSCode context menu. </li> <li>From the VSCode context menu, click Lightrun....    The VSCode Command Palette opens with a list of Lightrun plugin options. </li> <li>From the Command Palette, select Insert a Log    The Insert a Log form should appear similar to the following image.     </li> </ol>"},{"location":"vscode/vscode-plugin-dynamic-logs/#entering-log-parameters","title":"Entering Log parameters","text":"<p>Complete the fields in the Insert a Log form, as follows:</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent, tag, or custom source. Click the  icon to create a new custom source. FILENAME &amp; LINE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. LOG MESSAGE The actual log string. Use expressions such as <code>My variable is {var}</code>, including method invocations such as: <code>Method value: {myMethod() + 5}</code>. LOG LEVEL Select an appropriate log level: INFO, ERROR, DEBUG, WARN. Once configured, logs can also be filtered by the LOG LEVEL attribute in the Lightrun console. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. LIFETIME The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. TARGET Select your preferred action output taget. You can pick either: - Stdout - Logs are routed only to your application's standard output.- Plugin -  Logs appear in the Lightrun Console, the Lightrun Management Portal, and configured integrations.or both options at once. <p>Click Create to insert the dynamic log into your code.  </p>"},{"location":"vscode/vscode-plugin-dynamic-logs/#managing-logs","title":"Managing logs","text":"<p>Upon log creation:  </p> <ul> <li>In the VSCode editor, a  icon will appear next to the selected code line.  </li> <li>A new log action will appear under the selected source (agent or tag) in the Lightrun sidebar.   </li> </ul> <p>You can disable, delete, or edit a log directly in your IDE.</p>"},{"location":"vscode/vscode-plugin-dynamic-logs/#to-disable-a-dynamic-log","title":"To disable a Dynamic Log","text":"<ol> <li>Hover your cursor over the relevant log in the Lightrun sidebar.    A toggle switch should appear. </li> <li>Click the toggle switch from blue (on) to grey (off).</li> <li>To resume logging, click the toggle back to blue.</li> </ol>"},{"location":"vscode/vscode-plugin-dynamic-logs/#to-duplicate-a-dynamic-log","title":"To duplicate a Dynamic Log","text":"<ol> <li>Hover your cursor over the relevant log in the Lightrun sidebar.</li> <li> <p>Right-click and select Duplicate.</p> <p></p> </li> <li> <p>Go to the selected destination and right-click and select Duplicate.</p> </li> </ol>"},{"location":"vscode/vscode-plugin-dynamic-logs/#to-delete-a-dynamic-log","title":"To delete a Dynamic Log","text":"<ol> <li>Click the menu icon ... next to the relevant log in the Lightrun sidebar.</li> <li> <p>Select Delete from the menu that appears.</p> <p></p> </li> </ol>"},{"location":"vscode/vscode-plugin-dynamic-logs/#to-edit-a-dynamic-log-configuration-parameters","title":"To edit a Dynamic Log configuration parameters","text":"<ol> <li> <p>Click the menu icon ... next to the relevant log in the Lightrun sidebar.</p> <p></p> </li> <li> <p>Select Edit from the menu that appears to open the Edit a Log form.</p> <p>The Edit a Log form should appear similar to the following image.  </p> </li> <li> <p>Edit your log configuration data in the Edit a Log form.</p> </li> </ol>"},{"location":"vscode/vscode-plugin-metrics/","title":"Metrics","text":"<p>The Lightrun plugin for VSCode currently provides three different metrics action for monitoring the performance of your code and identifying issues:</p> <ul> <li>Counters - Counts the number of times a specific line of code is reached.</li> </ul> <ul> <li>Tic &amp; Toc - Measures the elapsed time between two selected lines of code within a function.</li> </ul> <ul> <li>Custom Metrics - Create customized metrics, using parameters and simple or complex expressions that return a <code>long int</code> result.</li> </ul> <p>The following subsections describe:</p> <ul> <li>How to add a metrics action to your running application.</li> <li>Configuration option for each metric action.</li> <li>Managing a metrics action directly from your VSCode IDE.</li> </ul> <p>Prerequisites</p> <p>To use the plugin, make sure you have:</p> <ul> <li>Attached an agent to your application</li> <li>Installed the plugin in your local VSCode instance</li> <li>Authenticated the VSCode plugin against your Lightrun account</li> <li>The source code file for your running application is opened in VSCode </li> </ul> <p>Support</p> <p>Metrics are currently supported only for Java/JVM applications.</p>"},{"location":"vscode/vscode-plugin-metrics/#adding","title":"Adding Metrics","text":"<p>There are two ways to insert a Lightrun metric into your code.</p> <ol> <li>From the Agents or Tags tab.</li> <li>From a code line in your VSCode editor.</li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#agentsortabs","title":"Agents or Tags tab","text":"<ol> <li>Open the Lightrun Sidebar in your VSCode IDE.</li> <li>Navigate to the Agents or Tags tab and select an agent or tag.</li> <li>Click the Add Action icon  on the agent or tag.</li> <li> <p>Select your preferred metric from the menu that appears.</p> <p></p> </li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#codeline","title":"Code line method","text":"<ol> <li>Go to the line in your application source code where you'd like to insert the metric. Make sure to use the source code version currently deployed to your remote app (where the agent is attached).</li> <li>Right-click to open the VSCode context menu. </li> <li>From the VSCode context menu, click Lightrun....    The VSCode Command Palette opens with a list of Lightrun plugin options. </li> <li>Select your preferred metric in the VSCode Command Palette.</li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#configuring","title":"Configuring Metrics","text":""},{"location":"vscode/vscode-plugin-metrics/#counter","title":"Counter","text":"<p>A Lightrun Counter counts the number of times a specified line of code is reached and outputs the data periodically to the configured action target.</p> <p>With a Lightrun Counter output, you can obtain a deeper insight into the state of your application's code, at any level of detail, from expressions and method calls to individual variables.</p> <p>The Insert a Counter form should appear similar to the following image.</p> <p></p> <p>The following table describes the available configuration options.</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILENAME &amp; LINE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. AGGREGATED BY THREAD Group the metric based on thread names. Specify the required thread name prefix, followed by an asterisk.  - If you specify just <code>*</code>, the counter increments for all threads that reach a given line of code (the same as the default). - If you specify <code>mythread*</code>, all threads with the prefix <code>mythread</code> are considered as a single group; the counter increments only if a member of the <code>mythread*</code> group reaches the given line of code. LIFETIME The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. TARGET Select your preferred action output taget. You can pick either: - Stdout - Logs are routed only to your application's standard output.- Plugin -  Logs appear in the Lightrun Console, the Lightrun Management Portal, and configured integrations.or both options at once. <p>Tip</p> <p>Clicking the Get filename &amp; line  icon automatically loads the file name and line number at which the cursor currently is positioned within the VSCode editor.</p> <p>Note</p> <p>Metrics (standard and custom) continue to be published every few seconds, even if the code didn't reach the code line where the metric is inserted.</p>"},{"location":"vscode/vscode-plugin-metrics/#tic-toc","title":"Tic &amp; Toc","text":"<p>The Tic &amp; Toc metric measures the elapsed time of code execution between two specified lines, Tic (start line) and Toc (end line), in the same code block.</p> <p>The Insert a Tic &amp; Toc form should appear similar to the following image.</p> <p></p> <p>Note</p> <p>The Tic (start line) and Toc (end line) both must be positioned inside the same code block.</p> <p>The following table describes the available configuration options.</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILENAME &amp; LINE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. LIFETIME The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. TARGET Select your preferred action output taget. You can pick either: - Stdout - Logs are routed only to your application's standard output.- Plugin -  Logs appear in the Lightrun Console, the Lightrun Management Portal, and configured integrations.or both options at once. <p>Tip</p> <p>Clicking the Get filename &amp; line  icon automatically loads the file name and line number at which the cursor currently is positioned within the VSCode editor.</p> <p>Note</p> <p>Metrics (standard and custom) continue to be published every few seconds, even if the code didn't reach the code line where the metric is inserted.</p>"},{"location":"vscode/vscode-plugin-metrics/#custom-metric","title":"Custom Metric","text":"<p>You can insert your own customized metrics expressions that evaluate to a long integer result.</p> <p>The Insert a Custom Metric form should appear similar to the following image.</p> <p></p> <p>The following table describes the available configuration options.</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent or tag. FILENAME &amp; LINE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. Use the up/down arrows to change the line number for inserting the counter. NAME A meaningful label for the metric. EXPRESSION Any expression - simple or complex - that evaluates to a numerical result. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. LIFETIME The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. TARGET Select your preferred action output taget. You can pick either: - Stdout - Logs are routed only to your application's standard output.- Plugin -  Logs appear in the Lightrun Console, the Lightrun Management Portal, and configured integrations.or both options at once. <p>Tip</p> <p>Clicking the Get filename &amp; line  icon automatically loads the file name and line number at which the cursor currently is positioned within the VSCode editor.</p> <p>Note</p> <p>Metrics (standard and custom) continue to be published every few seconds, even if the code didn't reach the code line where the metric is inserted.</p>"},{"location":"vscode/vscode-plugin-metrics/#managing-metrics","title":"Managing metrics","text":"<p>Once a Lightrun metric has been inserted into your application,</p> <ol> <li>A new metric action will appear under the selected source (agent or tag) in the Lightrun sidebar.</li> <li>A metric icon will appear next to the selected code line. See the table below for each metric and their icons.</li> </ol> Metric Icon Counter Tic &amp; Toc Custom Metric <p>You can view, disable, or delete a metric directly in your VSCode IDE.</p> <p>Note</p> <p>Metrics cannot be edited.</p>"},{"location":"vscode/vscode-plugin-metrics/#to-view-a-metric-action-configuration","title":"To view a metric action configuration","text":"<ol> <li> <p>Click the menu icon ... next to the relevant metric in the Lightrun sidebar to open the ACTION OPTIONS menu.</p> <p></p> </li> <li> <p>Select Details to open the metric details panel.     The metric details panel should appear similar to the following image. (details for the Tic &amp; Toc action is shown below). </p> </li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#to-disable-a-metric-action","title":"To disable a metric action","text":"<ol> <li>Hover your cursor over the relevant metric in the Lightrun sidebar.    A toggle switch should appear. </li> <li>Click the toggle switch from blue (on) to grey (off).</li> <li>To resume logging, click the toggle back to blue.</li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#duplicating-a-metric-action","title":"Duplicating a metric action","text":"<ol> <li>Hover your cursor over the relevant metric in the Lightrun sidebar.</li> <li> <p>Right-click and select Duplicate.</p> <p></p> </li> <li> <p>Go to the selected destination and right-click and select Duplicate.</p> </li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#deleting-a-metric-action","title":"Deleting a metric action","text":"<ol> <li> <p>Click the menu icon ... next to the relevant metric in the Lightrun sidebar to open the ACTION OPTIONS menu.</p> <p></p> </li> <li> <p>Select Delete to delete the metric action.</p> </li> </ol>"},{"location":"vscode/vscode-plugin-metrics/#understanding-metrics-data","title":"Understanding metrics data","text":""},{"location":"vscode/vscode-plugin-metrics/#counter_1","title":"Counter","text":"<p>An example Lightrun Counter output is shown in the code sample below:</p> <pre><code>CounterData Log{counterId='9b1e6b80-b5ec-42dd-b411-28bbb3e44059', name=counter1::*, count=751, m1_rate=49.51307448246653, m5_rate=53.94779140968095, m15_rate=54.77571845490024, mean_rate=35.71689054874403}\n</code></pre> <p>The following table describes the data present in a Counter output.</p> Column Description counterId A unique identifier assigned to the counter by the system. name The counter label. count The number of times the specified code was executed (hit count). m1_rate The average amount of counter metrics hit recorded per second for one minute. m5_rate The average amount of counter metrics hit recorded per second for five minutes. m15_rate The average amount of counter metrics hit recorded per second for fifteen minutes. mean_rate The mean rate of hits recorded per second during the entire duration of the Lightrun action."},{"location":"vscode/vscode-plugin-metrics/#time-measurements","title":"Time measurements","text":"<p>An example Lightrun Time measurement output is shown in the code sample below:</p> <pre><code>TicToc Log {TicTocId='670a505f-33c1-4c8c-846b-57afaa9a236c', name='MeasurementName', count='17', max='5', min='0', mean='0.46618461992518356', stddev='1.1864864756822397'}\n</code></pre> <p>The following table describes the data present in a Time measurement output.</p> Column Description TicTocId A unique identifier assigned to the time measurement by the system. name The time measurement label. count The number of times the specified code was executed. max Maximum amount of time measured by the time measurement metric in milliseconds. min Minimum amount of time measured by the time measurement metric in milliseconds. mean Mean amount of time measured by the time measurement metric in milliseconds. stddev Standard deviation of the times recorded by the time measurement metric. <p>Note</p> <ul> <li>When you create a time measurement metric, Lightrun measures the execution time of the code you\u2019ve selected not just once but every time a thread passes through the specified code. For various reasons, like the CPU being busy with different things at a time, this often results in a slightly different execution time for each code invocation. Lightrun\u2019s time measurement metrics data includes not just one number but enough data to understand how much time is spent in that part of your code. </li> <li>Lightrun time measurement metrics output is not displayed for each invocation; instead, the recorded time measurement data is sent to your configured output target (Plugin or Stdout) every second. This ensures that the system collecting and processing the data, typically a time series database like Prometheus, will have a constant stream of data to process. This also means you\u2019ll see Time measurements data being produced regularly, even when the code isn\u2019t executed.</li> </ul>"},{"location":"vscode/vscode-plugin-quick-tour/","title":"Quick tour of the VSCode Lightrun plugin","text":"<p>The majority of the work you do with Lightrun, such as troubleshooting, debugging, and performance testing, is performed directly from your integrated development environment (IDE) or the Lightrun CLI.</p> <p>Using the Lightrun plugin, provided for a variety of popular IDEs (such as VSCode, IntelliJ, and PyCharm), you can insert Lightrun actions (Logs, Metrics, and Snapshots) anywhere within the source code of your running applications. Also, from within the Lightrun plugin for your IDE, you can view, in real time, the output of Lightrun actions.</p> <p>And, thanks to Lightrun's comprehensive range of integrations with third-party logging tools, from the plugin, you also can route output from Lightrun Logs and Metrics to your usual logging framework (such as New Relic and DataDog).</p>"},{"location":"vscode/vscode-plugin-quick-tour/#scope-of-the-quick-tour","title":"Scope of the quick tour","text":"<p>This quick tour article provides an overview of the main features and functionalities of the Lightrun Plugin for Visual Studio Code (VSCode). For detailed information on procedures for running Lightrun actions and managing configurations within VSCode, see:</p> <ul> <li>Lightrun Dynamic Logs in VSCode</li> <li>Lightrun Dynamic Snapshots in VSCode</li> <li>Lightrun Metrics in VSCode</li> </ul> <p>Prerequisites</p> <p>To follow this quick tour on your workstation, if not previously done: </p> <ul> <li>Install the Lightrun plugin </li> </ul> <ul> <li>Authenticate it</li> </ul> <ul> <li>Attach at least one agent to your application</li> </ul> <ul> <li>Open the source code folder for your running the application in the IDE</li> </ul>"},{"location":"vscode/vscode-plugin-quick-tour/#the-lightrun-sidebar-layout","title":"The Lightrun sidebar layout","text":"<p>Upon clicking, in the VSCode activity bar, the Lightrun plugin icon , the Lightrun sidebar opens. Follow the on-screen instructions to authenticate the plugin.</p> <p>After authenticating your Lightrun plugin, your VSCode IDE should appear similar to the following image.</p> <p></p>"},{"location":"vscode/vscode-plugin-quick-tour/#plugin-tabs","title":"Plugin Tabs","text":"<p>There are three tabs in the Lightrun sidebar</p> <ul> <li>Sources</li> <li>Actions</li> <li>Snapshot Hits</li> </ul> <p>Selecting any of the three tabs exposes additional menus and options, respectively for managing Agents and Tags, Lightrun actions, and Snapshot hits.</p>"},{"location":"vscode/vscode-plugin-quick-tour/#sources","title":"Sources tab","text":"<p>The Sources view tab exposes additional menus and options for managing your Lightrun agents, tags, and custom sources directly from your VSCode IDE.</p> <p></p> <p>There are two subtabs in the Sources tab.</p> <ul> <li>The Agents subtab</li> <li>The Tags subtab</li> </ul>"},{"location":"vscode/vscode-plugin-quick-tour/#agents-subtab","title":"Agents subtab","text":"<p>The Agents subtab displays a list of live agents running alongside your applications. The Agents subtab appears similar to the following image:</p> <p></p> <p>Click the expand icon  on an agent to display the actions assigned to the agent.</p> <p></p> <p>Click the add icon  on an agent to add an action to the agent.</p> <p></p> <p>Click the menu icon  to display the AGENT OPTIONS menu.</p> <p></p> <p>Select Pin to pin the agent to the top of the Agents subtab or select Details to view more information about the agent.</p> <p></p> <p>The following table summarizes the information displayed in the Agent details window.</p> Field Description Name The agent's display name or host name if not specified Host The name of the machine where the agent is running Environment The runtime environment of the application with which the agent is running ID A unique identifier, automatically generated for the agent PID The process ID (on the machine where the agent is running) Start Time The time at which the agent started running API Version The version number of the server the agent is connected to Agent Version The version number of the agent Log Routing The configured routing method Tags Next to Agent details, the names of tags that have been applied to the agent. If there are more than one tag, additional tags are displayed by clicking the  icon."},{"location":"vscode/vscode-plugin-quick-tour/#tags-subtab","title":"Tags subtab","text":"<p>The Tags subtab lists all available tags with their associated agents and actions. The Tags subtab appears similar to the following image.</p> <p></p> <p>Click the expand icon  on a tag to reveal the agents and actions associated with that tag. </p> <p></p> <p>Click the add icon  on a tag to add an action to the tag.</p> <p></p> <p>Click the menu icon  to display the TAGS OPTIONS menu.</p> <p></p> <p>Select Pin to pin the tab to the top of the Tags subtab or select Delete to delete the tag.</p>"},{"location":"vscode/vscode-plugin-quick-tour/#sources-search","title":"Sources dynamic search filter","text":"<p>From the sources dynamic search field, you can search for Logs, Snapshots, and Metrics attached to specific agents or tags. As you begin typing, the list of relevant agents updates dynamically.</p> <p></p> <p>Tip</p> <p>Sources dynamic search is particularly useful for finding specific dynamic Logs, when working with multiple agents and tags.</p>"},{"location":"vscode/vscode-plugin-quick-tour/#actions","title":"Actions tab","text":"<p>The Actions tab lists all Lightrun actions (Logs, Metrics, and Snapshots) currently attached to your code. This includes active actions, disabled actions, expired actions, and actions with errors.</p> <p></p> <p>Click the menu icon  to access the ACTION OPTIONS menu.</p> <p></p> <ul> <li>Click Edit to edit an action.</li> <li>Click Go to to navigate the VSCode code editor to the action file and code line. </li> <li>Click info to view more information about the action.</li> <li>Click Duplicate to create another copy of the action.</li> <li>Click Delete to delete the action.</li> </ul>"},{"location":"vscode/vscode-plugin-quick-tour/#action-search","title":"Actions dynamic search filter","text":"<p>The Actions dynamic search filter allows you to search for Lightrun actions using their names, agent names, filename, or code line. You can also sort the action tab with the Filename and Creation time options, or filter with the All, Active, Expired, and Error statuses. </p> <p>As you start typing, the search filter will update the action list dynamically.</p> <p></p>"},{"location":"vscode/vscode-plugin-quick-tour/#snapshots","title":"Snapshot Hits tab","text":"<p>The Snapshot hits tab allows you to view and manage the snapshot hits captured in your system.</p> <p></p> <p>Use the dynamic search filter to filter snapshots base on their names, agent names, filename, or code line. You can also sort the snapshot hit tab with the Name, Start time, and Recently hit options, or load snapshot hits from an external file.</p> <p></p> <p>Click on a snapshot hit to view more information about the hit.</p> <p></p> <p>The snapshot hit data is divided into three sections.</p> Sections Description Snapshot hit details View more information about the snapshot. Snapshot hit variables View snapshot stacktrace variables. Snapshot hit call stack View snapshot stacktrace call stack (frames). <ul> <li>Click Share button to share the snapshot's data.   </li> <li>Click on a call stack to navigate to the hit's source code and line</li> </ul>"},{"location":"vscode/vscode-plugin-quick-tour/#lightrun-console","title":"Lightrun Console","text":"<p>The Lightrun Console lets you view and interact with data from dynamic logs and metrics directly from within your VSCode IDE. </p> <p>Note</p> <p>Data from dynamic logs and metrics only appear in the Lightrun Console when you set their target configuration to Plugin. </p> <p>The Lightrun Console appears similar to the following image.</p> <p></p> <ul> <li>Enter an agent's name into the console\u2019s search bar to display only data from logs and metrics associated with the agent alone.</li> <li>Click Clear logs to clear the entire console, and use the My Logs only toggle button to configure if you want to view actions created by you alone or actions created by other members of your team in the Lightrun Console.</li> <li>Right-click on a log, and click Go to to navigate to the log's source code and line.</li> </ul>"},{"location":"vscode/vscode-plugin-quick-tour/#additional-features","title":"Additional features","text":"<p>Clicking the More Options icon  at the top of the plugin, opens the PLUGIN OPTIONS menu.  </p> <p></p> <p>From here you can:</p> <ul> <li>Open, within VSCode, the Lightrun plugin extension settings window.</li> <li>Open the Lightrun documentation web page</li> <li>Open the Lightrun user feedback web page</li> <li>Refresh the user interface</li> <li>Navigate to Lightrun management portal</li> <li>Sign out from the current user</li> </ul>"},{"location":"vscode/vscode-plugin-snapshots/","title":"Snapshots in the VSCode plugin","text":""},{"location":"vscode/vscode-plugin-snapshots/#introduction","title":"Introduction","text":"<p>A snapshot is a virtual breakpoint that doesn't block your code from running. Unlike traditional breakpoint, snapshots collect the stack trace and variables without interrupting the application at all.</p> <p>Once you've added a snapshot, you can view the output directly from the IDE.</p> <p>Prerequisites</p> <p>To use the plugin, make sure you have:</p> <ul> <li>Attached an agent to your application</li> <li>Installed the plugin in your local VSCode instance</li> <li>Authenticated the VSCode plugin against your Lightrun account</li> <li>The source code file for your running application is opened in VSCode </li> </ul>"},{"location":"vscode/vscode-plugin-snapshots/#adding-snapshots","title":"Adding Snapshots","text":"<p>To add snapshots, you must open the Insert a Snapshot and enter values for snapshot parameters.</p>"},{"location":"vscode/vscode-plugin-snapshots/#opening-the-insert-a-snapshot-form","title":"Opening the Insert a Snapshot form","text":"<p>Select either of the following methods:</p> <p>A. Through either the Agents or Tags tab B. From a code line in the VSCode editor</p> <p>A. Agents or Tags method:</p> <ol> <li>From either the Agents or Tags tab, select an agent or tag and click the Add Action icon .    The ACTIONS and METRICS menu opens. </li> <li>Under ACTIONS, select Snapshot to open the Insert a Snapshot form.    </li> </ol> <p>B. Code line method:</p> <ol> <li>Go to the line in your application source code where you want to insert the snapshot.</li> <li>Right-click to open the VSCode context menu. </li> <li>From the VSCode context menu, click Lightrun....    The VSCode Command Palette opens with a list of Lightrun plugin options. </li> <li>From the Command Palette, select Insert a Snapshot.    The Insert a Snapshot form opens. </li> </ol>"},{"location":"vscode/vscode-plugin-snapshots/#entering-snapshot-parameters","title":"Entering Snapshot parameters","text":"<ol> <li> <p>In the Insert a Snapshot form, complete the fields, as follows:</p> Fields Description SOURCE From the available options in the dropdown list, bind the action to a specific agent, tag, or custom source. Click the  icon to create a new custom source. FILENAME &amp; LINE The source code file into which you're inserting the action. The default path is to the source code file from which you're currently working. CONDITION The condition of an <code>if</code> statement, used to limit the execution of the action. For example, The condition <code>myVar % 7 == 0</code> limits the action (log, snapshot, metric) output so that it only prints for variables that are divisible by 7. HIT LIMIT The maximum number of times the snapshot should be taken during the lifetime of the action; default = 1. LIFETIME The time after which the action ceases to track code behavior and is automatically disabled; default = 1 hour. TARGET Select your preferred action output taget. You can pick either: - Stdout - Logs are routed only to your application's standard output.- Plugin -  Logs appear in the Lightrun Console, the Lightrun Management Portal, and configured integrations.or both options at once. WATCH EXPRESSIONS Variables or method results to be displayed in the snapshot stack trace. Click + to add additional watch expressions. An expression that you define to be monitored as part of the snapshot. You can evaluate complex expressions, such as methods. </li> <li> <p>Click Create to add the snapshot.  </p> <p>Upon snapshot creation:  </p> <ul> <li>In the editor area, the  icon appears next to the selected code line.  </li> <li>In the Lightrun plugin, either the Tags or Agents tab opens and the requested agent or tag is expanded, with the Snapshot action appearing below it.</li> </ul> </li> </ol>"},{"location":"vscode/vscode-plugin-snapshots/#viewing-snapshot-data","title":"Viewing Snapshot data","text":"<p>After you add a snapshot to your code, and a snapshot hit is captured:</p> <ul> <li>A notification that a snapshot was captured appears in the on the bottom right edge of the VSCode screen.</li> </ul> <ul> <li>The snapshot variables and stack trace appear under the Snapshots tab in the Lightrun plugin.</li> </ul> <p>To view Snapshot variables and stack traces:</p> <ol> <li> <p>To open a snapshot, use either option A or B:</p> <p>Option A - From either the Agents, Tags, and from the list, select the relevant snapshot. Option B - Open the Snapshots tab and, from the list, select the relevant snapshot.</p> <p>The snapshot view window opens in the Snapshots tab. </p> </li> <li> <p>To expand the snapshot data view, click the (&gt;) icons, next to Variables and Call Stack.</p> </li> <li>To view snapshot hits within a series, click the \u2190 and \u2192 arrows to cycle through the series or enter a snapshot hit number in the Go to hit box and click Go.</li> <li>To view details of a specific frame within a snapshot hit, in the Call Stack pane, click on the relevant stack trace variable or method. In the example below, the add method is selected, and the relevant variable values displayed. </li> </ol> <p>Info</p> <p>Viewing snapshots from the Lightrun Management Portal is described here.</p>"},{"location":"vscode/vscode-plugin-snapshots/#viewing-and-editing-a-snapshot-configuration","title":"Viewing and editing a Snapshot configuration","text":"<p>After you have created a snapshot, you can view and edit its configuration.</p> <ol> <li>In the Lightrun plugin, depending on the target, select either the Agents or Tags tab.</li> <li>Next to the Snapshot entry, click the Snapshot Options menu icon (...) and select Details.    The Snapshot details window opens. </li> <li>To edit the configuration, click the edit icon .    The Edit a Snapshot form opens.</li> <li>In the respective fields, enter new values for line number, condition, hit limit, and so on.</li> </ol>"},{"location":"vscode/vscode-plugin-snapshots/#duplicating-a-snapshot-action","title":"Duplicating a snapshot action","text":"<ol> <li>Hover your cursor over the relevant snapshot in the Lightrun sidebar.</li> <li> <p>Right-click and select Duplicate.</p> <p></p> </li> <li> <p>Go to the selected destination and right-click and select Duplicate.</p> </li> </ol>"},{"location":"vscode/vscode-plugin-snapshots/#exporting-snapshot-data","title":"Exporting Snapshot data","text":"<p>Once a snapshot hit has been captured, it is possible to export the snapshot data for analysis in another IDE. Lightrun allows you to export the data of all available snapshots in your system, or the data of a single snapshot at once. </p>"},{"location":"vscode/vscode-plugin-snapshots/#to-export-your-entire-snapshot-data","title":"To export your entire Snapshot data","text":"<ol> <li>Select the Snapshot tab in your VSCode Lightrun plugin.</li> <li>Click the MORE OPTIONS menu icon (...) next to the search field and the SORT BY dropdown.    </li> <li>Click Export all in the menu that appear. Pick your preferred storage location and click select to export the snapshots. </li> <li>A <code>.lrsnapshot</code> file will be saved in the selected location.</li> </ol>"},{"location":"vscode/vscode-plugin-snapshots/#to-export-a-single-snapshot-data","title":"To export a single Snapshot data","text":"<ol> <li>Select the Snapshot tab in your VSCode Lightrun plugin.</li> <li>Next to the Snapshot entry, click the Snapshot Options menu icon (...) and select Export. Pick your preferred storage location and click select to export the snapshot data. </li> <li>A <code>.lrsnapshot</code> file will be saved in the selected location.</li> </ol>"},{"location":"vscode/vscode-plugin-snapshots/#to-load-a-snapshot-file-in-your-vscode-ide","title":"To load a Snapshot file in your VSCode IDE","text":"<ol> <li>Select the Snapshot tab in your VSCode Lightrun plugin.</li> <li>Click the MORE OPTIONS menu icon (...) next to the search field and the SORT BY dropdown.    </li> <li>Click Load Snapshots. Navigate to the snapshot file location and select the <code>.lrsnapshot</code> file to load the snapshot details in your IDE.</li> </ol>"},{"location":"vscode/vscode-setting-up-lightrun-jvm/","title":"Setting up a Java application to launch with Lightrun","text":""},{"location":"vscode/vscode-setting-up-lightrun-jvm/#introduction","title":"Introduction","text":"<p>When you'd like to debug your application using Lightrun, running the application with Lightrun's agent directly from VSCode becomes very handy and useful. It is no longer needed to leave VSCode to an external terminal to run the agent and the application.  There is also no need to run Java explicitly in that terminal. This can be achieved by a simple, straight-forward configration (JSON based) which holds the required attributes and values for launching your application. Just add a single line of conifugration as described below and you're good to go.  </p> <p>Before you begin</p> <p>To be able to launch your application with Lightrun directly from VSCode, make sure:</p> <ul> <li>Extension Pack for Java is installed in VSCode</li> <li>Lightrun's extension is installed and you've authenticated</li> <li>Your Java application is compiled with the <code>-g</code> flag</li> <li>Lightrun's Java agent is installed to a known location</li> </ul>"},{"location":"vscode/vscode-setting-up-lightrun-jvm/#configuring-vscode","title":"Configuring VSCode","text":""},{"location":"vscode/vscode-setting-up-lightrun-jvm/#adding-a-configuration","title":"Adding a Configuration","text":"<ol> <li>Set focus on your code</li> <li>From the Run menu select Add Configuration </li> <li>Go to the configuration section where the application's class appear as <code>mainClass</code></li> <li>Add the agent's path to the vmArgs attribute.    Replace the path below with the actual path to the agent.     Linux:     <pre><code>\"vmArgs\": \"-agentpath:/path/to/agent/lightrun_agent.so\"\n</code></pre>    Windows:     <pre><code>\"vmArgs\": \"-agentpath:C:\\\\path\\\\to\\\\agent\\\\lightrun_agent.dll\"\n</code></pre></li> <li>Save the configuration <code>CTRL+S</code></li> </ol> <p>Note</p> <p>If you already have a run configuration, simply select Open Configurations from the Run menu </p> <p> </p> Creating a run configuration"},{"location":"vscode/vscode-setting-up-lightrun-jvm/#a-simple-launch-configuration","title":"A simple launch configuration","text":"<pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"java\",\n\"name\": \"Launch PrimeMainMR\",\n\"request\": \"launch\",\n\"mainClass\": \"PrimeMainMR\",\n\"projectName\": \"java_34b07f01\",\n\"vmArgs\": \"-agentpath:../agent/lightrun_agent.so\"\n}\n]\n}\n</code></pre> <p>Info</p> <p>Additional vmArgs can be added, such as -Xmx1G to increase the heap size to 1GB, see Java debugging options</p> <p>Tip</p> <p>You can easily add attributes by using VSCode's Intellisense <code>CTRL+SPACE</code></p>"},{"location":"vscode/vscode-setting-up-lightrun-jvm/#adding-extra-class-paths","title":"Adding extra class paths","text":"<p>This step is not mandatory</p> <p>In some cases you might need to add additional classes to the agent's path, as described here. <pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"java\",\n\"name\": \"Launch PrimeMainMR\",\n\"request\": \"launch\",\n\"mainClass\": \"PrimeMainMR\",\n\"projectName\": \"java_34b07f01\"\n\"vmArgs\": \"-agentpath:/path/to/agent/lightrun_agent.so=--lightrun_extra_class_path=/path/to/extra/classes\"\n}\n]\n}\n</code></pre></p>"},{"location":"vscode/vscode-setting-up-lightrun-jvm/#running-the-application","title":"Running the application","text":"<p>Using Lightrun to debug your application does not require an actual debugger, and does not require setting breakpoints to debug. Instead, you run your application using Lightrun's agent and insert snapshots, logs and metrics as you like.  </p> <ol> <li>Set focus back on your code</li> <li>Run the application from the debugger extension by selecting \"Run Java\"    Do not select \"Debug Java\", only \"Run Java\".    Other options to run the application are hitting <code>CTRL+F5</code> or selecting Run Without Debugging from the Run menu.  </li> </ol> <p>Good job!</p> <p>The application will run now by Lightrun's agent as can be seen in the TERMINAL. You can now select Lightrun's extension to see the running agent on the sidebar.</p> <p> </p> Running the application with the agent"},{"location":"vscode/vscode-setting-up-lightrun-jvm/#debugging-the-application-with-lightrun","title":"Debugging the application with Lightrun","text":"<p>Now that you've successfully launched you application using Lightrun's agent, it's debugging time... See how you can use snapshots, logs, and metrics to gain dynamic observability into your application.</p>"},{"location":"vscode/vscode-setting-up-lightrun-jvm/#stopping-the-application","title":"Stopping the application","text":"<p>In case the application needs to be stopped (e.g. debugging has ended), just go to the terminal window and hit <code>CTRL+C</code></p> <p> </p> Stopping the application and agent"}]}